
SAME70_FONTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f5c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408f5c  00408f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00408f64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004e8  204009b8  0040991c  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400ea0  00409e04  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402ea0  0040be04  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001567f  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002a63  00000000  00000000  000360be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006634  00000000  00000000  00038b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b58  00000000  00000000  0003f155  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  0003fcad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020a6b  00000000  00000000  0004077d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c4e1  00000000  00000000  000611e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000936e3  00000000  00000000  0006d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003b38  00000000  00000000  00100dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a0 2e 40 20 b5 38 40 00 65 39 40 00 65 39 40 00     ..@ .8@.e9@.e9@.
  400010:	65 39 40 00 65 39 40 00 65 39 40 00 00 00 00 00     e9@.e9@.e9@.....
	...
  40002c:	65 39 40 00 65 39 40 00 00 00 00 00 65 39 40 00     e9@.e9@.....e9@.
  40003c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40004c:	8d 0a 40 00 65 39 40 00 65 39 40 00 65 39 40 00     ..@.e9@.e9@.e9@.
  40005c:	65 39 40 00 65 39 40 00 00 00 00 00 6d 30 40 00     e9@.e9@.....m0@.
  40006c:	85 30 40 00 9d 30 40 00 65 39 40 00 65 39 40 00     .0@..0@.e9@.e9@.
  40007c:	65 39 40 00 b5 30 40 00 cd 30 40 00 65 39 40 00     e9@..0@..0@.e9@.
  40008c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40009c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000ac:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000bc:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000cc:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000dc:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000ec:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  4000fc:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40010c:	65 39 40 00 65 39 40 00 00 00 00 00 00 00 00 00     e9@.e9@.........
  40011c:	00 00 00 00 65 39 40 00 65 39 40 00 65 39 40 00     ....e9@.e9@.e9@.
  40012c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40013c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40014c:	65 39 40 00 65 39 40 00 65 39 40 00 65 39 40 00     e9@.e9@.e9@.e9@.
  40015c:	65 39 40 00 65 39 40 00 65 39 40 00                 e9@.e9@.e9@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	00408f64 	.word	0x00408f64

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00408f64 	.word	0x00408f64
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	00408f64 	.word	0x00408f64
  4001d0:	00000000 	.word	0x00000000

004001d4 <rtc_set_hour_mode>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
  4001d4:	b480      	push	{r7}
  4001d6:	b083      	sub	sp, #12
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
  4001dc:	6039      	str	r1, [r7, #0]
	if (ul_mode) {
  4001de:	683b      	ldr	r3, [r7, #0]
  4001e0:	2b00      	cmp	r3, #0
  4001e2:	d006      	beq.n	4001f2 <rtc_set_hour_mode+0x1e>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001e4:	687b      	ldr	r3, [r7, #4]
  4001e6:	685b      	ldr	r3, [r3, #4]
  4001e8:	f043 0201 	orr.w	r2, r3, #1
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	605a      	str	r2, [r3, #4]
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
	}
}
  4001f0:	e005      	b.n	4001fe <rtc_set_hour_mode+0x2a>
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001f2:	687b      	ldr	r3, [r7, #4]
  4001f4:	685b      	ldr	r3, [r3, #4]
  4001f6:	f023 0201 	bic.w	r2, r3, #1
  4001fa:	687b      	ldr	r3, [r7, #4]
  4001fc:	605a      	str	r2, [r3, #4]
}
  4001fe:	bf00      	nop
  400200:	370c      	adds	r7, #12
  400202:	46bd      	mov	sp, r7
  400204:	f85d 7b04 	ldr.w	r7, [sp], #4
  400208:	4770      	bx	lr

0040020a <rtc_enable_interrupt>:
 *
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
  40020a:	b480      	push	{r7}
  40020c:	b083      	sub	sp, #12
  40020e:	af00      	add	r7, sp, #0
  400210:	6078      	str	r0, [r7, #4]
  400212:	6039      	str	r1, [r7, #0]
	p_rtc->RTC_IER = ul_sources;
  400214:	687b      	ldr	r3, [r7, #4]
  400216:	683a      	ldr	r2, [r7, #0]
  400218:	621a      	str	r2, [r3, #32]
}
  40021a:	bf00      	nop
  40021c:	370c      	adds	r7, #12
  40021e:	46bd      	mov	sp, r7
  400220:	f85d 7b04 	ldr.w	r7, [sp], #4
  400224:	4770      	bx	lr

00400226 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  400226:	b480      	push	{r7}
  400228:	b087      	sub	sp, #28
  40022a:	af00      	add	r7, sp, #0
  40022c:	60f8      	str	r0, [r7, #12]
  40022e:	60b9      	str	r1, [r7, #8]
  400230:	607a      	str	r2, [r7, #4]
  400232:	603b      	str	r3, [r7, #0]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  400234:	68fb      	ldr	r3, [r7, #12]
  400236:	689b      	ldr	r3, [r3, #8]
  400238:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  40023a:	e002      	b.n	400242 <rtc_get_time+0x1c>
		ul_time = p_rtc->RTC_TIMR;
  40023c:	68fb      	ldr	r3, [r7, #12]
  40023e:	689b      	ldr	r3, [r3, #8]
  400240:	617b      	str	r3, [r7, #20]
	while (ul_time != p_rtc->RTC_TIMR) {
  400242:	68fb      	ldr	r3, [r7, #12]
  400244:	689a      	ldr	r2, [r3, #8]
  400246:	697b      	ldr	r3, [r7, #20]
  400248:	429a      	cmp	r2, r3
  40024a:	d1f7      	bne.n	40023c <rtc_get_time+0x16>
	}

	/* Hour */
	if (pul_hour) {
  40024c:	68bb      	ldr	r3, [r7, #8]
  40024e:	2b00      	cmp	r3, #0
  400250:	d01c      	beq.n	40028c <rtc_get_time+0x66>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  400252:	697b      	ldr	r3, [r7, #20]
  400254:	0c1b      	lsrs	r3, r3, #16
  400256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40025a:	613b      	str	r3, [r7, #16]
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40025c:	693b      	ldr	r3, [r7, #16]
  40025e:	091a      	lsrs	r2, r3, #4
  400260:	4613      	mov	r3, r2
  400262:	009b      	lsls	r3, r3, #2
  400264:	4413      	add	r3, r2
  400266:	005b      	lsls	r3, r3, #1
  400268:	461a      	mov	r2, r3
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	f003 030f 	and.w	r3, r3, #15
  400270:	441a      	add	r2, r3
  400272:	68bb      	ldr	r3, [r7, #8]
  400274:	601a      	str	r2, [r3, #0]

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  400276:	697b      	ldr	r3, [r7, #20]
  400278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  40027c:	2b00      	cmp	r3, #0
  40027e:	d005      	beq.n	40028c <rtc_get_time+0x66>
			*pul_hour += 12;
  400280:	68bb      	ldr	r3, [r7, #8]
  400282:	681b      	ldr	r3, [r3, #0]
  400284:	f103 020c 	add.w	r2, r3, #12
  400288:	68bb      	ldr	r3, [r7, #8]
  40028a:	601a      	str	r2, [r3, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  40028c:	687b      	ldr	r3, [r7, #4]
  40028e:	2b00      	cmp	r3, #0
  400290:	d011      	beq.n	4002b6 <rtc_get_time+0x90>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  400292:	697b      	ldr	r3, [r7, #20]
  400294:	0a1b      	lsrs	r3, r3, #8
  400296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40029a:	613b      	str	r3, [r7, #16]
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  40029c:	693b      	ldr	r3, [r7, #16]
  40029e:	091a      	lsrs	r2, r3, #4
  4002a0:	4613      	mov	r3, r2
  4002a2:	009b      	lsls	r3, r3, #2
  4002a4:	4413      	add	r3, r2
  4002a6:	005b      	lsls	r3, r3, #1
  4002a8:	461a      	mov	r2, r3
  4002aa:	693b      	ldr	r3, [r7, #16]
  4002ac:	f003 030f 	and.w	r3, r3, #15
  4002b0:	441a      	add	r2, r3
  4002b2:	687b      	ldr	r3, [r7, #4]
  4002b4:	601a      	str	r2, [r3, #0]
	}

	/* Second */
	if (pul_second) {
  4002b6:	683b      	ldr	r3, [r7, #0]
  4002b8:	2b00      	cmp	r3, #0
  4002ba:	d010      	beq.n	4002de <rtc_get_time+0xb8>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
  4002bc:	697b      	ldr	r3, [r7, #20]
  4002be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4002c2:	613b      	str	r3, [r7, #16]
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4002c4:	693b      	ldr	r3, [r7, #16]
  4002c6:	091a      	lsrs	r2, r3, #4
  4002c8:	4613      	mov	r3, r2
  4002ca:	009b      	lsls	r3, r3, #2
  4002cc:	4413      	add	r3, r2
  4002ce:	005b      	lsls	r3, r3, #1
  4002d0:	461a      	mov	r2, r3
  4002d2:	693b      	ldr	r3, [r7, #16]
  4002d4:	f003 030f 	and.w	r3, r3, #15
  4002d8:	441a      	add	r2, r3
  4002da:	683b      	ldr	r3, [r7, #0]
  4002dc:	601a      	str	r2, [r3, #0]
	}
}
  4002de:	bf00      	nop
  4002e0:	371c      	adds	r7, #28
  4002e2:	46bd      	mov	sp, r7
  4002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002e8:	4770      	bx	lr
	...

004002ec <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  4002ec:	b480      	push	{r7}
  4002ee:	b087      	sub	sp, #28
  4002f0:	af00      	add	r7, sp, #0
  4002f2:	60f8      	str	r0, [r7, #12]
  4002f4:	60b9      	str	r1, [r7, #8]
  4002f6:	607a      	str	r2, [r7, #4]
  4002f8:	603b      	str	r3, [r7, #0]
	uint32_t ul_time = 0;
  4002fa:	2300      	movs	r3, #0
  4002fc:	617b      	str	r3, [r7, #20]

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002fe:	68fb      	ldr	r3, [r7, #12]
  400300:	685b      	ldr	r3, [r3, #4]
  400302:	f003 0301 	and.w	r3, r3, #1
  400306:	2b01      	cmp	r3, #1
  400308:	d109      	bne.n	40031e <rtc_set_time+0x32>
		if (ul_hour > 12) {
  40030a:	68bb      	ldr	r3, [r7, #8]
  40030c:	2b0c      	cmp	r3, #12
  40030e:	d906      	bls.n	40031e <rtc_set_time+0x32>
			ul_hour -= 12;
  400310:	68bb      	ldr	r3, [r7, #8]
  400312:	3b0c      	subs	r3, #12
  400314:	60bb      	str	r3, [r7, #8]
			ul_time |= RTC_TIMR_AMPM;
  400316:	697b      	ldr	r3, [r7, #20]
  400318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40031c:	617b      	str	r3, [r7, #20]
		}
	}

	/* Hour */
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  40031e:	68bb      	ldr	r3, [r7, #8]
  400320:	4a33      	ldr	r2, [pc, #204]	; (4003f0 <rtc_set_time+0x104>)
  400322:	fba2 2303 	umull	r2, r3, r2, r3
  400326:	08db      	lsrs	r3, r3, #3
  400328:	0518      	lsls	r0, r3, #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40032a:	68b9      	ldr	r1, [r7, #8]
  40032c:	4b30      	ldr	r3, [pc, #192]	; (4003f0 <rtc_set_time+0x104>)
  40032e:	fba3 2301 	umull	r2, r3, r3, r1
  400332:	08da      	lsrs	r2, r3, #3
  400334:	4613      	mov	r3, r2
  400336:	009b      	lsls	r3, r3, #2
  400338:	4413      	add	r3, r2
  40033a:	005b      	lsls	r3, r3, #1
  40033c:	1aca      	subs	r2, r1, r3
  40033e:	0413      	lsls	r3, r2, #16
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400340:	4303      	orrs	r3, r0
  400342:	697a      	ldr	r2, [r7, #20]
  400344:	4313      	orrs	r3, r2
  400346:	617b      	str	r3, [r7, #20]

	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  400348:	687b      	ldr	r3, [r7, #4]
  40034a:	4a29      	ldr	r2, [pc, #164]	; (4003f0 <rtc_set_time+0x104>)
  40034c:	fba2 2303 	umull	r2, r3, r2, r3
  400350:	08db      	lsrs	r3, r3, #3
  400352:	0318      	lsls	r0, r3, #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400354:	6879      	ldr	r1, [r7, #4]
  400356:	4b26      	ldr	r3, [pc, #152]	; (4003f0 <rtc_set_time+0x104>)
  400358:	fba3 2301 	umull	r2, r3, r3, r1
  40035c:	08da      	lsrs	r2, r3, #3
  40035e:	4613      	mov	r3, r2
  400360:	009b      	lsls	r3, r3, #2
  400362:	4413      	add	r3, r2
  400364:	005b      	lsls	r3, r3, #1
  400366:	1aca      	subs	r2, r1, r3
  400368:	0213      	lsls	r3, r2, #8
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40036a:	4303      	orrs	r3, r0
  40036c:	697a      	ldr	r2, [r7, #20]
  40036e:	4313      	orrs	r3, r2
  400370:	617b      	str	r3, [r7, #20]

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400372:	683b      	ldr	r3, [r7, #0]
  400374:	4a1e      	ldr	r2, [pc, #120]	; (4003f0 <rtc_set_time+0x104>)
  400376:	fba2 2303 	umull	r2, r3, r2, r3
  40037a:	08db      	lsrs	r3, r3, #3
  40037c:	0118      	lsls	r0, r3, #4
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40037e:	6839      	ldr	r1, [r7, #0]
  400380:	4b1b      	ldr	r3, [pc, #108]	; (4003f0 <rtc_set_time+0x104>)
  400382:	fba3 2301 	umull	r2, r3, r3, r1
  400386:	08da      	lsrs	r2, r3, #3
  400388:	4613      	mov	r3, r2
  40038a:	009b      	lsls	r3, r3, #2
  40038c:	4413      	add	r3, r2
  40038e:	005b      	lsls	r3, r3, #1
  400390:	1aca      	subs	r2, r1, r3
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400392:	ea40 0302 	orr.w	r3, r0, r2
  400396:	697a      	ldr	r2, [r7, #20]
  400398:	4313      	orrs	r3, r2
  40039a:	617b      	str	r3, [r7, #20]

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40039c:	bf00      	nop
  40039e:	68fb      	ldr	r3, [r7, #12]
  4003a0:	699b      	ldr	r3, [r3, #24]
  4003a2:	f003 0304 	and.w	r3, r3, #4
  4003a6:	2b04      	cmp	r3, #4
  4003a8:	d1f9      	bne.n	40039e <rtc_set_time+0xb2>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  4003aa:	68fb      	ldr	r3, [r7, #12]
  4003ac:	681b      	ldr	r3, [r3, #0]
  4003ae:	f043 0201 	orr.w	r2, r3, #1
  4003b2:	68fb      	ldr	r3, [r7, #12]
  4003b4:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4003b6:	bf00      	nop
  4003b8:	68fb      	ldr	r3, [r7, #12]
  4003ba:	699b      	ldr	r3, [r3, #24]
  4003bc:	f003 0301 	and.w	r3, r3, #1
  4003c0:	2b01      	cmp	r3, #1
  4003c2:	d1f9      	bne.n	4003b8 <rtc_set_time+0xcc>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4003c4:	68fb      	ldr	r3, [r7, #12]
  4003c6:	2201      	movs	r2, #1
  4003c8:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_TIMR = ul_time;
  4003ca:	68fb      	ldr	r3, [r7, #12]
  4003cc:	697a      	ldr	r2, [r7, #20]
  4003ce:	609a      	str	r2, [r3, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  4003d0:	68fb      	ldr	r3, [r7, #12]
  4003d2:	681b      	ldr	r3, [r3, #0]
  4003d4:	f023 0201 	bic.w	r2, r3, #1
  4003d8:	68fb      	ldr	r3, [r7, #12]
  4003da:	601a      	str	r2, [r3, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4003dc:	68fb      	ldr	r3, [r7, #12]
  4003de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4003e0:	f003 0301 	and.w	r3, r3, #1
}
  4003e4:	4618      	mov	r0, r3
  4003e6:	371c      	adds	r7, #28
  4003e8:	46bd      	mov	sp, r7
  4003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003ee:	4770      	bx	lr
  4003f0:	cccccccd 	.word	0xcccccccd

004003f4 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003f4:	b480      	push	{r7}
  4003f6:	b087      	sub	sp, #28
  4003f8:	af00      	add	r7, sp, #0
  4003fa:	60f8      	str	r0, [r7, #12]
  4003fc:	60b9      	str	r1, [r7, #8]
  4003fe:	607a      	str	r2, [r7, #4]
  400400:	603b      	str	r3, [r7, #0]
	uint32_t ul_date = 0;
  400402:	2300      	movs	r3, #0
  400404:	617b      	str	r3, [r7, #20]

	/* Cent */
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400406:	68bb      	ldr	r3, [r7, #8]
  400408:	4a47      	ldr	r2, [pc, #284]	; (400528 <rtc_set_date+0x134>)
  40040a:	fba2 2303 	umull	r2, r3, r2, r3
  40040e:	099b      	lsrs	r3, r3, #6
  400410:	0118      	lsls	r0, r3, #4
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400412:	68bb      	ldr	r3, [r7, #8]
  400414:	4a45      	ldr	r2, [pc, #276]	; (40052c <rtc_set_date+0x138>)
  400416:	fba2 2303 	umull	r2, r3, r2, r3
  40041a:	0959      	lsrs	r1, r3, #5
  40041c:	4b44      	ldr	r3, [pc, #272]	; (400530 <rtc_set_date+0x13c>)
  40041e:	fba3 2301 	umull	r2, r3, r3, r1
  400422:	08da      	lsrs	r2, r3, #3
  400424:	4613      	mov	r3, r2
  400426:	009b      	lsls	r3, r3, #2
  400428:	4413      	add	r3, r2
  40042a:	005b      	lsls	r3, r3, #1
  40042c:	1aca      	subs	r2, r1, r3
			(RTC_CALR_CENT_Pos + BCD_SHIFT) |
  40042e:	ea40 0302 	orr.w	r3, r0, r2
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400432:	697a      	ldr	r2, [r7, #20]
  400434:	4313      	orrs	r3, r2
  400436:	617b      	str	r3, [r7, #20]

	/* Year */
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400438:	68bb      	ldr	r3, [r7, #8]
  40043a:	4a3d      	ldr	r2, [pc, #244]	; (400530 <rtc_set_date+0x13c>)
  40043c:	fba2 2303 	umull	r2, r3, r2, r3
  400440:	08d9      	lsrs	r1, r3, #3
  400442:	4b3b      	ldr	r3, [pc, #236]	; (400530 <rtc_set_date+0x13c>)
  400444:	fba3 2301 	umull	r2, r3, r3, r1
  400448:	08da      	lsrs	r2, r3, #3
  40044a:	4613      	mov	r3, r2
  40044c:	009b      	lsls	r3, r3, #2
  40044e:	4413      	add	r3, r2
  400450:	005b      	lsls	r3, r3, #1
  400452:	1aca      	subs	r2, r1, r3
  400454:	0310      	lsls	r0, r2, #12
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400456:	68b9      	ldr	r1, [r7, #8]
  400458:	4b35      	ldr	r3, [pc, #212]	; (400530 <rtc_set_date+0x13c>)
  40045a:	fba3 2301 	umull	r2, r3, r3, r1
  40045e:	08da      	lsrs	r2, r3, #3
  400460:	4613      	mov	r3, r2
  400462:	009b      	lsls	r3, r3, #2
  400464:	4413      	add	r3, r2
  400466:	005b      	lsls	r3, r3, #1
  400468:	1aca      	subs	r2, r1, r3
  40046a:	0213      	lsls	r3, r2, #8
			(RTC_CALR_YEAR_Pos + BCD_SHIFT)) |
  40046c:	4303      	orrs	r3, r0
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  40046e:	697a      	ldr	r2, [r7, #20]
  400470:	4313      	orrs	r3, r2
  400472:	617b      	str	r3, [r7, #20]

	/* Month */
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400474:	687b      	ldr	r3, [r7, #4]
  400476:	4a2e      	ldr	r2, [pc, #184]	; (400530 <rtc_set_date+0x13c>)
  400478:	fba2 2303 	umull	r2, r3, r2, r3
  40047c:	08db      	lsrs	r3, r3, #3
  40047e:	0518      	lsls	r0, r3, #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	6879      	ldr	r1, [r7, #4]
  400482:	4b2b      	ldr	r3, [pc, #172]	; (400530 <rtc_set_date+0x13c>)
  400484:	fba3 2301 	umull	r2, r3, r3, r1
  400488:	08da      	lsrs	r2, r3, #3
  40048a:	4613      	mov	r3, r2
  40048c:	009b      	lsls	r3, r3, #2
  40048e:	4413      	add	r3, r2
  400490:	005b      	lsls	r3, r3, #1
  400492:	1aca      	subs	r2, r1, r3
  400494:	0413      	lsls	r3, r2, #16
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400496:	4303      	orrs	r3, r0
  400498:	697a      	ldr	r2, [r7, #20]
  40049a:	4313      	orrs	r3, r2
  40049c:	617b      	str	r3, [r7, #20]

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40049e:	6a3b      	ldr	r3, [r7, #32]
  4004a0:	055b      	lsls	r3, r3, #21
  4004a2:	697a      	ldr	r2, [r7, #20]
  4004a4:	4313      	orrs	r3, r2
  4004a6:	617b      	str	r3, [r7, #20]

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a8:	683b      	ldr	r3, [r7, #0]
  4004aa:	4a21      	ldr	r2, [pc, #132]	; (400530 <rtc_set_date+0x13c>)
  4004ac:	fba2 2303 	umull	r2, r3, r2, r3
  4004b0:	08db      	lsrs	r3, r3, #3
  4004b2:	0718      	lsls	r0, r3, #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4004b4:	6839      	ldr	r1, [r7, #0]
  4004b6:	4b1e      	ldr	r3, [pc, #120]	; (400530 <rtc_set_date+0x13c>)
  4004b8:	fba3 2301 	umull	r2, r3, r3, r1
  4004bc:	08da      	lsrs	r2, r3, #3
  4004be:	4613      	mov	r3, r2
  4004c0:	009b      	lsls	r3, r3, #2
  4004c2:	4413      	add	r3, r2
  4004c4:	005b      	lsls	r3, r3, #1
  4004c6:	1aca      	subs	r2, r1, r3
  4004c8:	0613      	lsls	r3, r2, #24
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004ca:	4303      	orrs	r3, r0
  4004cc:	697a      	ldr	r2, [r7, #20]
  4004ce:	4313      	orrs	r3, r2
  4004d0:	617b      	str	r3, [r7, #20]

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4004d2:	bf00      	nop
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	699b      	ldr	r3, [r3, #24]
  4004d8:	f003 0304 	and.w	r3, r3, #4
  4004dc:	2b04      	cmp	r3, #4
  4004de:	d1f9      	bne.n	4004d4 <rtc_set_date+0xe0>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4004e0:	68fb      	ldr	r3, [r7, #12]
  4004e2:	681b      	ldr	r3, [r3, #0]
  4004e4:	f043 0202 	orr.w	r2, r3, #2
  4004e8:	68fb      	ldr	r3, [r7, #12]
  4004ea:	601a      	str	r2, [r3, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4004ec:	bf00      	nop
  4004ee:	68fb      	ldr	r3, [r7, #12]
  4004f0:	699b      	ldr	r3, [r3, #24]
  4004f2:	f003 0301 	and.w	r3, r3, #1
  4004f6:	2b01      	cmp	r3, #1
  4004f8:	d1f9      	bne.n	4004ee <rtc_set_date+0xfa>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4004fa:	68fb      	ldr	r3, [r7, #12]
  4004fc:	2201      	movs	r2, #1
  4004fe:	61da      	str	r2, [r3, #28]
	p_rtc->RTC_CALR = ul_date;
  400500:	68fb      	ldr	r3, [r7, #12]
  400502:	697a      	ldr	r2, [r7, #20]
  400504:	60da      	str	r2, [r3, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400506:	68fb      	ldr	r3, [r7, #12]
  400508:	681b      	ldr	r3, [r3, #0]
  40050a:	f023 0202 	bic.w	r2, r3, #2
  40050e:	68fb      	ldr	r3, [r7, #12]
  400510:	601a      	str	r2, [r3, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  400512:	68fb      	ldr	r3, [r7, #12]
  400514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400516:	f003 0302 	and.w	r3, r3, #2
}
  40051a:	4618      	mov	r0, r3
  40051c:	371c      	adds	r7, #28
  40051e:	46bd      	mov	sp, r7
  400520:	f85d 7b04 	ldr.w	r7, [sp], #4
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	10624dd3 	.word	0x10624dd3
  40052c:	51eb851f 	.word	0x51eb851f
  400530:	cccccccd 	.word	0xcccccccd

00400534 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
  400534:	b480      	push	{r7}
  400536:	b083      	sub	sp, #12
  400538:	af00      	add	r7, sp, #0
  40053a:	6078      	str	r0, [r7, #4]
  40053c:	460b      	mov	r3, r1
  40053e:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400540:	887a      	ldrh	r2, [r7, #2]
  400542:	4b07      	ldr	r3, [pc, #28]	; (400560 <rtt_init+0x2c>)
  400544:	681b      	ldr	r3, [r3, #0]
  400546:	4313      	orrs	r3, r2
  400548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
  40054c:	687b      	ldr	r3, [r7, #4]
  40054e:	601a      	str	r2, [r3, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
  400550:	2300      	movs	r3, #0
}
  400552:	4618      	mov	r0, r3
  400554:	370c      	adds	r7, #12
  400556:	46bd      	mov	sp, r7
  400558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop
  400560:	204009d4 	.word	0x204009d4

00400564 <rtt_sel_source>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
  400564:	b480      	push	{r7}
  400566:	b083      	sub	sp, #12
  400568:	af00      	add	r7, sp, #0
  40056a:	6078      	str	r0, [r7, #4]
  40056c:	460b      	mov	r3, r1
  40056e:	70fb      	strb	r3, [r7, #3]
	if(is_rtc_sel) {
  400570:	78fb      	ldrb	r3, [r7, #3]
  400572:	2b00      	cmp	r3, #0
  400574:	d00d      	beq.n	400592 <rtt_sel_source+0x2e>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400576:	4b10      	ldr	r3, [pc, #64]	; (4005b8 <rtt_sel_source+0x54>)
  400578:	681b      	ldr	r3, [r3, #0]
  40057a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  40057e:	4a0e      	ldr	r2, [pc, #56]	; (4005b8 <rtt_sel_source+0x54>)
  400580:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400582:	687b      	ldr	r3, [r7, #4]
  400584:	681a      	ldr	r2, [r3, #0]
  400586:	4b0c      	ldr	r3, [pc, #48]	; (4005b8 <rtt_sel_source+0x54>)
  400588:	681b      	ldr	r3, [r3, #0]
  40058a:	431a      	orrs	r2, r3
  40058c:	687b      	ldr	r3, [r7, #4]
  40058e:	601a      	str	r2, [r3, #0]
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	}
}
  400590:	e00c      	b.n	4005ac <rtt_sel_source+0x48>
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  400592:	4b09      	ldr	r3, [pc, #36]	; (4005b8 <rtt_sel_source+0x54>)
  400594:	681b      	ldr	r3, [r3, #0]
  400596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  40059a:	4a07      	ldr	r2, [pc, #28]	; (4005b8 <rtt_sel_source+0x54>)
  40059c:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40059e:	687b      	ldr	r3, [r7, #4]
  4005a0:	681a      	ldr	r2, [r3, #0]
  4005a2:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <rtt_sel_source+0x54>)
  4005a4:	681b      	ldr	r3, [r3, #0]
  4005a6:	431a      	orrs	r2, r3
  4005a8:	687b      	ldr	r3, [r7, #4]
  4005aa:	601a      	str	r2, [r3, #0]
}
  4005ac:	bf00      	nop
  4005ae:	370c      	adds	r7, #12
  4005b0:	46bd      	mov	sp, r7
  4005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005b6:	4770      	bx	lr
  4005b8:	204009d4 	.word	0x204009d4

004005bc <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  4005bc:	b480      	push	{r7}
  4005be:	b085      	sub	sp, #20
  4005c0:	af00      	add	r7, sp, #0
  4005c2:	6078      	str	r0, [r7, #4]
  4005c4:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4005c6:	687b      	ldr	r3, [r7, #4]
  4005c8:	681b      	ldr	r3, [r3, #0]
  4005ca:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
  4005cc:	68fa      	ldr	r2, [r7, #12]
  4005ce:	683b      	ldr	r3, [r7, #0]
  4005d0:	4313      	orrs	r3, r2
  4005d2:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4005d4:	4b06      	ldr	r3, [pc, #24]	; (4005f0 <rtt_enable_interrupt+0x34>)
  4005d6:	681b      	ldr	r3, [r3, #0]
  4005d8:	68fa      	ldr	r2, [r7, #12]
  4005da:	4313      	orrs	r3, r2
  4005dc:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  4005de:	687b      	ldr	r3, [r7, #4]
  4005e0:	68fa      	ldr	r2, [r7, #12]
  4005e2:	601a      	str	r2, [r3, #0]
}
  4005e4:	bf00      	nop
  4005e6:	3714      	adds	r7, #20
  4005e8:	46bd      	mov	sp, r7
  4005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005ee:	4770      	bx	lr
  4005f0:	204009d4 	.word	0x204009d4

004005f4 <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
  4005f4:	b480      	push	{r7}
  4005f6:	b085      	sub	sp, #20
  4005f8:	af00      	add	r7, sp, #0
  4005fa:	6078      	str	r0, [r7, #4]
  4005fc:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
  4005fe:	2300      	movs	r3, #0
  400600:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
  400602:	687b      	ldr	r3, [r7, #4]
  400604:	681b      	ldr	r3, [r3, #0]
  400606:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
  400608:	683b      	ldr	r3, [r7, #0]
  40060a:	43db      	mvns	r3, r3
  40060c:	68fa      	ldr	r2, [r7, #12]
  40060e:	4013      	ands	r3, r2
  400610:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400612:	4b07      	ldr	r3, [pc, #28]	; (400630 <rtt_disable_interrupt+0x3c>)
  400614:	681b      	ldr	r3, [r3, #0]
  400616:	68fa      	ldr	r2, [r7, #12]
  400618:	4313      	orrs	r3, r2
  40061a:	60fb      	str	r3, [r7, #12]
#endif
	p_rtt->RTT_MR = temp;
  40061c:	687b      	ldr	r3, [r7, #4]
  40061e:	68fa      	ldr	r2, [r7, #12]
  400620:	601a      	str	r2, [r3, #0]
}
  400622:	bf00      	nop
  400624:	3714      	adds	r7, #20
  400626:	46bd      	mov	sp, r7
  400628:	f85d 7b04 	ldr.w	r7, [sp], #4
  40062c:	4770      	bx	lr
  40062e:	bf00      	nop
  400630:	204009d4 	.word	0x204009d4

00400634 <rtt_read_timer_value>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
  400634:	b480      	push	{r7}
  400636:	b085      	sub	sp, #20
  400638:	af00      	add	r7, sp, #0
  40063a:	6078      	str	r0, [r7, #4]
	uint32_t rtt_val = p_rtt->RTT_VR;
  40063c:	687b      	ldr	r3, [r7, #4]
  40063e:	689b      	ldr	r3, [r3, #8]
  400640:	60fb      	str	r3, [r7, #12]

	while (rtt_val != p_rtt->RTT_VR) {
  400642:	e002      	b.n	40064a <rtt_read_timer_value+0x16>
		rtt_val = p_rtt->RTT_VR;
  400644:	687b      	ldr	r3, [r7, #4]
  400646:	689b      	ldr	r3, [r3, #8]
  400648:	60fb      	str	r3, [r7, #12]
	while (rtt_val != p_rtt->RTT_VR) {
  40064a:	687b      	ldr	r3, [r7, #4]
  40064c:	689a      	ldr	r2, [r3, #8]
  40064e:	68fb      	ldr	r3, [r7, #12]
  400650:	429a      	cmp	r2, r3
  400652:	d1f7      	bne.n	400644 <rtt_read_timer_value+0x10>
	}

	return rtt_val;
  400654:	68fb      	ldr	r3, [r7, #12]
}
  400656:	4618      	mov	r0, r3
  400658:	3714      	adds	r7, #20
  40065a:	46bd      	mov	sp, r7
  40065c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400660:	4770      	bx	lr

00400662 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
  400662:	b480      	push	{r7}
  400664:	b083      	sub	sp, #12
  400666:	af00      	add	r7, sp, #0
  400668:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
  40066a:	687b      	ldr	r3, [r7, #4]
  40066c:	68db      	ldr	r3, [r3, #12]
}
  40066e:	4618      	mov	r0, r3
  400670:	370c      	adds	r7, #12
  400672:	46bd      	mov	sp, r7
  400674:	f85d 7b04 	ldr.w	r7, [sp], #4
  400678:	4770      	bx	lr
	...

0040067c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40067c:	b580      	push	{r7, lr}
  40067e:	b084      	sub	sp, #16
  400680:	af00      	add	r7, sp, #0
  400682:	6078      	str	r0, [r7, #4]
  400684:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400686:	687b      	ldr	r3, [r7, #4]
  400688:	681b      	ldr	r3, [r3, #0]
  40068a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40068e:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400690:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400694:	480d      	ldr	r0, [pc, #52]	; (4006cc <rtt_write_alarm_time+0x50>)
  400696:	4b0e      	ldr	r3, [pc, #56]	; (4006d0 <rtt_write_alarm_time+0x54>)
  400698:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40069a:	683b      	ldr	r3, [r7, #0]
  40069c:	2b00      	cmp	r3, #0
  40069e:	d104      	bne.n	4006aa <rtt_write_alarm_time+0x2e>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	f04f 32ff 	mov.w	r2, #4294967295
  4006a6:	605a      	str	r2, [r3, #4]
  4006a8:	e003      	b.n	4006b2 <rtt_write_alarm_time+0x36>
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
  4006aa:	683b      	ldr	r3, [r7, #0]
  4006ac:	1e5a      	subs	r2, r3, #1
  4006ae:	687b      	ldr	r3, [r7, #4]
  4006b0:	605a      	str	r2, [r3, #4]
	}

	if (flag) {
  4006b2:	68fb      	ldr	r3, [r7, #12]
  4006b4:	2b00      	cmp	r3, #0
  4006b6:	d004      	beq.n	4006c2 <rtt_write_alarm_time+0x46>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  4006b8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4006bc:	4803      	ldr	r0, [pc, #12]	; (4006cc <rtt_write_alarm_time+0x50>)
  4006be:	4b05      	ldr	r3, [pc, #20]	; (4006d4 <rtt_write_alarm_time+0x58>)
  4006c0:	4798      	blx	r3
	}

	return 0;
  4006c2:	2300      	movs	r3, #0
}
  4006c4:	4618      	mov	r0, r3
  4006c6:	3710      	adds	r7, #16
  4006c8:	46bd      	mov	sp, r7
  4006ca:	bd80      	pop	{r7, pc}
  4006cc:	400e1830 	.word	0x400e1830
  4006d0:	004005f5 	.word	0x004005f5
  4006d4:	004005bd 	.word	0x004005bd

004006d8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4006d8:	b480      	push	{r7}
  4006da:	b083      	sub	sp, #12
  4006dc:	af00      	add	r7, sp, #0
  4006de:	4603      	mov	r3, r0
  4006e0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4006e2:	4909      	ldr	r1, [pc, #36]	; (400708 <NVIC_EnableIRQ+0x30>)
  4006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4006e8:	095b      	lsrs	r3, r3, #5
  4006ea:	79fa      	ldrb	r2, [r7, #7]
  4006ec:	f002 021f 	and.w	r2, r2, #31
  4006f0:	2001      	movs	r0, #1
  4006f2:	fa00 f202 	lsl.w	r2, r0, r2
  4006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4006fa:	bf00      	nop
  4006fc:	370c      	adds	r7, #12
  4006fe:	46bd      	mov	sp, r7
  400700:	f85d 7b04 	ldr.w	r7, [sp], #4
  400704:	4770      	bx	lr
  400706:	bf00      	nop
  400708:	e000e100 	.word	0xe000e100

0040070c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40070c:	b480      	push	{r7}
  40070e:	b083      	sub	sp, #12
  400710:	af00      	add	r7, sp, #0
  400712:	4603      	mov	r3, r0
  400714:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  400716:	4909      	ldr	r1, [pc, #36]	; (40073c <NVIC_DisableIRQ+0x30>)
  400718:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40071c:	095b      	lsrs	r3, r3, #5
  40071e:	79fa      	ldrb	r2, [r7, #7]
  400720:	f002 021f 	and.w	r2, r2, #31
  400724:	2001      	movs	r0, #1
  400726:	fa00 f202 	lsl.w	r2, r0, r2
  40072a:	3320      	adds	r3, #32
  40072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400730:	bf00      	nop
  400732:	370c      	adds	r7, #12
  400734:	46bd      	mov	sp, r7
  400736:	f85d 7b04 	ldr.w	r7, [sp], #4
  40073a:	4770      	bx	lr
  40073c:	e000e100 	.word	0xe000e100

00400740 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  400740:	b480      	push	{r7}
  400742:	b083      	sub	sp, #12
  400744:	af00      	add	r7, sp, #0
  400746:	4603      	mov	r3, r0
  400748:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40074a:	4909      	ldr	r1, [pc, #36]	; (400770 <NVIC_ClearPendingIRQ+0x30>)
  40074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400750:	095b      	lsrs	r3, r3, #5
  400752:	79fa      	ldrb	r2, [r7, #7]
  400754:	f002 021f 	and.w	r2, r2, #31
  400758:	2001      	movs	r0, #1
  40075a:	fa00 f202 	lsl.w	r2, r0, r2
  40075e:	3360      	adds	r3, #96	; 0x60
  400760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  400764:	bf00      	nop
  400766:	370c      	adds	r7, #12
  400768:	46bd      	mov	sp, r7
  40076a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40076e:	4770      	bx	lr
  400770:	e000e100 	.word	0xe000e100

00400774 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  400774:	b480      	push	{r7}
  400776:	b083      	sub	sp, #12
  400778:	af00      	add	r7, sp, #0
  40077a:	4603      	mov	r3, r0
  40077c:	6039      	str	r1, [r7, #0]
  40077e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  400780:	f997 3007 	ldrsb.w	r3, [r7, #7]
  400784:	2b00      	cmp	r3, #0
  400786:	da0b      	bge.n	4007a0 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400788:	490d      	ldr	r1, [pc, #52]	; (4007c0 <NVIC_SetPriority+0x4c>)
  40078a:	79fb      	ldrb	r3, [r7, #7]
  40078c:	f003 030f 	and.w	r3, r3, #15
  400790:	3b04      	subs	r3, #4
  400792:	683a      	ldr	r2, [r7, #0]
  400794:	b2d2      	uxtb	r2, r2
  400796:	0152      	lsls	r2, r2, #5
  400798:	b2d2      	uxtb	r2, r2
  40079a:	440b      	add	r3, r1
  40079c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40079e:	e009      	b.n	4007b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4007a0:	4908      	ldr	r1, [pc, #32]	; (4007c4 <NVIC_SetPriority+0x50>)
  4007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4007a6:	683a      	ldr	r2, [r7, #0]
  4007a8:	b2d2      	uxtb	r2, r2
  4007aa:	0152      	lsls	r2, r2, #5
  4007ac:	b2d2      	uxtb	r2, r2
  4007ae:	440b      	add	r3, r1
  4007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4007b4:	bf00      	nop
  4007b6:	370c      	adds	r7, #12
  4007b8:	46bd      	mov	sp, r7
  4007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007be:	4770      	bx	lr
  4007c0:	e000ed00 	.word	0xe000ed00
  4007c4:	e000e100 	.word	0xe000e100

004007c8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4007c8:	b580      	push	{r7, lr}
  4007ca:	b082      	sub	sp, #8
  4007cc:	af00      	add	r7, sp, #0
  4007ce:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4007d0:	6878      	ldr	r0, [r7, #4]
  4007d2:	4b03      	ldr	r3, [pc, #12]	; (4007e0 <sysclk_enable_peripheral_clock+0x18>)
  4007d4:	4798      	blx	r3
}
  4007d6:	bf00      	nop
  4007d8:	3708      	adds	r7, #8
  4007da:	46bd      	mov	sp, r7
  4007dc:	bd80      	pop	{r7, pc}
  4007de:	bf00      	nop
  4007e0:	004033a9 	.word	0x004033a9

004007e4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  4007e8:	200a      	movs	r0, #10
  4007ea:	4b08      	ldr	r3, [pc, #32]	; (40080c <ioport_init+0x28>)
  4007ec:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  4007ee:	200b      	movs	r0, #11
  4007f0:	4b06      	ldr	r3, [pc, #24]	; (40080c <ioport_init+0x28>)
  4007f2:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4007f4:	200c      	movs	r0, #12
  4007f6:	4b05      	ldr	r3, [pc, #20]	; (40080c <ioport_init+0x28>)
  4007f8:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4007fa:	2010      	movs	r0, #16
  4007fc:	4b03      	ldr	r3, [pc, #12]	; (40080c <ioport_init+0x28>)
  4007fe:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400800:	2011      	movs	r0, #17
  400802:	4b02      	ldr	r3, [pc, #8]	; (40080c <ioport_init+0x28>)
  400804:	4798      	blx	r3
	arch_ioport_init();
}
  400806:	bf00      	nop
  400808:	bd80      	pop	{r7, pc}
  40080a:	bf00      	nop
  40080c:	004007c9 	.word	0x004007c9

00400810 <wheel_callback>:
volatile Bool but_m_freq;
volatile Bool but_stop;

volatile Bool f_rtt_alarme = false;

void wheel_callback(void){
  400810:	b480      	push	{r7}
  400812:	af00      	add	r7, sp, #0
	wheel = true;
  400814:	4b03      	ldr	r3, [pc, #12]	; (400824 <wheel_callback+0x14>)
  400816:	2201      	movs	r2, #1
  400818:	701a      	strb	r2, [r3, #0]
}
  40081a:	bf00      	nop
  40081c:	46bd      	mov	sp, r7
  40081e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400822:	4770      	bx	lr
  400824:	20400e50 	.word	0x20400e50

00400828 <but_m_freq_callback>:
void but_m_freq_callback(void){
  400828:	b480      	push	{r7}
  40082a:	af00      	add	r7, sp, #0
	but_m_freq = true;
  40082c:	4b03      	ldr	r3, [pc, #12]	; (40083c <but_m_freq_callback+0x14>)
  40082e:	2201      	movs	r2, #1
  400830:	701a      	strb	r2, [r3, #0]
}
  400832:	bf00      	nop
  400834:	46bd      	mov	sp, r7
  400836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40083a:	4770      	bx	lr
  40083c:	20400e74 	.word	0x20400e74

00400840 <but_stop_callback>:
void but_stop_callback(void){
  400840:	b480      	push	{r7}
  400842:	af00      	add	r7, sp, #0
	but_stop = true;
  400844:	4b03      	ldr	r3, [pc, #12]	; (400854 <but_stop_callback+0x14>)
  400846:	2201      	movs	r2, #1
  400848:	701a      	strb	r2, [r3, #0]
}
  40084a:	bf00      	nop
  40084c:	46bd      	mov	sp, r7
  40084e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400852:	4770      	bx	lr
  400854:	20400e60 	.word	0x20400e60

00400858 <init>:

void init(){
  400858:	b590      	push	{r4, r7, lr}
  40085a:	b083      	sub	sp, #12
  40085c:	af02      	add	r7, sp, #8
	board_init();
  40085e:	4b3c      	ldr	r3, [pc, #240]	; (400950 <init+0xf8>)
  400860:	4798      	blx	r3
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  400862:	4b3c      	ldr	r3, [pc, #240]	; (400954 <init+0xfc>)
  400864:	4798      	blx	r3
	
	// configura botoes do oled
	pmc_enable_periph_clk(EBUT1_PIO_ID);
  400866:	2010      	movs	r0, #16
  400868:	4b3b      	ldr	r3, [pc, #236]	; (400958 <init+0x100>)
  40086a:	4798      	blx	r3
	pmc_enable_periph_clk(EBUT2_PIO_ID);
  40086c:	200a      	movs	r0, #10
  40086e:	4b3a      	ldr	r3, [pc, #232]	; (400958 <init+0x100>)
  400870:	4798      	blx	r3
	pmc_enable_periph_clk(EBUT3_PIO_ID);
  400872:	200c      	movs	r0, #12
  400874:	4b38      	ldr	r3, [pc, #224]	; (400958 <init+0x100>)
  400876:	4798      	blx	r3
	// configura botoes do oled como input
	pio_set_input(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_DEFAULT);
  400878:	2200      	movs	r2, #0
  40087a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40087e:	4837      	ldr	r0, [pc, #220]	; (40095c <init+0x104>)
  400880:	4b37      	ldr	r3, [pc, #220]	; (400960 <init+0x108>)
  400882:	4798      	blx	r3
	pio_pull_up(EBUT1_PIO,EBUT1_PIO_IDX_MASK,PIO_PULLUP);
  400884:	2201      	movs	r2, #1
  400886:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40088a:	4834      	ldr	r0, [pc, #208]	; (40095c <init+0x104>)
  40088c:	4b35      	ldr	r3, [pc, #212]	; (400964 <init+0x10c>)
  40088e:	4798      	blx	r3
	pio_set_input(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_DEFAULT);
  400890:	2200      	movs	r2, #0
  400892:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400896:	4834      	ldr	r0, [pc, #208]	; (400968 <init+0x110>)
  400898:	4b31      	ldr	r3, [pc, #196]	; (400960 <init+0x108>)
  40089a:	4798      	blx	r3
	pio_pull_up(EBUT2_PIO,EBUT2_PIO_IDX_MASK,PIO_PULLUP);
  40089c:	2201      	movs	r2, #1
  40089e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4008a2:	4831      	ldr	r0, [pc, #196]	; (400968 <init+0x110>)
  4008a4:	4b2f      	ldr	r3, [pc, #188]	; (400964 <init+0x10c>)
  4008a6:	4798      	blx	r3
	pio_set_input(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_DEFAULT);
  4008a8:	2200      	movs	r2, #0
  4008aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4008ae:	482f      	ldr	r0, [pc, #188]	; (40096c <init+0x114>)
  4008b0:	4b2b      	ldr	r3, [pc, #172]	; (400960 <init+0x108>)
  4008b2:	4798      	blx	r3
	pio_pull_up(EBUT3_PIO,EBUT3_PIO_IDX_MASK,PIO_PULLUP);
  4008b4:	2201      	movs	r2, #1
  4008b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4008ba:	482c      	ldr	r0, [pc, #176]	; (40096c <init+0x114>)
  4008bc:	4b29      	ldr	r3, [pc, #164]	; (400964 <init+0x10c>)
  4008be:	4798      	blx	r3
	
	// Ativa interrup??o
	pio_enable_interrupt(EBUT1_PIO, EBUT1_PIO_IDX_MASK);
  4008c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4008c4:	4825      	ldr	r0, [pc, #148]	; (40095c <init+0x104>)
  4008c6:	4b2a      	ldr	r3, [pc, #168]	; (400970 <init+0x118>)
  4008c8:	4798      	blx	r3
	pio_enable_interrupt(EBUT2_PIO, EBUT2_PIO_IDX_MASK);
  4008ca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4008ce:	4826      	ldr	r0, [pc, #152]	; (400968 <init+0x110>)
  4008d0:	4b27      	ldr	r3, [pc, #156]	; (400970 <init+0x118>)
  4008d2:	4798      	blx	r3
	pio_enable_interrupt(EBUT3_PIO, EBUT3_PIO_IDX_MASK);
  4008d4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4008d8:	4824      	ldr	r0, [pc, #144]	; (40096c <init+0x114>)
  4008da:	4b25      	ldr	r3, [pc, #148]	; (400970 <init+0x118>)
  4008dc:	4798      	blx	r3

	// Configura NVIC para receber interrupcoes do PIO do botao
	
	NVIC_EnableIRQ(EBUT1_PIO_ID);
  4008de:	2010      	movs	r0, #16
  4008e0:	4b24      	ldr	r3, [pc, #144]	; (400974 <init+0x11c>)
  4008e2:	4798      	blx	r3
	NVIC_SetPriority(EBUT1_PIO_ID, 0); // Prioridade 4
  4008e4:	2100      	movs	r1, #0
  4008e6:	2010      	movs	r0, #16
  4008e8:	4b23      	ldr	r3, [pc, #140]	; (400978 <init+0x120>)
  4008ea:	4798      	blx	r3
	NVIC_EnableIRQ(EBUT2_PIO_ID);
  4008ec:	200a      	movs	r0, #10
  4008ee:	4b21      	ldr	r3, [pc, #132]	; (400974 <init+0x11c>)
  4008f0:	4798      	blx	r3
	NVIC_SetPriority(EBUT2_PIO_ID, 0); // Prioridade 4
  4008f2:	2100      	movs	r1, #0
  4008f4:	200a      	movs	r0, #10
  4008f6:	4b20      	ldr	r3, [pc, #128]	; (400978 <init+0x120>)
  4008f8:	4798      	blx	r3
	NVIC_EnableIRQ(EBUT3_PIO_ID);
  4008fa:	200c      	movs	r0, #12
  4008fc:	4b1d      	ldr	r3, [pc, #116]	; (400974 <init+0x11c>)
  4008fe:	4798      	blx	r3
	NVIC_SetPriority(EBUT3_PIO_ID, 0); // Prioridade 4
  400900:	2100      	movs	r1, #0
  400902:	200c      	movs	r0, #12
  400904:	4b1c      	ldr	r3, [pc, #112]	; (400978 <init+0x120>)
  400906:	4798      	blx	r3
	
	// Configura interrup??o no pino referente ao botao e associa
	// fun??o de callback caso uma interrup??o for gerada
	// a fun??o de callback ? a: but_callback()
	pio_handler_set(EBUT1_PIO,
  400908:	4b1c      	ldr	r3, [pc, #112]	; (40097c <init+0x124>)
  40090a:	9300      	str	r3, [sp, #0]
  40090c:	2350      	movs	r3, #80	; 0x50
  40090e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400912:	2110      	movs	r1, #16
  400914:	4811      	ldr	r0, [pc, #68]	; (40095c <init+0x104>)
  400916:	4c1a      	ldr	r4, [pc, #104]	; (400980 <init+0x128>)
  400918:	47a0      	blx	r4
					EBUT1_PIO_ID,
					EBUT1_PIO_IDX_MASK,
					PIO_IT_FALL_EDGE,
					wheel_callback);
	pio_handler_set(EBUT2_PIO,
  40091a:	4b1a      	ldr	r3, [pc, #104]	; (400984 <init+0x12c>)
  40091c:	9300      	str	r3, [sp, #0]
  40091e:	2350      	movs	r3, #80	; 0x50
  400920:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400924:	210a      	movs	r1, #10
  400926:	4810      	ldr	r0, [pc, #64]	; (400968 <init+0x110>)
  400928:	4c15      	ldr	r4, [pc, #84]	; (400980 <init+0x128>)
  40092a:	47a0      	blx	r4
					EBUT2_PIO_ID,
					EBUT2_PIO_IDX_MASK,
					PIO_IT_FALL_EDGE,
					but_m_freq_callback);
	pio_handler_set(EBUT3_PIO,
  40092c:	4b16      	ldr	r3, [pc, #88]	; (400988 <init+0x130>)
  40092e:	9300      	str	r3, [sp, #0]
  400930:	2350      	movs	r3, #80	; 0x50
  400932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400936:	210c      	movs	r1, #12
  400938:	480c      	ldr	r0, [pc, #48]	; (40096c <init+0x114>)
  40093a:	4c11      	ldr	r4, [pc, #68]	; (400980 <init+0x128>)
  40093c:	47a0      	blx	r4
					EBUT3_PIO_ID,
					EBUT3_PIO_IDX_MASK,
					PIO_IT_FALL_EDGE,
					but_stop_callback);
	
	WDT->WDT_MR = WDT_MR_WDDIS;
  40093e:	4b13      	ldr	r3, [pc, #76]	; (40098c <init+0x134>)
  400940:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400944:	605a      	str	r2, [r3, #4]
	
	
}
  400946:	bf00      	nop
  400948:	3704      	adds	r7, #4
  40094a:	46bd      	mov	sp, r7
  40094c:	bd90      	pop	{r4, r7, pc}
  40094e:	bf00      	nop
  400950:	0040277d 	.word	0x0040277d
  400954:	004022b9 	.word	0x004022b9
  400958:	004033a9 	.word	0x004033a9
  40095c:	400e1400 	.word	0x400e1400
  400960:	00402a5d 	.word	0x00402a5d
  400964:	00402905 	.word	0x00402905
  400968:	400e0e00 	.word	0x400e0e00
  40096c:	400e1200 	.word	0x400e1200
  400970:	00402c79 	.word	0x00402c79
  400974:	004006d9 	.word	0x004006d9
  400978:	00400775 	.word	0x00400775
  40097c:	00400811 	.word	0x00400811
  400980:	00402fcd 	.word	0x00402fcd
  400984:	00400829 	.word	0x00400829
  400988:	00400841 	.word	0x00400841
  40098c:	400e1850 	.word	0x400e1850

00400990 <configure_lcd>:

static void configure_lcd(void){
  400990:	b598      	push	{r3, r4, r7, lr}
  400992:	af00      	add	r7, sp, #0
	/* Initialize display parameter */
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  400994:	4b16      	ldr	r3, [pc, #88]	; (4009f0 <configure_lcd+0x60>)
  400996:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40099a:	601a      	str	r2, [r3, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  40099c:	4b14      	ldr	r3, [pc, #80]	; (4009f0 <configure_lcd+0x60>)
  40099e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4009a2:	605a      	str	r2, [r3, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  4009a4:	4b12      	ldr	r3, [pc, #72]	; (4009f0 <configure_lcd+0x60>)
  4009a6:	4a13      	ldr	r2, [pc, #76]	; (4009f4 <configure_lcd+0x64>)
  4009a8:	609a      	str	r2, [r3, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  4009aa:	4b11      	ldr	r3, [pc, #68]	; (4009f0 <configure_lcd+0x60>)
  4009ac:	4a11      	ldr	r2, [pc, #68]	; (4009f4 <configure_lcd+0x64>)
  4009ae:	60da      	str	r2, [r3, #12]

	/* Initialize LCD */
	ili9488_init(&g_ili9488_display_opt);
  4009b0:	480f      	ldr	r0, [pc, #60]	; (4009f0 <configure_lcd+0x60>)
  4009b2:	4b11      	ldr	r3, [pc, #68]	; (4009f8 <configure_lcd+0x68>)
  4009b4:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  4009b6:	f240 13df 	movw	r3, #479	; 0x1df
  4009ba:	f240 123f 	movw	r2, #319	; 0x13f
  4009be:	2100      	movs	r1, #0
  4009c0:	2000      	movs	r0, #0
  4009c2:	4c0e      	ldr	r4, [pc, #56]	; (4009fc <configure_lcd+0x6c>)
  4009c4:	47a0      	blx	r4
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  4009c6:	480e      	ldr	r0, [pc, #56]	; (400a00 <configure_lcd+0x70>)
  4009c8:	4b0e      	ldr	r3, [pc, #56]	; (400a04 <configure_lcd+0x74>)
  4009ca:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, 120-1);
  4009cc:	2377      	movs	r3, #119	; 0x77
  4009ce:	f240 123f 	movw	r2, #319	; 0x13f
  4009d2:	2100      	movs	r1, #0
  4009d4:	2000      	movs	r0, #0
  4009d6:	4c09      	ldr	r4, [pc, #36]	; (4009fc <configure_lcd+0x6c>)
  4009d8:	47a0      	blx	r4
	ili9488_draw_filled_rectangle(0, 360, ILI9488_LCD_WIDTH-1, 480-1);	
  4009da:	f240 13df 	movw	r3, #479	; 0x1df
  4009de:	f240 123f 	movw	r2, #319	; 0x13f
  4009e2:	f44f 71b4 	mov.w	r1, #360	; 0x168
  4009e6:	2000      	movs	r0, #0
  4009e8:	4c04      	ldr	r4, [pc, #16]	; (4009fc <configure_lcd+0x6c>)
  4009ea:	47a0      	blx	r4
}
  4009ec:	bf00      	nop
  4009ee:	bd98      	pop	{r3, r4, r7, pc}
  4009f0:	20400e64 	.word	0x20400e64
  4009f4:	00fcfcfc 	.word	0x00fcfcfc
  4009f8:	0040171d 	.word	0x0040171d
  4009fc:	004019bd 	.word	0x004019bd
  400a00:	00fc6044 	.word	0x00fc6044
  400a04:	00401891 	.word	0x00401891

00400a08 <RTC_init>:

void RTC_init(){
  400a08:	b590      	push	{r4, r7, lr}
  400a0a:	b083      	sub	sp, #12
  400a0c:	af02      	add	r7, sp, #8
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  400a0e:	2002      	movs	r0, #2
  400a10:	4b14      	ldr	r3, [pc, #80]	; (400a64 <RTC_init+0x5c>)
  400a12:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  400a14:	2100      	movs	r1, #0
  400a16:	4814      	ldr	r0, [pc, #80]	; (400a68 <RTC_init+0x60>)
  400a18:	4b14      	ldr	r3, [pc, #80]	; (400a6c <RTC_init+0x64>)
  400a1a:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  400a1c:	230c      	movs	r3, #12
  400a1e:	9300      	str	r3, [sp, #0]
  400a20:	2313      	movs	r3, #19
  400a22:	2203      	movs	r2, #3
  400a24:	f240 71e2 	movw	r1, #2018	; 0x7e2
  400a28:	480f      	ldr	r0, [pc, #60]	; (400a68 <RTC_init+0x60>)
  400a2a:	4c11      	ldr	r4, [pc, #68]	; (400a70 <RTC_init+0x68>)
  400a2c:	47a0      	blx	r4
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  400a2e:	2300      	movs	r3, #0
  400a30:	2200      	movs	r2, #0
  400a32:	2100      	movs	r1, #0
  400a34:	480c      	ldr	r0, [pc, #48]	; (400a68 <RTC_init+0x60>)
  400a36:	4c0f      	ldr	r4, [pc, #60]	; (400a74 <RTC_init+0x6c>)
  400a38:	47a0      	blx	r4

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(RTC_IRQn);
  400a3a:	2002      	movs	r0, #2
  400a3c:	4b0e      	ldr	r3, [pc, #56]	; (400a78 <RTC_init+0x70>)
  400a3e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTC_IRQn);
  400a40:	2002      	movs	r0, #2
  400a42:	4b0e      	ldr	r3, [pc, #56]	; (400a7c <RTC_init+0x74>)
  400a44:	4798      	blx	r3
	NVIC_SetPriority(RTC_IRQn, 0);
  400a46:	2100      	movs	r1, #0
  400a48:	2002      	movs	r0, #2
  400a4a:	4b0d      	ldr	r3, [pc, #52]	; (400a80 <RTC_init+0x78>)
  400a4c:	4798      	blx	r3
	NVIC_EnableIRQ(RTC_IRQn);
  400a4e:	2002      	movs	r0, #2
  400a50:	4b0c      	ldr	r3, [pc, #48]	; (400a84 <RTC_init+0x7c>)
  400a52:	4798      	blx	r3

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  400a54:	2102      	movs	r1, #2
  400a56:	4804      	ldr	r0, [pc, #16]	; (400a68 <RTC_init+0x60>)
  400a58:	4b0b      	ldr	r3, [pc, #44]	; (400a88 <RTC_init+0x80>)
  400a5a:	4798      	blx	r3

}
  400a5c:	bf00      	nop
  400a5e:	3704      	adds	r7, #4
  400a60:	46bd      	mov	sp, r7
  400a62:	bd90      	pop	{r4, r7, pc}
  400a64:	004033a9 	.word	0x004033a9
  400a68:	400e1860 	.word	0x400e1860
  400a6c:	004001d5 	.word	0x004001d5
  400a70:	004003f5 	.word	0x004003f5
  400a74:	004002ed 	.word	0x004002ed
  400a78:	0040070d 	.word	0x0040070d
  400a7c:	00400741 	.word	0x00400741
  400a80:	00400775 	.word	0x00400775
  400a84:	004006d9 	.word	0x004006d9
  400a88:	0040020b 	.word	0x0040020b

00400a8c <RTT_Handler>:
void pin_toggle(Pio *pio, uint32_t mask);
void io_init(void);
static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses);

void RTT_Handler(void)
{
  400a8c:	b580      	push	{r7, lr}
  400a8e:	b082      	sub	sp, #8
  400a90:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT);
  400a92:	4808      	ldr	r0, [pc, #32]	; (400ab4 <RTT_Handler+0x28>)
  400a94:	4b08      	ldr	r3, [pc, #32]	; (400ab8 <RTT_Handler+0x2c>)
  400a96:	4798      	blx	r3
  400a98:	6078      	str	r0, [r7, #4]

	/* IRQ due to Time has changed */
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {  }

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  400a9a:	687b      	ldr	r3, [r7, #4]
  400a9c:	f003 0301 	and.w	r3, r3, #1
  400aa0:	2b00      	cmp	r3, #0
  400aa2:	d002      	beq.n	400aaa <RTT_Handler+0x1e>
		f_rtt_alarme = true;                  // flag RTT alarme
  400aa4:	4b05      	ldr	r3, [pc, #20]	; (400abc <RTT_Handler+0x30>)
  400aa6:	2201      	movs	r2, #1
  400aa8:	701a      	strb	r2, [r3, #0]
	}
}
  400aaa:	bf00      	nop
  400aac:	3708      	adds	r7, #8
  400aae:	46bd      	mov	sp, r7
  400ab0:	bd80      	pop	{r7, pc}
  400ab2:	bf00      	nop
  400ab4:	400e1830 	.word	0x400e1830
  400ab8:	00400663 	.word	0x00400663
  400abc:	204009d8 	.word	0x204009d8

00400ac0 <RTT_init>:
static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses)
{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	b084      	sub	sp, #16
  400ac4:	af00      	add	r7, sp, #0
  400ac6:	4603      	mov	r3, r0
  400ac8:	6039      	str	r1, [r7, #0]
  400aca:	80fb      	strh	r3, [r7, #6]
	uint32_t ul_previous_time;

	/* Configure RTT for a 1 second tick interrupt */
	rtt_sel_source(RTT, false);
  400acc:	2100      	movs	r1, #0
  400ace:	4818      	ldr	r0, [pc, #96]	; (400b30 <RTT_init+0x70>)
  400ad0:	4b18      	ldr	r3, [pc, #96]	; (400b34 <RTT_init+0x74>)
  400ad2:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  400ad4:	88fb      	ldrh	r3, [r7, #6]
  400ad6:	4619      	mov	r1, r3
  400ad8:	4815      	ldr	r0, [pc, #84]	; (400b30 <RTT_init+0x70>)
  400ada:	4b17      	ldr	r3, [pc, #92]	; (400b38 <RTT_init+0x78>)
  400adc:	4798      	blx	r3
	
	ul_previous_time = rtt_read_timer_value(RTT);
  400ade:	4814      	ldr	r0, [pc, #80]	; (400b30 <RTT_init+0x70>)
  400ae0:	4b16      	ldr	r3, [pc, #88]	; (400b3c <RTT_init+0x7c>)
  400ae2:	4798      	blx	r3
  400ae4:	60f8      	str	r0, [r7, #12]
	while (ul_previous_time == rtt_read_timer_value(RTT));
  400ae6:	bf00      	nop
  400ae8:	4811      	ldr	r0, [pc, #68]	; (400b30 <RTT_init+0x70>)
  400aea:	4b14      	ldr	r3, [pc, #80]	; (400b3c <RTT_init+0x7c>)
  400aec:	4798      	blx	r3
  400aee:	4602      	mov	r2, r0
  400af0:	68fb      	ldr	r3, [r7, #12]
  400af2:	429a      	cmp	r2, r3
  400af4:	d0f8      	beq.n	400ae8 <RTT_init+0x28>
	
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  400af6:	683a      	ldr	r2, [r7, #0]
  400af8:	68fb      	ldr	r3, [r7, #12]
  400afa:	4413      	add	r3, r2
  400afc:	4619      	mov	r1, r3
  400afe:	480c      	ldr	r0, [pc, #48]	; (400b30 <RTT_init+0x70>)
  400b00:	4b0f      	ldr	r3, [pc, #60]	; (400b40 <RTT_init+0x80>)
  400b02:	4798      	blx	r3

	/* Enable RTT interrupt */
	NVIC_DisableIRQ(RTT_IRQn);
  400b04:	2003      	movs	r0, #3
  400b06:	4b0f      	ldr	r3, [pc, #60]	; (400b44 <RTT_init+0x84>)
  400b08:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
  400b0a:	2003      	movs	r0, #3
  400b0c:	4b0e      	ldr	r3, [pc, #56]	; (400b48 <RTT_init+0x88>)
  400b0e:	4798      	blx	r3
	NVIC_SetPriority(RTT_IRQn, 0);
  400b10:	2100      	movs	r1, #0
  400b12:	2003      	movs	r0, #3
  400b14:	4b0d      	ldr	r3, [pc, #52]	; (400b4c <RTT_init+0x8c>)
  400b16:	4798      	blx	r3
	NVIC_EnableIRQ(RTT_IRQn);
  400b18:	2003      	movs	r0, #3
  400b1a:	4b0d      	ldr	r3, [pc, #52]	; (400b50 <RTT_init+0x90>)
  400b1c:	4798      	blx	r3
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400b22:	4803      	ldr	r0, [pc, #12]	; (400b30 <RTT_init+0x70>)
  400b24:	4b0b      	ldr	r3, [pc, #44]	; (400b54 <RTT_init+0x94>)
  400b26:	4798      	blx	r3
}
  400b28:	bf00      	nop
  400b2a:	3710      	adds	r7, #16
  400b2c:	46bd      	mov	sp, r7
  400b2e:	bd80      	pop	{r7, pc}
  400b30:	400e1830 	.word	0x400e1830
  400b34:	00400565 	.word	0x00400565
  400b38:	00400535 	.word	0x00400535
  400b3c:	00400635 	.word	0x00400635
  400b40:	0040067d 	.word	0x0040067d
  400b44:	0040070d 	.word	0x0040070d
  400b48:	00400741 	.word	0x00400741
  400b4c:	00400775 	.word	0x00400775
  400b50:	004006d9 	.word	0x004006d9
  400b54:	004005bd 	.word	0x004005bd

00400b58 <calc_Vel>:

int calc_Vel(int N,double dT){
  400b58:	b590      	push	{r4, r7, lr}
  400b5a:	b085      	sub	sp, #20
  400b5c:	af00      	add	r7, sp, #0
  400b5e:	60f8      	str	r0, [r7, #12]
  400b60:	e9c7 2300 	strd	r2, r3, [r7]
	return 3.6*2*3.14*0.325*N/dT;
  400b64:	4b10      	ldr	r3, [pc, #64]	; (400ba8 <calc_Vel+0x50>)
  400b66:	68f8      	ldr	r0, [r7, #12]
  400b68:	4798      	blx	r3
  400b6a:	4c10      	ldr	r4, [pc, #64]	; (400bac <calc_Vel+0x54>)
  400b6c:	a30c      	add	r3, pc, #48	; (adr r3, 400ba0 <calc_Vel+0x48>)
  400b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b72:	47a0      	blx	r4
  400b74:	4603      	mov	r3, r0
  400b76:	460c      	mov	r4, r1
  400b78:	4618      	mov	r0, r3
  400b7a:	4621      	mov	r1, r4
  400b7c:	4c0c      	ldr	r4, [pc, #48]	; (400bb0 <calc_Vel+0x58>)
  400b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
  400b82:	47a0      	blx	r4
  400b84:	4603      	mov	r3, r0
  400b86:	460c      	mov	r4, r1
  400b88:	4619      	mov	r1, r3
  400b8a:	4622      	mov	r2, r4
  400b8c:	4b09      	ldr	r3, [pc, #36]	; (400bb4 <calc_Vel+0x5c>)
  400b8e:	4608      	mov	r0, r1
  400b90:	4611      	mov	r1, r2
  400b92:	4798      	blx	r3
  400b94:	4603      	mov	r3, r0
}
  400b96:	4618      	mov	r0, r3
  400b98:	3714      	adds	r7, #20
  400b9a:	46bd      	mov	sp, r7
  400b9c:	bd90      	pop	{r4, r7, pc}
  400b9e:	bf00      	nop
  400ba0:	41205bc1 	.word	0x41205bc1
  400ba4:	401d63f1 	.word	0x401d63f1
  400ba8:	00403e81 	.word	0x00403e81
  400bac:	00403f4d 	.word	0x00403f4d
  400bb0:	004041a1 	.word	0x004041a1
  400bb4:	00404371 	.word	0x00404371

00400bb8 <calc_dist>:
int calc_dist(int N){
  400bb8:	b590      	push	{r4, r7, lr}
  400bba:	b083      	sub	sp, #12
  400bbc:	af00      	add	r7, sp, #0
  400bbe:	6078      	str	r0, [r7, #4]
	return 2*3.14*0.325*N;
  400bc0:	4b0d      	ldr	r3, [pc, #52]	; (400bf8 <calc_dist+0x40>)
  400bc2:	6878      	ldr	r0, [r7, #4]
  400bc4:	4798      	blx	r3
  400bc6:	4c0d      	ldr	r4, [pc, #52]	; (400bfc <calc_dist+0x44>)
  400bc8:	a309      	add	r3, pc, #36	; (adr r3, 400bf0 <calc_dist+0x38>)
  400bca:	e9d3 2300 	ldrd	r2, r3, [r3]
  400bce:	47a0      	blx	r4
  400bd0:	4603      	mov	r3, r0
  400bd2:	460c      	mov	r4, r1
  400bd4:	4619      	mov	r1, r3
  400bd6:	4622      	mov	r2, r4
  400bd8:	4b09      	ldr	r3, [pc, #36]	; (400c00 <calc_dist+0x48>)
  400bda:	4608      	mov	r0, r1
  400bdc:	4611      	mov	r1, r2
  400bde:	4798      	blx	r3
  400be0:	4603      	mov	r3, r0
}
  400be2:	4618      	mov	r0, r3
  400be4:	370c      	adds	r7, #12
  400be6:	46bd      	mov	sp, r7
  400be8:	bd90      	pop	{r4, r7, pc}
  400bea:	bf00      	nop
  400bec:	f3af 8000 	nop.w
  400bf0:	ced91688 	.word	0xced91688
  400bf4:	400053f7 	.word	0x400053f7
  400bf8:	00403e81 	.word	0x00403e81
  400bfc:	00403f4d 	.word	0x00403f4d
  400c00:	00404371 	.word	0x00404371

00400c04 <clear_LCD>:

void clear_LCD(int a, int b){
  400c04:	b590      	push	{r4, r7, lr}
  400c06:	b083      	sub	sp, #12
  400c08:	af00      	add	r7, sp, #0
  400c0a:	6078      	str	r0, [r7, #4]
  400c0c:	6039      	str	r1, [r7, #0]
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  400c0e:	4808      	ldr	r0, [pc, #32]	; (400c30 <clear_LCD+0x2c>)
  400c10:	4b08      	ldr	r3, [pc, #32]	; (400c34 <clear_LCD+0x30>)
  400c12:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, a, ILI9488_LCD_WIDTH-1, b);
  400c14:	6879      	ldr	r1, [r7, #4]
  400c16:	683b      	ldr	r3, [r7, #0]
  400c18:	f240 123f 	movw	r2, #319	; 0x13f
  400c1c:	2000      	movs	r0, #0
  400c1e:	4c06      	ldr	r4, [pc, #24]	; (400c38 <clear_LCD+0x34>)
  400c20:	47a0      	blx	r4
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  400c22:	2000      	movs	r0, #0
  400c24:	4b03      	ldr	r3, [pc, #12]	; (400c34 <clear_LCD+0x30>)
  400c26:	4798      	blx	r3
}
  400c28:	bf00      	nop
  400c2a:	370c      	adds	r7, #12
  400c2c:	46bd      	mov	sp, r7
  400c2e:	bd90      	pop	{r4, r7, pc}
  400c30:	00fcfcfc 	.word	0x00fcfcfc
  400c34:	00401891 	.word	0x00401891
  400c38:	004019bd 	.word	0x004019bd

00400c3c <main>:
int main(void){
  400c3c:	b590      	push	{r4, r7, lr}
  400c3e:	b0cb      	sub	sp, #300	; 0x12c
  400c40:	af02      	add	r7, sp, #8
	// array para escrita no LCD
	uint8_t stingLCD[256];
	
	/* Initialize the board. */
	ioport_init();
  400c42:	4b68      	ldr	r3, [pc, #416]	; (400de4 <main+0x1a8>)
  400c44:	4798      	blx	r3
	init();
  400c46:	4b68      	ldr	r3, [pc, #416]	; (400de8 <main+0x1ac>)
  400c48:	4798      	blx	r3
	RTC_init();
  400c4a:	4b68      	ldr	r3, [pc, #416]	; (400dec <main+0x1b0>)
  400c4c:	4798      	blx	r3
    /* Inicializa e configura o LCD */
	configure_lcd();
  400c4e:	4b68      	ldr	r3, [pc, #416]	; (400df0 <main+0x1b4>)
  400c50:	4798      	blx	r3
	clear_LCD(300,316);
  400c52:	f44f 719e 	mov.w	r1, #316	; 0x13c
  400c56:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400c5a:	4b66      	ldr	r3, [pc, #408]	; (400df4 <main+0x1b8>)
  400c5c:	4798      	blx	r3
	
	int x = 0;
  400c5e:	2300      	movs	r3, #0
  400c60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	int x_tot = 0;
  400c64:	2300      	movs	r3, #0
  400c66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	Bool flag_time = true;
  400c6a:	2301      	movs	r3, #1
  400c6c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	Bool flag_dist = false;
  400c70:	2300      	movs	r3, #0
  400c72:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
	Bool flag_vel = false;
  400c76:	2300      	movs	r3, #0
  400c78:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
	
	rtc_get_time(RTC, &hour, &minu, &seg);
  400c7c:	4b5e      	ldr	r3, [pc, #376]	; (400df8 <main+0x1bc>)
  400c7e:	4a5f      	ldr	r2, [pc, #380]	; (400dfc <main+0x1c0>)
  400c80:	495f      	ldr	r1, [pc, #380]	; (400e00 <main+0x1c4>)
  400c82:	4860      	ldr	r0, [pc, #384]	; (400e04 <main+0x1c8>)
  400c84:	4c60      	ldr	r4, [pc, #384]	; (400e08 <main+0x1cc>)
  400c86:	47a0      	blx	r4
	int t_time = seg;
  400c88:	4b5b      	ldr	r3, [pc, #364]	; (400df8 <main+0x1bc>)
  400c8a:	681b      	ldr	r3, [r3, #0]
  400c8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	
    f_rtt_alarme = true;
  400c90:	4b5e      	ldr	r3, [pc, #376]	; (400e0c <main+0x1d0>)
  400c92:	2201      	movs	r2, #1
  400c94:	701a      	strb	r2, [r3, #0]
	
	int n_alarm = 0;
  400c96:	2300      	movs	r3, #0
  400c98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	while (1) {
		rtc_get_time(RTC, &hour, &minu, &seg);
  400c9c:	4b56      	ldr	r3, [pc, #344]	; (400df8 <main+0x1bc>)
  400c9e:	4a57      	ldr	r2, [pc, #348]	; (400dfc <main+0x1c0>)
  400ca0:	4957      	ldr	r1, [pc, #348]	; (400e00 <main+0x1c4>)
  400ca2:	4858      	ldr	r0, [pc, #352]	; (400e04 <main+0x1c8>)
  400ca4:	4c58      	ldr	r4, [pc, #352]	; (400e08 <main+0x1cc>)
  400ca6:	47a0      	blx	r4
		
		if(f_rtt_alarme){
  400ca8:	4b58      	ldr	r3, [pc, #352]	; (400e0c <main+0x1d0>)
  400caa:	781b      	ldrb	r3, [r3, #0]
  400cac:	b2db      	uxtb	r3, r3
  400cae:	2b00      	cmp	r3, #0
  400cb0:	d05d      	beq.n	400d6e <main+0x132>
			 uint16_t pllPreScale = (int) (((float) 32768) / 4);
  400cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400cb6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
			 uint32_t irqRTTvalue  = 4;
  400cba:	2304      	movs	r3, #4
  400cbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			 
			 // reinicia RTT para gerar um novo IRQ
			 RTT_init(pllPreScale, irqRTTvalue);
  400cc0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
  400cc4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
  400cc8:	4618      	mov	r0, r3
  400cca:	4b51      	ldr	r3, [pc, #324]	; (400e10 <main+0x1d4>)
  400ccc:	4798      	blx	r3
			 f_rtt_alarme = false;
  400cce:	4b4f      	ldr	r3, [pc, #316]	; (400e0c <main+0x1d0>)
  400cd0:	2200      	movs	r2, #0
  400cd2:	701a      	strb	r2, [r3, #0]
			 n_alarm++;
  400cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  400cd8:	3301      	adds	r3, #1
  400cda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			 
			 clear_LCD(250,315);
  400cde:	f240 113b 	movw	r1, #315	; 0x13b
  400ce2:	20fa      	movs	r0, #250	; 0xfa
  400ce4:	4b43      	ldr	r3, [pc, #268]	; (400df4 <main+0x1b8>)
  400ce6:	4798      	blx	r3
		
			 sprintf(stingLCD, "Tempo Percorrido:%d :%d :%d", hour,minu,seg);
  400ce8:	4b45      	ldr	r3, [pc, #276]	; (400e00 <main+0x1c4>)
  400cea:	681a      	ldr	r2, [r3, #0]
  400cec:	4b43      	ldr	r3, [pc, #268]	; (400dfc <main+0x1c0>)
  400cee:	6819      	ldr	r1, [r3, #0]
  400cf0:	4b41      	ldr	r3, [pc, #260]	; (400df8 <main+0x1bc>)
  400cf2:	681b      	ldr	r3, [r3, #0]
  400cf4:	1d38      	adds	r0, r7, #4
  400cf6:	9300      	str	r3, [sp, #0]
  400cf8:	460b      	mov	r3, r1
  400cfa:	4946      	ldr	r1, [pc, #280]	; (400e14 <main+0x1d8>)
  400cfc:	4c46      	ldr	r4, [pc, #280]	; (400e18 <main+0x1dc>)
  400cfe:	47a0      	blx	r4
			 ili9488_draw_string(10, 300, stingLCD);
  400d00:	1d3b      	adds	r3, r7, #4
  400d02:	461a      	mov	r2, r3
  400d04:	f44f 7196 	mov.w	r1, #300	; 0x12c
  400d08:	200a      	movs	r0, #10
  400d0a:	4b44      	ldr	r3, [pc, #272]	; (400e1c <main+0x1e0>)
  400d0c:	4798      	blx	r3
			 
			 if(n_alarm%4==0){
  400d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
  400d12:	f003 0303 	and.w	r3, r3, #3
  400d16:	2b00      	cmp	r3, #0
  400d18:	d129      	bne.n	400d6e <main+0x132>
				clear_LCD(125,170);
  400d1a:	21aa      	movs	r1, #170	; 0xaa
  400d1c:	207d      	movs	r0, #125	; 0x7d
  400d1e:	4b35      	ldr	r3, [pc, #212]	; (400df4 <main+0x1b8>)
  400d20:	4798      	blx	r3
				sprintf(stingLCD,"Velocidade Media:%d km/h" , calc_Vel(x,4));
  400d22:	f04f 0200 	mov.w	r2, #0
  400d26:	4b3e      	ldr	r3, [pc, #248]	; (400e20 <main+0x1e4>)
  400d28:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
  400d2c:	493d      	ldr	r1, [pc, #244]	; (400e24 <main+0x1e8>)
  400d2e:	4788      	blx	r1
  400d30:	4602      	mov	r2, r0
  400d32:	1d3b      	adds	r3, r7, #4
  400d34:	493c      	ldr	r1, [pc, #240]	; (400e28 <main+0x1ec>)
  400d36:	4618      	mov	r0, r3
  400d38:	4b37      	ldr	r3, [pc, #220]	; (400e18 <main+0x1dc>)
  400d3a:	4798      	blx	r3
				ili9488_draw_string(10, 150, stingLCD);
  400d3c:	1d3b      	adds	r3, r7, #4
  400d3e:	461a      	mov	r2, r3
  400d40:	2196      	movs	r1, #150	; 0x96
  400d42:	200a      	movs	r0, #10
  400d44:	4b35      	ldr	r3, [pc, #212]	; (400e1c <main+0x1e0>)
  400d46:	4798      	blx	r3
				sprintf(stingLCD,"Dist. Percorrida:%d m" , calc_dist(x_tot));
  400d48:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
  400d4c:	4b37      	ldr	r3, [pc, #220]	; (400e2c <main+0x1f0>)
  400d4e:	4798      	blx	r3
  400d50:	4602      	mov	r2, r0
  400d52:	1d3b      	adds	r3, r7, #4
  400d54:	4936      	ldr	r1, [pc, #216]	; (400e30 <main+0x1f4>)
  400d56:	4618      	mov	r0, r3
  400d58:	4b2f      	ldr	r3, [pc, #188]	; (400e18 <main+0x1dc>)
  400d5a:	4798      	blx	r3
				ili9488_draw_string(5, 125, stingLCD);
  400d5c:	1d3b      	adds	r3, r7, #4
  400d5e:	461a      	mov	r2, r3
  400d60:	217d      	movs	r1, #125	; 0x7d
  400d62:	2005      	movs	r0, #5
  400d64:	4b2d      	ldr	r3, [pc, #180]	; (400e1c <main+0x1e0>)
  400d66:	4798      	blx	r3
				x=0;
  400d68:	2300      	movs	r3, #0
  400d6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			 }
		}
			
		if(but_m_freq){
  400d6e:	4b31      	ldr	r3, [pc, #196]	; (400e34 <main+0x1f8>)
  400d70:	781b      	ldrb	r3, [r3, #0]
  400d72:	b2db      	uxtb	r3, r3
  400d74:	2b00      	cmp	r3, #0
  400d76:	d020      	beq.n	400dba <main+0x17e>
			x++;
  400d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
  400d7c:	3301      	adds	r3, #1
  400d7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			x_tot+=x;
  400d82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
  400d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
  400d8a:	4413      	add	r3, r2
  400d8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			clear_LCD(200,230);
  400d90:	21e6      	movs	r1, #230	; 0xe6
  400d92:	20c8      	movs	r0, #200	; 0xc8
  400d94:	4b17      	ldr	r3, [pc, #92]	; (400df4 <main+0x1b8>)
  400d96:	4798      	blx	r3
			
			sprintf(stingLCD, "Rotacoes %d", x_tot);
  400d98:	1d3b      	adds	r3, r7, #4
  400d9a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
  400d9e:	4926      	ldr	r1, [pc, #152]	; (400e38 <main+0x1fc>)
  400da0:	4618      	mov	r0, r3
  400da2:	4b1d      	ldr	r3, [pc, #116]	; (400e18 <main+0x1dc>)
  400da4:	4798      	blx	r3
			ili9488_draw_string(100, 200, stingLCD);
  400da6:	1d3b      	adds	r3, r7, #4
  400da8:	461a      	mov	r2, r3
  400daa:	21c8      	movs	r1, #200	; 0xc8
  400dac:	2064      	movs	r0, #100	; 0x64
  400dae:	4b1b      	ldr	r3, [pc, #108]	; (400e1c <main+0x1e0>)
  400db0:	4798      	blx	r3
			
			but_m_freq = false;
  400db2:	4b20      	ldr	r3, [pc, #128]	; (400e34 <main+0x1f8>)
  400db4:	2200      	movs	r2, #0
  400db6:	701a      	strb	r2, [r3, #0]
  400db8:	e010      	b.n	400ddc <main+0x1a0>
		}
		else if(but_stop){
  400dba:	4b20      	ldr	r3, [pc, #128]	; (400e3c <main+0x200>)
  400dbc:	781b      	ldrb	r3, [r3, #0]
  400dbe:	b2db      	uxtb	r3, r3
  400dc0:	2b00      	cmp	r3, #0
  400dc2:	d003      	beq.n	400dcc <main+0x190>
			but_stop = false;
  400dc4:	4b1d      	ldr	r3, [pc, #116]	; (400e3c <main+0x200>)
  400dc6:	2200      	movs	r2, #0
  400dc8:	701a      	strb	r2, [r3, #0]
  400dca:	e007      	b.n	400ddc <main+0x1a0>
		}
		else if(wheel){
  400dcc:	4b1c      	ldr	r3, [pc, #112]	; (400e40 <main+0x204>)
  400dce:	781b      	ldrb	r3, [r3, #0]
  400dd0:	b2db      	uxtb	r3, r3
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d002      	beq.n	400ddc <main+0x1a0>
			wheel=false;
  400dd6:	4b1a      	ldr	r3, [pc, #104]	; (400e40 <main+0x204>)
  400dd8:	2200      	movs	r2, #0
  400dda:	701a      	strb	r2, [r3, #0]
		}
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400ddc:	2002      	movs	r0, #2
  400dde:	4b19      	ldr	r3, [pc, #100]	; (400e44 <main+0x208>)
  400de0:	4798      	blx	r3
		rtc_get_time(RTC, &hour, &minu, &seg);
  400de2:	e75b      	b.n	400c9c <main+0x60>
  400de4:	004007e5 	.word	0x004007e5
  400de8:	00400859 	.word	0x00400859
  400dec:	00400a09 	.word	0x00400a09
  400df0:	00400991 	.word	0x00400991
  400df4:	00400c05 	.word	0x00400c05
  400df8:	20400e54 	.word	0x20400e54
  400dfc:	20400e58 	.word	0x20400e58
  400e00:	20400e5c 	.word	0x20400e5c
  400e04:	400e1860 	.word	0x400e1860
  400e08:	00400227 	.word	0x00400227
  400e0c:	204009d8 	.word	0x204009d8
  400e10:	00400ac1 	.word	0x00400ac1
  400e14:	004084d0 	.word	0x004084d0
  400e18:	004044ad 	.word	0x004044ad
  400e1c:	00401b6d 	.word	0x00401b6d
  400e20:	40100000 	.word	0x40100000
  400e24:	00400b59 	.word	0x00400b59
  400e28:	004084ec 	.word	0x004084ec
  400e2c:	00400bb9 	.word	0x00400bb9
  400e30:	00408508 	.word	0x00408508
  400e34:	20400e74 	.word	0x20400e74
  400e38:	00408520 	.word	0x00408520
  400e3c:	20400e60 	.word	0x20400e60
  400e40:	20400e50 	.word	0x20400e50
  400e44:	00403495 	.word	0x00403495

00400e48 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400e48:	b480      	push	{r7}
  400e4a:	b083      	sub	sp, #12
  400e4c:	af00      	add	r7, sp, #0
  400e4e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400e50:	687b      	ldr	r3, [r7, #4]
  400e52:	2b07      	cmp	r3, #7
  400e54:	d825      	bhi.n	400ea2 <osc_get_rate+0x5a>
  400e56:	a201      	add	r2, pc, #4	; (adr r2, 400e5c <osc_get_rate+0x14>)
  400e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e5c:	00400e7d 	.word	0x00400e7d
  400e60:	00400e83 	.word	0x00400e83
  400e64:	00400e89 	.word	0x00400e89
  400e68:	00400e8f 	.word	0x00400e8f
  400e6c:	00400e93 	.word	0x00400e93
  400e70:	00400e97 	.word	0x00400e97
  400e74:	00400e9b 	.word	0x00400e9b
  400e78:	00400e9f 	.word	0x00400e9f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400e7c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400e80:	e010      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e86:	e00d      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400e8c:	e00a      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400e8e:	4b08      	ldr	r3, [pc, #32]	; (400eb0 <osc_get_rate+0x68>)
  400e90:	e008      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400e92:	4b08      	ldr	r3, [pc, #32]	; (400eb4 <osc_get_rate+0x6c>)
  400e94:	e006      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400e96:	4b08      	ldr	r3, [pc, #32]	; (400eb8 <osc_get_rate+0x70>)
  400e98:	e004      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400e9a:	4b07      	ldr	r3, [pc, #28]	; (400eb8 <osc_get_rate+0x70>)
  400e9c:	e002      	b.n	400ea4 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400e9e:	4b06      	ldr	r3, [pc, #24]	; (400eb8 <osc_get_rate+0x70>)
  400ea0:	e000      	b.n	400ea4 <osc_get_rate+0x5c>
	}

	return 0;
  400ea2:	2300      	movs	r3, #0
}
  400ea4:	4618      	mov	r0, r3
  400ea6:	370c      	adds	r7, #12
  400ea8:	46bd      	mov	sp, r7
  400eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400eae:	4770      	bx	lr
  400eb0:	003d0900 	.word	0x003d0900
  400eb4:	007a1200 	.word	0x007a1200
  400eb8:	00b71b00 	.word	0x00b71b00

00400ebc <sysclk_get_main_hz>:
{
  400ebc:	b580      	push	{r7, lr}
  400ebe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400ec0:	2006      	movs	r0, #6
  400ec2:	4b05      	ldr	r3, [pc, #20]	; (400ed8 <sysclk_get_main_hz+0x1c>)
  400ec4:	4798      	blx	r3
  400ec6:	4602      	mov	r2, r0
  400ec8:	4613      	mov	r3, r2
  400eca:	009b      	lsls	r3, r3, #2
  400ecc:	4413      	add	r3, r2
  400ece:	009a      	lsls	r2, r3, #2
  400ed0:	4413      	add	r3, r2
}
  400ed2:	4618      	mov	r0, r3
  400ed4:	bd80      	pop	{r7, pc}
  400ed6:	bf00      	nop
  400ed8:	00400e49 	.word	0x00400e49

00400edc <sysclk_get_peripheral_hz>:
{
  400edc:	b580      	push	{r7, lr}
  400ede:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400ee0:	4b02      	ldr	r3, [pc, #8]	; (400eec <sysclk_get_peripheral_hz+0x10>)
  400ee2:	4798      	blx	r3
  400ee4:	4603      	mov	r3, r0
  400ee6:	085b      	lsrs	r3, r3, #1
}
  400ee8:	4618      	mov	r0, r3
  400eea:	bd80      	pop	{r7, pc}
  400eec:	00400ebd 	.word	0x00400ebd

00400ef0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  400ef0:	b480      	push	{r7}
  400ef2:	b083      	sub	sp, #12
  400ef4:	af00      	add	r7, sp, #0
  400ef6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400ef8:	687b      	ldr	r3, [r7, #4]
  400efa:	2280      	movs	r2, #128	; 0x80
  400efc:	601a      	str	r2, [r3, #0]
}
  400efe:	bf00      	nop
  400f00:	370c      	adds	r7, #12
  400f02:	46bd      	mov	sp, r7
  400f04:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f08:	4770      	bx	lr

00400f0a <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  400f0a:	b480      	push	{r7}
  400f0c:	b083      	sub	sp, #12
  400f0e:	af00      	add	r7, sp, #0
  400f10:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400f12:	687b      	ldr	r3, [r7, #4]
  400f14:	685b      	ldr	r3, [r3, #4]
  400f16:	f043 0201 	orr.w	r2, r3, #1
  400f1a:	687b      	ldr	r3, [r7, #4]
  400f1c:	605a      	str	r2, [r3, #4]
}
  400f1e:	bf00      	nop
  400f20:	370c      	adds	r7, #12
  400f22:	46bd      	mov	sp, r7
  400f24:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f28:	4770      	bx	lr

00400f2a <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
  400f2a:	b480      	push	{r7}
  400f2c:	b083      	sub	sp, #12
  400f2e:	af00      	add	r7, sp, #0
  400f30:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400f32:	687b      	ldr	r3, [r7, #4]
  400f34:	685b      	ldr	r3, [r3, #4]
  400f36:	f023 0202 	bic.w	r2, r3, #2
  400f3a:	687b      	ldr	r3, [r7, #4]
  400f3c:	605a      	str	r2, [r3, #4]
}
  400f3e:	bf00      	nop
  400f40:	370c      	adds	r7, #12
  400f42:	46bd      	mov	sp, r7
  400f44:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f48:	4770      	bx	lr

00400f4a <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
  400f4a:	b480      	push	{r7}
  400f4c:	b083      	sub	sp, #12
  400f4e:	af00      	add	r7, sp, #0
  400f50:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400f52:	687b      	ldr	r3, [r7, #4]
  400f54:	685b      	ldr	r3, [r3, #4]
  400f56:	f023 0204 	bic.w	r2, r3, #4
  400f5a:	687b      	ldr	r3, [r7, #4]
  400f5c:	605a      	str	r2, [r3, #4]
}
  400f5e:	bf00      	nop
  400f60:	370c      	adds	r7, #12
  400f62:	46bd      	mov	sp, r7
  400f64:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f68:	4770      	bx	lr

00400f6a <spi_get_peripheral_select_decode_setting>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
  400f6a:	b480      	push	{r7}
  400f6c:	b083      	sub	sp, #12
  400f6e:	af00      	add	r7, sp, #0
  400f70:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400f72:	687b      	ldr	r3, [r7, #4]
  400f74:	685b      	ldr	r3, [r3, #4]
  400f76:	f003 0304 	and.w	r3, r3, #4
  400f7a:	2b00      	cmp	r3, #0
  400f7c:	d001      	beq.n	400f82 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
  400f7e:	2301      	movs	r3, #1
  400f80:	e000      	b.n	400f84 <spi_get_peripheral_select_decode_setting+0x1a>
	} else {
		return 0;
  400f82:	2300      	movs	r3, #0
	}
}
  400f84:	4618      	mov	r0, r3
  400f86:	370c      	adds	r7, #12
  400f88:	46bd      	mov	sp, r7
  400f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f8e:	4770      	bx	lr

00400f90 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400f90:	b480      	push	{r7}
  400f92:	b083      	sub	sp, #12
  400f94:	af00      	add	r7, sp, #0
  400f96:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400f98:	687b      	ldr	r3, [r7, #4]
  400f9a:	685b      	ldr	r3, [r3, #4]
  400f9c:	f043 0210 	orr.w	r2, r3, #16
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	605a      	str	r2, [r3, #4]
}
  400fa4:	bf00      	nop
  400fa6:	370c      	adds	r7, #12
  400fa8:	46bd      	mov	sp, r7
  400faa:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fae:	4770      	bx	lr

00400fb0 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400fb0:	b480      	push	{r7}
  400fb2:	b083      	sub	sp, #12
  400fb4:	af00      	add	r7, sp, #0
  400fb6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	685b      	ldr	r3, [r3, #4]
  400fbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	605a      	str	r2, [r3, #4]
}
  400fc4:	bf00      	nop
  400fc6:	370c      	adds	r7, #12
  400fc8:	46bd      	mov	sp, r7
  400fca:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fce:	4770      	bx	lr

00400fd0 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  400fd0:	b480      	push	{r7}
  400fd2:	b083      	sub	sp, #12
  400fd4:	af00      	add	r7, sp, #0
  400fd6:	6078      	str	r0, [r7, #4]
  400fd8:	460b      	mov	r3, r1
  400fda:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fdc:	887a      	ldrh	r2, [r7, #2]
  400fde:	687b      	ldr	r3, [r7, #4]
  400fe0:	60da      	str	r2, [r3, #12]
}
  400fe2:	bf00      	nop
  400fe4:	370c      	adds	r7, #12
  400fe6:	46bd      	mov	sp, r7
  400fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fec:	4770      	bx	lr

00400fee <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
  400fee:	b480      	push	{r7}
  400ff0:	b083      	sub	sp, #12
  400ff2:	af00      	add	r7, sp, #0
  400ff4:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400ff6:	687b      	ldr	r3, [r7, #4]
  400ff8:	689b      	ldr	r3, [r3, #8]
  400ffa:	b29b      	uxth	r3, r3
}
  400ffc:	4618      	mov	r0, r3
  400ffe:	370c      	adds	r7, #12
  401000:	46bd      	mov	sp, r7
  401002:	f85d 7b04 	ldr.w	r7, [sp], #4
  401006:	4770      	bx	lr

00401008 <spi_is_tx_ready>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
  401008:	b480      	push	{r7}
  40100a:	b083      	sub	sp, #12
  40100c:	af00      	add	r7, sp, #0
  40100e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  401010:	687b      	ldr	r3, [r7, #4]
  401012:	691b      	ldr	r3, [r3, #16]
  401014:	f003 0302 	and.w	r3, r3, #2
  401018:	2b00      	cmp	r3, #0
  40101a:	d001      	beq.n	401020 <spi_is_tx_ready+0x18>
		return 1;
  40101c:	2301      	movs	r3, #1
  40101e:	e000      	b.n	401022 <spi_is_tx_ready+0x1a>
	} else {
		return 0;
  401020:	2300      	movs	r3, #0
	}
}
  401022:	4618      	mov	r0, r3
  401024:	370c      	adds	r7, #12
  401026:	46bd      	mov	sp, r7
  401028:	f85d 7b04 	ldr.w	r7, [sp], #4
  40102c:	4770      	bx	lr

0040102e <spi_is_rx_ready>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
  40102e:	b480      	push	{r7}
  401030:	b083      	sub	sp, #12
  401032:	af00      	add	r7, sp, #0
  401034:	6078      	str	r0, [r7, #4]
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  401036:	687b      	ldr	r3, [r7, #4]
  401038:	691a      	ldr	r2, [r3, #16]
  40103a:	f240 2301 	movw	r3, #513	; 0x201
  40103e:	4013      	ands	r3, r2
  401040:	f240 2201 	movw	r2, #513	; 0x201
  401044:	4293      	cmp	r3, r2
  401046:	d101      	bne.n	40104c <spi_is_rx_ready+0x1e>
			== (SPI_SR_RDRF | SPI_SR_TXEMPTY)) {
		return 1;
  401048:	2301      	movs	r3, #1
  40104a:	e000      	b.n	40104e <spi_is_rx_ready+0x20>
	} else {
		return 0;
  40104c:	2300      	movs	r3, #0
	}
}
  40104e:	4618      	mov	r0, r3
  401050:	370c      	adds	r7, #12
  401052:	46bd      	mov	sp, r7
  401054:	f85d 7b04 	ldr.w	r7, [sp], #4
  401058:	4770      	bx	lr
	...

0040105c <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  40105c:	b580      	push	{r7, lr}
  40105e:	b082      	sub	sp, #8
  401060:	af00      	add	r7, sp, #0
  401062:	6078      	str	r0, [r7, #4]
  401064:	460b      	mov	r3, r1
  401066:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  401068:	78fb      	ldrb	r3, [r7, #3]
  40106a:	b29b      	uxth	r3, r3
  40106c:	4619      	mov	r1, r3
  40106e:	6878      	ldr	r0, [r7, #4]
  401070:	4b02      	ldr	r3, [pc, #8]	; (40107c <spi_write_single+0x20>)
  401072:	4798      	blx	r3
}
  401074:	bf00      	nop
  401076:	3708      	adds	r7, #8
  401078:	46bd      	mov	sp, r7
  40107a:	bd80      	pop	{r7, pc}
  40107c:	00400fd1 	.word	0x00400fd1

00401080 <spi_read_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
  401080:	b580      	push	{r7, lr}
  401082:	b082      	sub	sp, #8
  401084:	af00      	add	r7, sp, #0
  401086:	6078      	str	r0, [r7, #4]
  401088:	6039      	str	r1, [r7, #0]
	*data = (uint8_t)spi_get(p_spi);
  40108a:	6878      	ldr	r0, [r7, #4]
  40108c:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <spi_read_single+0x20>)
  40108e:	4798      	blx	r3
  401090:	4603      	mov	r3, r0
  401092:	b2da      	uxtb	r2, r3
  401094:	683b      	ldr	r3, [r7, #0]
  401096:	701a      	strb	r2, [r3, #0]
}
  401098:	bf00      	nop
  40109a:	3708      	adds	r7, #8
  40109c:	46bd      	mov	sp, r7
  40109e:	bd80      	pop	{r7, pc}
  4010a0:	00400fef 	.word	0x00400fef

004010a4 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	af00      	add	r7, sp, #0
  4010aa:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4010ac:	6878      	ldr	r0, [r7, #4]
  4010ae:	4b10      	ldr	r3, [pc, #64]	; (4010f0 <spi_master_init+0x4c>)
  4010b0:	4798      	blx	r3
#endif
	spi_reset(p_spi);
  4010b2:	6878      	ldr	r0, [r7, #4]
  4010b4:	4b0f      	ldr	r3, [pc, #60]	; (4010f4 <spi_master_init+0x50>)
  4010b6:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  4010b8:	6878      	ldr	r0, [r7, #4]
  4010ba:	4b0f      	ldr	r3, [pc, #60]	; (4010f8 <spi_master_init+0x54>)
  4010bc:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  4010be:	6878      	ldr	r0, [r7, #4]
  4010c0:	4b0e      	ldr	r3, [pc, #56]	; (4010fc <spi_master_init+0x58>)
  4010c2:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  4010c4:	6878      	ldr	r0, [r7, #4]
  4010c6:	4b0e      	ldr	r3, [pc, #56]	; (401100 <spi_master_init+0x5c>)
  4010c8:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4010ca:	2100      	movs	r1, #0
  4010cc:	6878      	ldr	r0, [r7, #4]
  4010ce:	4b0d      	ldr	r3, [pc, #52]	; (401104 <spi_master_init+0x60>)
  4010d0:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  4010d2:	6878      	ldr	r0, [r7, #4]
  4010d4:	4b0c      	ldr	r3, [pc, #48]	; (401108 <spi_master_init+0x64>)
  4010d6:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  4010d8:	6878      	ldr	r0, [r7, #4]
  4010da:	4b0c      	ldr	r3, [pc, #48]	; (40110c <spi_master_init+0x68>)
  4010dc:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4010de:	2100      	movs	r1, #0
  4010e0:	6878      	ldr	r0, [r7, #4]
  4010e2:	4b0b      	ldr	r3, [pc, #44]	; (401110 <spi_master_init+0x6c>)
  4010e4:	4798      	blx	r3
}
  4010e6:	bf00      	nop
  4010e8:	3708      	adds	r7, #8
  4010ea:	46bd      	mov	sp, r7
  4010ec:	bd80      	pop	{r7, pc}
  4010ee:	bf00      	nop
  4010f0:	00401c11 	.word	0x00401c11
  4010f4:	00400ef1 	.word	0x00400ef1
  4010f8:	00400f0b 	.word	0x00400f0b
  4010fc:	00400f91 	.word	0x00400f91
  401100:	00400fb1 	.word	0x00400fb1
  401104:	00401c4d 	.word	0x00401c4d
  401108:	00400f2b 	.word	0x00400f2b
  40110c:	00400f4b 	.word	0x00400f4b
  401110:	00401c81 	.word	0x00401c81

00401114 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  401114:	b590      	push	{r4, r7, lr}
  401116:	b087      	sub	sp, #28
  401118:	af00      	add	r7, sp, #0
  40111a:	60f8      	str	r0, [r7, #12]
  40111c:	60b9      	str	r1, [r7, #8]
  40111e:	603b      	str	r3, [r7, #0]
  401120:	4613      	mov	r3, r2
  401122:	71fb      	strb	r3, [r7, #7]
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  401124:	4b20      	ldr	r3, [pc, #128]	; (4011a8 <spi_master_setup_device+0x94>)
  401126:	4798      	blx	r3
  401128:	4603      	mov	r3, r0
  40112a:	4619      	mov	r1, r3
  40112c:	6838      	ldr	r0, [r7, #0]
  40112e:	4b1f      	ldr	r3, [pc, #124]	; (4011ac <spi_master_setup_device+0x98>)
  401130:	4798      	blx	r3
  401132:	4603      	mov	r3, r0
  401134:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  401136:	68bb      	ldr	r3, [r7, #8]
  401138:	6819      	ldr	r1, [r3, #0]
  40113a:	2300      	movs	r3, #0
  40113c:	2200      	movs	r2, #0
  40113e:	68f8      	ldr	r0, [r7, #12]
  401140:	4c1b      	ldr	r4, [pc, #108]	; (4011b0 <spi_master_setup_device+0x9c>)
  401142:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  401144:	68bb      	ldr	r3, [r7, #8]
  401146:	681b      	ldr	r3, [r3, #0]
  401148:	2208      	movs	r2, #8
  40114a:	4619      	mov	r1, r3
  40114c:	68f8      	ldr	r0, [r7, #12]
  40114e:	4b19      	ldr	r3, [pc, #100]	; (4011b4 <spi_master_setup_device+0xa0>)
  401150:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  401152:	68bb      	ldr	r3, [r7, #8]
  401154:	681b      	ldr	r3, [r3, #0]
  401156:	8afa      	ldrh	r2, [r7, #22]
  401158:	b2d2      	uxtb	r2, r2
  40115a:	4619      	mov	r1, r3
  40115c:	68f8      	ldr	r0, [r7, #12]
  40115e:	4b16      	ldr	r3, [pc, #88]	; (4011b8 <spi_master_setup_device+0xa4>)
  401160:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  401162:	68bb      	ldr	r3, [r7, #8]
  401164:	681b      	ldr	r3, [r3, #0]
  401166:	2208      	movs	r2, #8
  401168:	4619      	mov	r1, r3
  40116a:	68f8      	ldr	r0, [r7, #12]
  40116c:	4b13      	ldr	r3, [pc, #76]	; (4011bc <spi_master_setup_device+0xa8>)
  40116e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  401170:	68bb      	ldr	r3, [r7, #8]
  401172:	6819      	ldr	r1, [r3, #0]
  401174:	79fb      	ldrb	r3, [r7, #7]
  401176:	085b      	lsrs	r3, r3, #1
  401178:	b2db      	uxtb	r3, r3
  40117a:	461a      	mov	r2, r3
  40117c:	68f8      	ldr	r0, [r7, #12]
  40117e:	4b10      	ldr	r3, [pc, #64]	; (4011c0 <spi_master_setup_device+0xac>)
  401180:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  401182:	68bb      	ldr	r3, [r7, #8]
  401184:	6819      	ldr	r1, [r3, #0]
  401186:	79fb      	ldrb	r3, [r7, #7]
  401188:	f003 0301 	and.w	r3, r3, #1
  40118c:	2b00      	cmp	r3, #0
  40118e:	bf0c      	ite	eq
  401190:	2301      	moveq	r3, #1
  401192:	2300      	movne	r3, #0
  401194:	b2db      	uxtb	r3, r3
  401196:	461a      	mov	r2, r3
  401198:	68f8      	ldr	r0, [r7, #12]
  40119a:	4b0a      	ldr	r3, [pc, #40]	; (4011c4 <spi_master_setup_device+0xb0>)
  40119c:	4798      	blx	r3
}
  40119e:	bf00      	nop
  4011a0:	371c      	adds	r7, #28
  4011a2:	46bd      	mov	sp, r7
  4011a4:	bd90      	pop	{r4, r7, pc}
  4011a6:	bf00      	nop
  4011a8:	00400edd 	.word	0x00400edd
  4011ac:	00401ec1 	.word	0x00401ec1
  4011b0:	00401f5b 	.word	0x00401f5b
  4011b4:	00401e77 	.word	0x00401e77
  4011b8:	00401efd 	.word	0x00401efd
  4011bc:	00401dd1 	.word	0x00401dd1
  4011c0:	00401d31 	.word	0x00401d31
  4011c4:	00401d81 	.word	0x00401d81

004011c8 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4011c8:	b580      	push	{r7, lr}
  4011ca:	b082      	sub	sp, #8
  4011cc:	af00      	add	r7, sp, #0
  4011ce:	6078      	str	r0, [r7, #4]
  4011d0:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4011d2:	6878      	ldr	r0, [r7, #4]
  4011d4:	4b10      	ldr	r3, [pc, #64]	; (401218 <spi_select_device+0x50>)
  4011d6:	4798      	blx	r3
  4011d8:	4603      	mov	r3, r0
  4011da:	2b00      	cmp	r3, #0
  4011dc:	d00a      	beq.n	4011f4 <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4011de:	683b      	ldr	r3, [r7, #0]
  4011e0:	681b      	ldr	r3, [r3, #0]
  4011e2:	2b0f      	cmp	r3, #15
  4011e4:	d814      	bhi.n	401210 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4011e6:	683b      	ldr	r3, [r7, #0]
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	4619      	mov	r1, r3
  4011ec:	6878      	ldr	r0, [r7, #4]
  4011ee:	4b0b      	ldr	r3, [pc, #44]	; (40121c <spi_select_device+0x54>)
  4011f0:	4798      	blx	r3
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
		}
	}
}
  4011f2:	e00d      	b.n	401210 <spi_select_device+0x48>
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4011f4:	683b      	ldr	r3, [r7, #0]
  4011f6:	681b      	ldr	r3, [r3, #0]
  4011f8:	2b03      	cmp	r3, #3
  4011fa:	d809      	bhi.n	401210 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4011fc:	683b      	ldr	r3, [r7, #0]
  4011fe:	681b      	ldr	r3, [r3, #0]
  401200:	2201      	movs	r2, #1
  401202:	fa02 f303 	lsl.w	r3, r2, r3
  401206:	43db      	mvns	r3, r3
  401208:	4619      	mov	r1, r3
  40120a:	6878      	ldr	r0, [r7, #4]
  40120c:	4b03      	ldr	r3, [pc, #12]	; (40121c <spi_select_device+0x54>)
  40120e:	4798      	blx	r3
}
  401210:	bf00      	nop
  401212:	3708      	adds	r7, #8
  401214:	46bd      	mov	sp, r7
  401216:	bd80      	pop	{r7, pc}
  401218:	00400f6b 	.word	0x00400f6b
  40121c:	00401c4d 	.word	0x00401c4d

00401220 <spi_write_packet>:
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  401220:	b580      	push	{r7, lr}
  401222:	b088      	sub	sp, #32
  401224:	af00      	add	r7, sp, #0
  401226:	60f8      	str	r0, [r7, #12]
  401228:	60b9      	str	r1, [r7, #8]
  40122a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  40122c:	f643 2398 	movw	r3, #15000	; 0x3a98
  401230:	61fb      	str	r3, [r7, #28]
	uint32_t i = 0;
  401232:	2300      	movs	r3, #0
  401234:	61bb      	str	r3, [r7, #24]
	uint8_t val;

	while (len) {
  401236:	e021      	b.n	40127c <spi_write_packet+0x5c>
		timeout = SPI_TIMEOUT;
  401238:	f643 2398 	movw	r3, #15000	; 0x3a98
  40123c:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  40123e:	e007      	b.n	401250 <spi_write_packet+0x30>
			if (!timeout--) {
  401240:	69fb      	ldr	r3, [r7, #28]
  401242:	1e5a      	subs	r2, r3, #1
  401244:	61fa      	str	r2, [r7, #28]
  401246:	2b00      	cmp	r3, #0
  401248:	d102      	bne.n	401250 <spi_write_packet+0x30>
				return ERR_TIMEOUT;
  40124a:	f06f 0302 	mvn.w	r3, #2
  40124e:	e019      	b.n	401284 <spi_write_packet+0x64>
		while (!spi_is_tx_ready(p_spi)) {
  401250:	68f8      	ldr	r0, [r7, #12]
  401252:	4b0e      	ldr	r3, [pc, #56]	; (40128c <spi_write_packet+0x6c>)
  401254:	4798      	blx	r3
  401256:	4603      	mov	r3, r0
  401258:	2b00      	cmp	r3, #0
  40125a:	d0f1      	beq.n	401240 <spi_write_packet+0x20>
			}
		}
		val = data[i];
  40125c:	68ba      	ldr	r2, [r7, #8]
  40125e:	69bb      	ldr	r3, [r7, #24]
  401260:	4413      	add	r3, r2
  401262:	781b      	ldrb	r3, [r3, #0]
  401264:	75fb      	strb	r3, [r7, #23]
		spi_write_single(p_spi, val);
  401266:	7dfb      	ldrb	r3, [r7, #23]
  401268:	4619      	mov	r1, r3
  40126a:	68f8      	ldr	r0, [r7, #12]
  40126c:	4b08      	ldr	r3, [pc, #32]	; (401290 <spi_write_packet+0x70>)
  40126e:	4798      	blx	r3
		i++;
  401270:	69bb      	ldr	r3, [r7, #24]
  401272:	3301      	adds	r3, #1
  401274:	61bb      	str	r3, [r7, #24]
		len--;
  401276:	687b      	ldr	r3, [r7, #4]
  401278:	3b01      	subs	r3, #1
  40127a:	607b      	str	r3, [r7, #4]
	while (len) {
  40127c:	687b      	ldr	r3, [r7, #4]
  40127e:	2b00      	cmp	r3, #0
  401280:	d1da      	bne.n	401238 <spi_write_packet+0x18>
	}

	return STATUS_OK;
  401282:	2300      	movs	r3, #0
}
  401284:	4618      	mov	r0, r3
  401286:	3720      	adds	r7, #32
  401288:	46bd      	mov	sp, r7
  40128a:	bd80      	pop	{r7, pc}
  40128c:	00401009 	.word	0x00401009
  401290:	0040105d 	.word	0x0040105d

00401294 <spi_read_packet>:
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  401294:	b580      	push	{r7, lr}
  401296:	b088      	sub	sp, #32
  401298:	af00      	add	r7, sp, #0
  40129a:	60f8      	str	r0, [r7, #12]
  40129c:	60b9      	str	r1, [r7, #8]
  40129e:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
  4012a0:	f643 2398 	movw	r3, #15000	; 0x3a98
  4012a4:	61fb      	str	r3, [r7, #28]
	uint8_t val;
	uint32_t i = 0;
  4012a6:	2300      	movs	r3, #0
  4012a8:	61bb      	str	r3, [r7, #24]

	while (len) {
  4012aa:	e038      	b.n	40131e <spi_read_packet+0x8a>
		timeout = SPI_TIMEOUT;
  4012ac:	f643 2398 	movw	r3, #15000	; 0x3a98
  4012b0:	61fb      	str	r3, [r7, #28]
		while (!spi_is_tx_ready(p_spi)) {
  4012b2:	e007      	b.n	4012c4 <spi_read_packet+0x30>
			if (!timeout--) {
  4012b4:	69fb      	ldr	r3, [r7, #28]
  4012b6:	1e5a      	subs	r2, r3, #1
  4012b8:	61fa      	str	r2, [r7, #28]
  4012ba:	2b00      	cmp	r3, #0
  4012bc:	d102      	bne.n	4012c4 <spi_read_packet+0x30>
				return ERR_TIMEOUT;
  4012be:	f06f 0302 	mvn.w	r3, #2
  4012c2:	e030      	b.n	401326 <spi_read_packet+0x92>
		while (!spi_is_tx_ready(p_spi)) {
  4012c4:	68f8      	ldr	r0, [r7, #12]
  4012c6:	4b1a      	ldr	r3, [pc, #104]	; (401330 <spi_read_packet+0x9c>)
  4012c8:	4798      	blx	r3
  4012ca:	4603      	mov	r3, r0
  4012cc:	2b00      	cmp	r3, #0
  4012ce:	d0f1      	beq.n	4012b4 <spi_read_packet+0x20>
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
  4012d0:	21ff      	movs	r1, #255	; 0xff
  4012d2:	68f8      	ldr	r0, [r7, #12]
  4012d4:	4b17      	ldr	r3, [pc, #92]	; (401334 <spi_read_packet+0xa0>)
  4012d6:	4798      	blx	r3

		timeout = SPI_TIMEOUT;
  4012d8:	f643 2398 	movw	r3, #15000	; 0x3a98
  4012dc:	61fb      	str	r3, [r7, #28]
		while (!spi_is_rx_ready(p_spi)) {
  4012de:	e007      	b.n	4012f0 <spi_read_packet+0x5c>
			if (!timeout--) {
  4012e0:	69fb      	ldr	r3, [r7, #28]
  4012e2:	1e5a      	subs	r2, r3, #1
  4012e4:	61fa      	str	r2, [r7, #28]
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	d102      	bne.n	4012f0 <spi_read_packet+0x5c>
				return ERR_TIMEOUT;
  4012ea:	f06f 0302 	mvn.w	r3, #2
  4012ee:	e01a      	b.n	401326 <spi_read_packet+0x92>
		while (!spi_is_rx_ready(p_spi)) {
  4012f0:	68f8      	ldr	r0, [r7, #12]
  4012f2:	4b11      	ldr	r3, [pc, #68]	; (401338 <spi_read_packet+0xa4>)
  4012f4:	4798      	blx	r3
  4012f6:	4603      	mov	r3, r0
  4012f8:	2b00      	cmp	r3, #0
  4012fa:	d0f1      	beq.n	4012e0 <spi_read_packet+0x4c>
			}
		}
		spi_read_single(p_spi, &val);
  4012fc:	f107 0317 	add.w	r3, r7, #23
  401300:	4619      	mov	r1, r3
  401302:	68f8      	ldr	r0, [r7, #12]
  401304:	4b0d      	ldr	r3, [pc, #52]	; (40133c <spi_read_packet+0xa8>)
  401306:	4798      	blx	r3

		data[i] = val;
  401308:	68ba      	ldr	r2, [r7, #8]
  40130a:	69bb      	ldr	r3, [r7, #24]
  40130c:	4413      	add	r3, r2
  40130e:	7dfa      	ldrb	r2, [r7, #23]
  401310:	701a      	strb	r2, [r3, #0]
		i++;
  401312:	69bb      	ldr	r3, [r7, #24]
  401314:	3301      	adds	r3, #1
  401316:	61bb      	str	r3, [r7, #24]
		len--;
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	3b01      	subs	r3, #1
  40131c:	607b      	str	r3, [r7, #4]
	while (len) {
  40131e:	687b      	ldr	r3, [r7, #4]
  401320:	2b00      	cmp	r3, #0
  401322:	d1c3      	bne.n	4012ac <spi_read_packet+0x18>
	}

	return STATUS_OK;
  401324:	2300      	movs	r3, #0
}
  401326:	4618      	mov	r0, r3
  401328:	3720      	adds	r7, #32
  40132a:	46bd      	mov	sp, r7
  40132c:	bd80      	pop	{r7, pc}
  40132e:	bf00      	nop
  401330:	00401009 	.word	0x00401009
  401334:	0040105d 	.word	0x0040105d
  401338:	0040102f 	.word	0x0040102f
  40133c:	00401081 	.word	0x00401081

00401340 <spi_enable>:
{
  401340:	b480      	push	{r7}
  401342:	b083      	sub	sp, #12
  401344:	af00      	add	r7, sp, #0
  401346:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	2201      	movs	r2, #1
  40134c:	601a      	str	r2, [r3, #0]
}
  40134e:	bf00      	nop
  401350:	370c      	adds	r7, #12
  401352:	46bd      	mov	sp, r7
  401354:	f85d 7b04 	ldr.w	r7, [sp], #4
  401358:	4770      	bx	lr

0040135a <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
  40135a:	b480      	push	{r7}
  40135c:	b083      	sub	sp, #12
  40135e:	af00      	add	r7, sp, #0
  401360:	6078      	str	r0, [r7, #4]
  401362:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
  401364:	687b      	ldr	r3, [r7, #4]
  401366:	683a      	ldr	r2, [r7, #0]
  401368:	615a      	str	r2, [r3, #20]
}
  40136a:	bf00      	nop
  40136c:	370c      	adds	r7, #12
  40136e:	46bd      	mov	sp, r7
  401370:	f85d 7b04 	ldr.w	r7, [sp], #4
  401374:	4770      	bx	lr
	...

00401378 <ili9488_write_ram_prepare>:
#ifdef ILI9488_SPIMODE
/**
 * \brief Prepare to write GRAM data.
 */
static void ili9488_write_ram_prepare(void)
{
  401378:	b590      	push	{r4, r7, lr}
  40137a:	b083      	sub	sp, #12
  40137c:	af00      	add	r7, sp, #0
	volatile uint32_t i;
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  40137e:	2006      	movs	r0, #6
  401380:	4b0a      	ldr	r3, [pc, #40]	; (4013ac <ili9488_write_ram_prepare+0x34>)
  401382:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  401384:	2300      	movs	r3, #0
  401386:	2203      	movs	r2, #3
  401388:	212c      	movs	r1, #44	; 0x2c
  40138a:	4809      	ldr	r0, [pc, #36]	; (4013b0 <ili9488_write_ram_prepare+0x38>)
  40138c:	4c09      	ldr	r4, [pc, #36]	; (4013b4 <ili9488_write_ram_prepare+0x3c>)
  40138e:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  401390:	2300      	movs	r3, #0
  401392:	607b      	str	r3, [r7, #4]
  401394:	e002      	b.n	40139c <ili9488_write_ram_prepare+0x24>
  401396:	687b      	ldr	r3, [r7, #4]
  401398:	3301      	adds	r3, #1
  40139a:	607b      	str	r3, [r7, #4]
  40139c:	687b      	ldr	r3, [r7, #4]
  40139e:	2bfe      	cmp	r3, #254	; 0xfe
  4013a0:	d9f9      	bls.n	401396 <ili9488_write_ram_prepare+0x1e>
}
  4013a2:	bf00      	nop
  4013a4:	370c      	adds	r7, #12
  4013a6:	46bd      	mov	sp, r7
  4013a8:	bd90      	pop	{r4, r7, pc}
  4013aa:	bf00      	nop
  4013ac:	00402d11 	.word	0x00402d11
  4013b0:	40008000 	.word	0x40008000
  4013b4:	00401cb1 	.word	0x00401cb1

004013b8 <ili9488_write_ram_buffer>:
 *
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili9488_write_ram_buffer(const ili9488_color_t *p_ul_buf, uint32_t ul_size)
{
  4013b8:	b580      	push	{r7, lr}
  4013ba:	b084      	sub	sp, #16
  4013bc:	af00      	add	r7, sp, #0
  4013be:	6078      	str	r0, [r7, #4]
  4013c0:	6039      	str	r1, [r7, #0]
	volatile uint32_t i;
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  4013c2:	2006      	movs	r0, #6
  4013c4:	4b09      	ldr	r3, [pc, #36]	; (4013ec <ili9488_write_ram_buffer+0x34>)
  4013c6:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  4013c8:	683a      	ldr	r2, [r7, #0]
  4013ca:	6879      	ldr	r1, [r7, #4]
  4013cc:	4808      	ldr	r0, [pc, #32]	; (4013f0 <ili9488_write_ram_buffer+0x38>)
  4013ce:	4b09      	ldr	r3, [pc, #36]	; (4013f4 <ili9488_write_ram_buffer+0x3c>)
  4013d0:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  4013d2:	2300      	movs	r3, #0
  4013d4:	60fb      	str	r3, [r7, #12]
  4013d6:	e002      	b.n	4013de <ili9488_write_ram_buffer+0x26>
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	3301      	adds	r3, #1
  4013dc:	60fb      	str	r3, [r7, #12]
  4013de:	68fb      	ldr	r3, [r7, #12]
  4013e0:	2bfe      	cmp	r3, #254	; 0xfe
  4013e2:	d9f9      	bls.n	4013d8 <ili9488_write_ram_buffer+0x20>
}
  4013e4:	bf00      	nop
  4013e6:	3710      	adds	r7, #16
  4013e8:	46bd      	mov	sp, r7
  4013ea:	bd80      	pop	{r7, pc}
  4013ec:	00402ce1 	.word	0x00402ce1
  4013f0:	40008000 	.word	0x40008000
  4013f4:	00401221 	.word	0x00401221

004013f8 <ili9488_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 * \param size the number of parameters.
 */
static void ili9488_write_register(uint8_t uc_reg, const ili9488_color_t *us_data, uint32_t size)
{
  4013f8:	b590      	push	{r4, r7, lr}
  4013fa:	b087      	sub	sp, #28
  4013fc:	af00      	add	r7, sp, #0
  4013fe:	4603      	mov	r3, r0
  401400:	60b9      	str	r1, [r7, #8]
  401402:	607a      	str	r2, [r7, #4]
  401404:	73fb      	strb	r3, [r7, #15]
	volatile uint32_t i;

	/* Transfer cmd */
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  401406:	2006      	movs	r0, #6
  401408:	4b14      	ldr	r3, [pc, #80]	; (40145c <ili9488_write_register+0x64>)
  40140a:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  40140c:	7bfb      	ldrb	r3, [r7, #15]
  40140e:	b299      	uxth	r1, r3
  401410:	2300      	movs	r3, #0
  401412:	2203      	movs	r2, #3
  401414:	4812      	ldr	r0, [pc, #72]	; (401460 <ili9488_write_register+0x68>)
  401416:	4c13      	ldr	r4, [pc, #76]	; (401464 <ili9488_write_register+0x6c>)
  401418:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  40141a:	2300      	movs	r3, #0
  40141c:	617b      	str	r3, [r7, #20]
  40141e:	e002      	b.n	401426 <ili9488_write_register+0x2e>
  401420:	697b      	ldr	r3, [r7, #20]
  401422:	3301      	adds	r3, #1
  401424:	617b      	str	r3, [r7, #20]
  401426:	697b      	ldr	r3, [r7, #20]
  401428:	2bfe      	cmp	r3, #254	; 0xfe
  40142a:	d9f9      	bls.n	401420 <ili9488_write_register+0x28>

	if(size > 0) {
  40142c:	687b      	ldr	r3, [r7, #4]
  40142e:	2b00      	cmp	r3, #0
  401430:	d010      	beq.n	401454 <ili9488_write_register+0x5c>
		/* Transfer data */
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  401432:	2006      	movs	r0, #6
  401434:	4b0c      	ldr	r3, [pc, #48]	; (401468 <ili9488_write_register+0x70>)
  401436:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  401438:	687a      	ldr	r2, [r7, #4]
  40143a:	68b9      	ldr	r1, [r7, #8]
  40143c:	4808      	ldr	r0, [pc, #32]	; (401460 <ili9488_write_register+0x68>)
  40143e:	4b0b      	ldr	r3, [pc, #44]	; (40146c <ili9488_write_register+0x74>)
  401440:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  401442:	2300      	movs	r3, #0
  401444:	617b      	str	r3, [r7, #20]
  401446:	e002      	b.n	40144e <ili9488_write_register+0x56>
  401448:	697b      	ldr	r3, [r7, #20]
  40144a:	3301      	adds	r3, #1
  40144c:	617b      	str	r3, [r7, #20]
  40144e:	697b      	ldr	r3, [r7, #20]
  401450:	2b5e      	cmp	r3, #94	; 0x5e
  401452:	d9f9      	bls.n	401448 <ili9488_write_register+0x50>
	}
}
  401454:	bf00      	nop
  401456:	371c      	adds	r7, #28
  401458:	46bd      	mov	sp, r7
  40145a:	bd90      	pop	{r4, r7, pc}
  40145c:	00402d11 	.word	0x00402d11
  401460:	40008000 	.word	0x40008000
  401464:	00401cb1 	.word	0x00401cb1
  401468:	00402ce1 	.word	0x00402ce1
  40146c:	00401221 	.word	0x00401221

00401470 <ili9488_read_chipid>:
 * \brief Read chipid.
 *
 * \return chipid value.
 */
static uint32_t ili9488_read_chipid(void)
{
  401470:	b580      	push	{r7, lr}
  401472:	b084      	sub	sp, #16
  401474:	af00      	add	r7, sp, #0
	uint32_t i, chipid = 0;
  401476:	2300      	movs	r3, #0
  401478:	60bb      	str	r3, [r7, #8]
	volatile uint32_t j;
	ili9488_color_t chipidBuf, reg, param;

	reg = 0x81;
  40147a:	2381      	movs	r3, #129	; 0x81
  40147c:	70bb      	strb	r3, [r7, #2]
	param = 0x0;
  40147e:	2300      	movs	r3, #0
  401480:	707b      	strb	r3, [r7, #1]
	for (i = 3; i > 0; i--) {
  401482:	2303      	movs	r3, #3
  401484:	60fb      	str	r3, [r7, #12]
  401486:	e048      	b.n	40151a <ili9488_read_chipid+0xaa>
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  401488:	1cbb      	adds	r3, r7, #2
  40148a:	2201      	movs	r2, #1
  40148c:	4619      	mov	r1, r3
  40148e:	20fb      	movs	r0, #251	; 0xfb
  401490:	4b26      	ldr	r3, [pc, #152]	; (40152c <ili9488_read_chipid+0xbc>)
  401492:	4798      	blx	r3
		reg++;
  401494:	78bb      	ldrb	r3, [r7, #2]
  401496:	3301      	adds	r3, #1
  401498:	b2db      	uxtb	r3, r3
  40149a:	70bb      	strb	r3, [r7, #2]
		for(j = 0; j < 0xFF; j++);
  40149c:	2300      	movs	r3, #0
  40149e:	607b      	str	r3, [r7, #4]
  4014a0:	e002      	b.n	4014a8 <ili9488_read_chipid+0x38>
  4014a2:	687b      	ldr	r3, [r7, #4]
  4014a4:	3301      	adds	r3, #1
  4014a6:	607b      	str	r3, [r7, #4]
  4014a8:	687b      	ldr	r3, [r7, #4]
  4014aa:	2bfe      	cmp	r3, #254	; 0xfe
  4014ac:	d9f9      	bls.n	4014a2 <ili9488_read_chipid+0x32>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4014ae:	2200      	movs	r2, #0
  4014b0:	2100      	movs	r1, #0
  4014b2:	20d3      	movs	r0, #211	; 0xd3
  4014b4:	4b1d      	ldr	r3, [pc, #116]	; (40152c <ili9488_read_chipid+0xbc>)
  4014b6:	4798      	blx	r3
		{
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4014b8:	2006      	movs	r0, #6
  4014ba:	4b1d      	ldr	r3, [pc, #116]	; (401530 <ili9488_read_chipid+0xc0>)
  4014bc:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4014be:	1cfb      	adds	r3, r7, #3
  4014c0:	2201      	movs	r2, #1
  4014c2:	4619      	mov	r1, r3
  4014c4:	481b      	ldr	r0, [pc, #108]	; (401534 <ili9488_read_chipid+0xc4>)
  4014c6:	4b1c      	ldr	r3, [pc, #112]	; (401538 <ili9488_read_chipid+0xc8>)
  4014c8:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  4014ca:	2300      	movs	r3, #0
  4014cc:	607b      	str	r3, [r7, #4]
  4014ce:	e002      	b.n	4014d6 <ili9488_read_chipid+0x66>
  4014d0:	687b      	ldr	r3, [r7, #4]
  4014d2:	3301      	adds	r3, #1
  4014d4:	607b      	str	r3, [r7, #4]
  4014d6:	687b      	ldr	r3, [r7, #4]
  4014d8:	2bfe      	cmp	r3, #254	; 0xfe
  4014da:	d9f9      	bls.n	4014d0 <ili9488_read_chipid+0x60>
		}
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  4014dc:	78fb      	ldrb	r3, [r7, #3]
  4014de:	461a      	mov	r2, r3
  4014e0:	68fb      	ldr	r3, [r7, #12]
  4014e2:	3b01      	subs	r3, #1
  4014e4:	00db      	lsls	r3, r3, #3
  4014e6:	fa02 f303 	lsl.w	r3, r2, r3
  4014ea:	461a      	mov	r2, r3
  4014ec:	68bb      	ldr	r3, [r7, #8]
  4014ee:	4313      	orrs	r3, r2
  4014f0:	60bb      	str	r3, [r7, #8]
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  4014f2:	1c7b      	adds	r3, r7, #1
  4014f4:	2201      	movs	r2, #1
  4014f6:	4619      	mov	r1, r3
  4014f8:	20fb      	movs	r0, #251	; 0xfb
  4014fa:	4b0c      	ldr	r3, [pc, #48]	; (40152c <ili9488_read_chipid+0xbc>)
  4014fc:	4798      	blx	r3
		for(j = 0; j < 0xFFF; j++);
  4014fe:	2300      	movs	r3, #0
  401500:	607b      	str	r3, [r7, #4]
  401502:	e002      	b.n	40150a <ili9488_read_chipid+0x9a>
  401504:	687b      	ldr	r3, [r7, #4]
  401506:	3301      	adds	r3, #1
  401508:	607b      	str	r3, [r7, #4]
  40150a:	687b      	ldr	r3, [r7, #4]
  40150c:	f640 72fe 	movw	r2, #4094	; 0xffe
  401510:	4293      	cmp	r3, r2
  401512:	d9f7      	bls.n	401504 <ili9488_read_chipid+0x94>
	for (i = 3; i > 0; i--) {
  401514:	68fb      	ldr	r3, [r7, #12]
  401516:	3b01      	subs	r3, #1
  401518:	60fb      	str	r3, [r7, #12]
  40151a:	68fb      	ldr	r3, [r7, #12]
  40151c:	2b00      	cmp	r3, #0
  40151e:	d1b3      	bne.n	401488 <ili9488_read_chipid+0x18>
	}
	return chipid;
  401520:	68bb      	ldr	r3, [r7, #8]
}
  401522:	4618      	mov	r0, r3
  401524:	3710      	adds	r7, #16
  401526:	46bd      	mov	sp, r7
  401528:	bd80      	pop	{r7, pc}
  40152a:	bf00      	nop
  40152c:	004013f9 	.word	0x004013f9
  401530:	00402ce1 	.word	0x00402ce1
  401534:	40008000 	.word	0x40008000
  401538:	00401295 	.word	0x00401295

0040153c <ili9488_delay>:

/**
 * \brief Delay function.
 */
void ili9488_delay(uint32_t ul_ms)
{
  40153c:	b480      	push	{r7}
  40153e:	b085      	sub	sp, #20
  401540:	af00      	add	r7, sp, #0
  401542:	6078      	str	r0, [r7, #4]
	uint32_t i;

	for(i = 0; i < ul_ms; i++) {
  401544:	2300      	movs	r3, #0
  401546:	60fb      	str	r3, [r7, #12]
  401548:	e00c      	b.n	401564 <ili9488_delay+0x28>
		for(i = 0; i < 100000; i++) {
  40154a:	2300      	movs	r3, #0
  40154c:	60fb      	str	r3, [r7, #12]
  40154e:	e002      	b.n	401556 <ili9488_delay+0x1a>
  401550:	68fb      	ldr	r3, [r7, #12]
  401552:	3301      	adds	r3, #1
  401554:	60fb      	str	r3, [r7, #12]
  401556:	68fb      	ldr	r3, [r7, #12]
  401558:	4a07      	ldr	r2, [pc, #28]	; (401578 <ili9488_delay+0x3c>)
  40155a:	4293      	cmp	r3, r2
  40155c:	d9f8      	bls.n	401550 <ili9488_delay+0x14>
	for(i = 0; i < ul_ms; i++) {
  40155e:	68fb      	ldr	r3, [r7, #12]
  401560:	3301      	adds	r3, #1
  401562:	60fb      	str	r3, [r7, #12]
  401564:	68fa      	ldr	r2, [r7, #12]
  401566:	687b      	ldr	r3, [r7, #4]
  401568:	429a      	cmp	r2, r3
  40156a:	d3ee      	bcc.n	40154a <ili9488_delay+0xe>
		}
	}
}
  40156c:	bf00      	nop
  40156e:	3714      	adds	r7, #20
  401570:	46bd      	mov	sp, r7
  401572:	f85d 7b04 	ldr.w	r7, [sp], #4
  401576:	4770      	bx	lr
  401578:	0001869f 	.word	0x0001869f

0040157c <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  40157c:	b480      	push	{r7}
  40157e:	b087      	sub	sp, #28
  401580:	af00      	add	r7, sp, #0
  401582:	60f8      	str	r0, [r7, #12]
  401584:	60b9      	str	r1, [r7, #8]
  401586:	607a      	str	r2, [r7, #4]
  401588:	603b      	str	r3, [r7, #0]
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  40158a:	68fb      	ldr	r3, [r7, #12]
  40158c:	681b      	ldr	r3, [r3, #0]
  40158e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  401592:	d303      	bcc.n	40159c <ili9488_check_box_coordinates+0x20>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  401594:	68fb      	ldr	r3, [r7, #12]
  401596:	f240 123f 	movw	r2, #319	; 0x13f
  40159a:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  40159c:	687b      	ldr	r3, [r7, #4]
  40159e:	681b      	ldr	r3, [r3, #0]
  4015a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4015a4:	d303      	bcc.n	4015ae <ili9488_check_box_coordinates+0x32>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  4015a6:	687b      	ldr	r3, [r7, #4]
  4015a8:	f240 123f 	movw	r2, #319	; 0x13f
  4015ac:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  4015ae:	68bb      	ldr	r3, [r7, #8]
  4015b0:	681b      	ldr	r3, [r3, #0]
  4015b2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  4015b6:	d303      	bcc.n	4015c0 <ili9488_check_box_coordinates+0x44>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  4015b8:	68bb      	ldr	r3, [r7, #8]
  4015ba:	f240 12df 	movw	r2, #479	; 0x1df
  4015be:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  4015c0:	683b      	ldr	r3, [r7, #0]
  4015c2:	681b      	ldr	r3, [r3, #0]
  4015c4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  4015c8:	d303      	bcc.n	4015d2 <ili9488_check_box_coordinates+0x56>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  4015ca:	683b      	ldr	r3, [r7, #0]
  4015cc:	f240 12df 	movw	r2, #479	; 0x1df
  4015d0:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  4015d2:	68fb      	ldr	r3, [r7, #12]
  4015d4:	681a      	ldr	r2, [r3, #0]
  4015d6:	687b      	ldr	r3, [r7, #4]
  4015d8:	681b      	ldr	r3, [r3, #0]
  4015da:	429a      	cmp	r2, r3
  4015dc:	d909      	bls.n	4015f2 <ili9488_check_box_coordinates+0x76>
		dw = *p_ul_x1;
  4015de:	68fb      	ldr	r3, [r7, #12]
  4015e0:	681b      	ldr	r3, [r3, #0]
  4015e2:	617b      	str	r3, [r7, #20]
		*p_ul_x1 = *p_ul_x2;
  4015e4:	687b      	ldr	r3, [r7, #4]
  4015e6:	681a      	ldr	r2, [r3, #0]
  4015e8:	68fb      	ldr	r3, [r7, #12]
  4015ea:	601a      	str	r2, [r3, #0]
		*p_ul_x2 = dw;
  4015ec:	687b      	ldr	r3, [r7, #4]
  4015ee:	697a      	ldr	r2, [r7, #20]
  4015f0:	601a      	str	r2, [r3, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4015f2:	68bb      	ldr	r3, [r7, #8]
  4015f4:	681a      	ldr	r2, [r3, #0]
  4015f6:	683b      	ldr	r3, [r7, #0]
  4015f8:	681b      	ldr	r3, [r3, #0]
  4015fa:	429a      	cmp	r2, r3
  4015fc:	d909      	bls.n	401612 <ili9488_check_box_coordinates+0x96>
		dw = *p_ul_y1;
  4015fe:	68bb      	ldr	r3, [r7, #8]
  401600:	681b      	ldr	r3, [r3, #0]
  401602:	617b      	str	r3, [r7, #20]
		*p_ul_y1 = *p_ul_y2;
  401604:	683b      	ldr	r3, [r7, #0]
  401606:	681a      	ldr	r2, [r3, #0]
  401608:	68bb      	ldr	r3, [r7, #8]
  40160a:	601a      	str	r2, [r3, #0]
		*p_ul_y2 = dw;
  40160c:	683b      	ldr	r3, [r7, #0]
  40160e:	697a      	ldr	r2, [r7, #20]
  401610:	601a      	str	r2, [r3, #0]
	}
}
  401612:	bf00      	nop
  401614:	371c      	adds	r7, #28
  401616:	46bd      	mov	sp, r7
  401618:	f85d 7b04 	ldr.w	r7, [sp], #4
  40161c:	4770      	bx	lr
	...

00401620 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401620:	b580      	push	{r7, lr}
  401622:	b084      	sub	sp, #16
  401624:	af00      	add	r7, sp, #0
  401626:	4603      	mov	r3, r0
  401628:	71fb      	strb	r3, [r7, #7]
	ili9488_color_t value;
	if(direction) {
  40162a:	79fb      	ldrb	r3, [r7, #7]
  40162c:	2b00      	cmp	r3, #0
  40162e:	d002      	beq.n	401636 <ili9488_set_display_direction+0x16>
		value = 0xE8;
  401630:	23e8      	movs	r3, #232	; 0xe8
  401632:	73fb      	strb	r3, [r7, #15]
  401634:	e001      	b.n	40163a <ili9488_set_display_direction+0x1a>
	} else {
		value = 0x48;
  401636:	2348      	movs	r3, #72	; 0x48
  401638:	73fb      	strb	r3, [r7, #15]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  40163a:	f107 030f 	add.w	r3, r7, #15
  40163e:	2201      	movs	r2, #1
  401640:	4619      	mov	r1, r3
  401642:	2036      	movs	r0, #54	; 0x36
  401644:	4b02      	ldr	r3, [pc, #8]	; (401650 <ili9488_set_display_direction+0x30>)
  401646:	4798      	blx	r3
}
  401648:	bf00      	nop
  40164a:	3710      	adds	r7, #16
  40164c:	46bd      	mov	sp, r7
  40164e:	bd80      	pop	{r7, pc}
  401650:	004013f9 	.word	0x004013f9

00401654 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401654:	b590      	push	{r4, r7, lr}
  401656:	b087      	sub	sp, #28
  401658:	af00      	add	r7, sp, #0
  40165a:	4604      	mov	r4, r0
  40165c:	4608      	mov	r0, r1
  40165e:	4611      	mov	r1, r2
  401660:	461a      	mov	r2, r3
  401662:	4623      	mov	r3, r4
  401664:	80fb      	strh	r3, [r7, #6]
  401666:	4603      	mov	r3, r0
  401668:	80bb      	strh	r3, [r7, #4]
  40166a:	460b      	mov	r3, r1
  40166c:	807b      	strh	r3, [r7, #2]
  40166e:	4613      	mov	r3, r2
  401670:	803b      	strh	r3, [r7, #0]
	uint16_t col_start, col_end, row_start, row_end;
	uint32_t cnt = 0;
  401672:	2300      	movs	r3, #0
  401674:	617b      	str	r3, [r7, #20]
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  401676:	2304      	movs	r3, #4
  401678:	617b      	str	r3, [r7, #20]

	col_start  =  x ;
  40167a:	88fb      	ldrh	r3, [r7, #6]
  40167c:	827b      	strh	r3, [r7, #18]
	col_end    =  width + x - 1;
  40167e:	887a      	ldrh	r2, [r7, #2]
  401680:	88fb      	ldrh	r3, [r7, #6]
  401682:	4413      	add	r3, r2
  401684:	b29b      	uxth	r3, r3
  401686:	3b01      	subs	r3, #1
  401688:	b29b      	uxth	r3, r3
  40168a:	823b      	strh	r3, [r7, #16]

	row_start = y ;
  40168c:	88bb      	ldrh	r3, [r7, #4]
  40168e:	81fb      	strh	r3, [r7, #14]
	row_end   = height + y - 1;
  401690:	883a      	ldrh	r2, [r7, #0]
  401692:	88bb      	ldrh	r3, [r7, #4]
  401694:	4413      	add	r3, r2
  401696:	b29b      	uxth	r3, r3
  401698:	3b01      	subs	r3, #1
  40169a:	b29b      	uxth	r3, r3
  40169c:	81bb      	strh	r3, [r7, #12]

	buf[0] = get_8b_to_16b(col_start);
  40169e:	f107 0312 	add.w	r3, r7, #18
  4016a2:	785b      	ldrb	r3, [r3, #1]
  4016a4:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(col_start);
  4016a6:	f107 0312 	add.w	r3, r7, #18
  4016aa:	781b      	ldrb	r3, [r3, #0]
  4016ac:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(col_end);
  4016ae:	f107 0310 	add.w	r3, r7, #16
  4016b2:	785b      	ldrb	r3, [r3, #1]
  4016b4:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(col_end);
  4016b6:	f107 0310 	add.w	r3, r7, #16
  4016ba:	781b      	ldrb	r3, [r3, #0]
  4016bc:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  4016be:	f107 0308 	add.w	r3, r7, #8
  4016c2:	697a      	ldr	r2, [r7, #20]
  4016c4:	4619      	mov	r1, r3
  4016c6:	202a      	movs	r0, #42	; 0x2a
  4016c8:	4b13      	ldr	r3, [pc, #76]	; (401718 <ili9488_set_window+0xc4>)
  4016ca:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4016cc:	2200      	movs	r2, #0
  4016ce:	2100      	movs	r1, #0
  4016d0:	2000      	movs	r0, #0
  4016d2:	4b11      	ldr	r3, [pc, #68]	; (401718 <ili9488_set_window+0xc4>)
  4016d4:	4798      	blx	r3

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  4016d6:	f107 030e 	add.w	r3, r7, #14
  4016da:	785b      	ldrb	r3, [r3, #1]
  4016dc:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(row_start);
  4016de:	f107 030e 	add.w	r3, r7, #14
  4016e2:	781b      	ldrb	r3, [r3, #0]
  4016e4:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(row_end);
  4016e6:	f107 030c 	add.w	r3, r7, #12
  4016ea:	785b      	ldrb	r3, [r3, #1]
  4016ec:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(row_end);
  4016ee:	f107 030c 	add.w	r3, r7, #12
  4016f2:	781b      	ldrb	r3, [r3, #0]
  4016f4:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  4016f6:	f107 0308 	add.w	r3, r7, #8
  4016fa:	697a      	ldr	r2, [r7, #20]
  4016fc:	4619      	mov	r1, r3
  4016fe:	202b      	movs	r0, #43	; 0x2b
  401700:	4b05      	ldr	r3, [pc, #20]	; (401718 <ili9488_set_window+0xc4>)
  401702:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401704:	2200      	movs	r2, #0
  401706:	2100      	movs	r1, #0
  401708:	2000      	movs	r0, #0
  40170a:	4b03      	ldr	r3, [pc, #12]	; (401718 <ili9488_set_window+0xc4>)
  40170c:	4798      	blx	r3
}
  40170e:	bf00      	nop
  401710:	371c      	adds	r7, #28
  401712:	46bd      	mov	sp, r7
  401714:	bd90      	pop	{r4, r7, pc}
  401716:	bf00      	nop
  401718:	004013f9 	.word	0x004013f9

0040171c <ili9488_init>:
 * \param p_opt pointer to ILI9488 option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili9488_init(struct ili9488_opt_t *p_opt)
{
  40171c:	b590      	push	{r4, r7, lr}
  40171e:	b089      	sub	sp, #36	; 0x24
  401720:	af02      	add	r7, sp, #8
  401722:	6078      	str	r0, [r7, #4]
			| SMC_MODE_DBW_16_BIT
			| SMC_MODE_EXNW_MODE_DISABLED
			| SMC_MODE_TDF_CYCLES(0xF));
#endif
#ifdef ILI9488_SPIMODE
	struct spi_device ILI9488_SPI_DEVICE = {
  401724:	2303      	movs	r3, #3
  401726:	60fb      	str	r3, [r7, #12]
		// Board specific chip select configuration
		.id = BOARD_ILI9488_SPI_NPCS
	};

	/* Init, select and configure the chip */
	spi_master_init(BOARD_ILI9488_SPI);
  401728:	4843      	ldr	r0, [pc, #268]	; (401838 <ili9488_init+0x11c>)
  40172a:	4b44      	ldr	r3, [pc, #272]	; (40183c <ili9488_init+0x120>)
  40172c:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  40172e:	f107 010c 	add.w	r1, r7, #12
  401732:	2300      	movs	r3, #0
  401734:	9300      	str	r3, [sp, #0]
  401736:	4b42      	ldr	r3, [pc, #264]	; (401840 <ili9488_init+0x124>)
  401738:	2203      	movs	r2, #3
  40173a:	483f      	ldr	r0, [pc, #252]	; (401838 <ili9488_init+0x11c>)
  40173c:	4c41      	ldr	r4, [pc, #260]	; (401844 <ili9488_init+0x128>)
  40173e:	47a0      	blx	r4
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  401740:	2200      	movs	r2, #0
  401742:	2103      	movs	r1, #3
  401744:	483c      	ldr	r0, [pc, #240]	; (401838 <ili9488_init+0x11c>)
  401746:	4b40      	ldr	r3, [pc, #256]	; (401848 <ili9488_init+0x12c>)
  401748:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  40174a:	f107 030c 	add.w	r3, r7, #12
  40174e:	4619      	mov	r1, r3
  401750:	4839      	ldr	r0, [pc, #228]	; (401838 <ili9488_init+0x11c>)
  401752:	4b3e      	ldr	r3, [pc, #248]	; (40184c <ili9488_init+0x130>)
  401754:	4798      	blx	r3

	/* Enable the SPI peripheral */
	spi_enable(BOARD_ILI9488_SPI);
  401756:	4838      	ldr	r0, [pc, #224]	; (401838 <ili9488_init+0x11c>)
  401758:	4b3d      	ldr	r3, [pc, #244]	; (401850 <ili9488_init+0x134>)
  40175a:	4798      	blx	r3
	spi_enable_interrupt(BOARD_ILI9488_SPI, SPI_IER_RDRF);
  40175c:	2101      	movs	r1, #1
  40175e:	4836      	ldr	r0, [pc, #216]	; (401838 <ili9488_init+0x11c>)
  401760:	4b3c      	ldr	r3, [pc, #240]	; (401854 <ili9488_init+0x138>)
  401762:	4798      	blx	r3
#endif

	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401764:	2200      	movs	r2, #0
  401766:	2100      	movs	r1, #0
  401768:	2001      	movs	r0, #1
  40176a:	4b3b      	ldr	r3, [pc, #236]	; (401858 <ili9488_init+0x13c>)
  40176c:	4798      	blx	r3
	ili9488_delay(200);
  40176e:	20c8      	movs	r0, #200	; 0xc8
  401770:	4b3a      	ldr	r3, [pc, #232]	; (40185c <ili9488_init+0x140>)
  401772:	4798      	blx	r3

	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  401774:	2200      	movs	r2, #0
  401776:	2100      	movs	r1, #0
  401778:	2011      	movs	r0, #17
  40177a:	4b37      	ldr	r3, [pc, #220]	; (401858 <ili9488_init+0x13c>)
  40177c:	4798      	blx	r3
	ili9488_delay(200);
  40177e:	20c8      	movs	r0, #200	; 0xc8
  401780:	4b36      	ldr	r3, [pc, #216]	; (40185c <ili9488_init+0x140>)
  401782:	4798      	blx	r3

	/** read chipid */
	chipid = ili9488_read_chipid();
  401784:	4b36      	ldr	r3, [pc, #216]	; (401860 <ili9488_init+0x144>)
  401786:	4798      	blx	r3
  401788:	6178      	str	r0, [r7, #20]
	if (chipid != ILI9488_DEVICE_CODE) {
  40178a:	697b      	ldr	r3, [r7, #20]
  40178c:	f249 4288 	movw	r2, #38024	; 0x9488
  401790:	4293      	cmp	r3, r2
  401792:	d001      	beq.n	401798 <ili9488_init+0x7c>
		return 1;
  401794:	2301      	movs	r3, #1
  401796:	e04a      	b.n	40182e <ili9488_init+0x112>
	}

	/** make it tRGB and reverse the column order */
	param = 0x48;
  401798:	2348      	movs	r3, #72	; 0x48
  40179a:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  40179c:	f107 0313 	add.w	r3, r7, #19
  4017a0:	2201      	movs	r2, #1
  4017a2:	4619      	mov	r1, r3
  4017a4:	2036      	movs	r0, #54	; 0x36
  4017a6:	4b2c      	ldr	r3, [pc, #176]	; (401858 <ili9488_init+0x13c>)
  4017a8:	4798      	blx	r3
	ili9488_delay(100);
  4017aa:	2064      	movs	r0, #100	; 0x64
  4017ac:	4b2b      	ldr	r3, [pc, #172]	; (40185c <ili9488_init+0x140>)
  4017ae:	4798      	blx	r3

	param = 0x04;
  4017b0:	2304      	movs	r3, #4
  4017b2:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  4017b4:	f107 0313 	add.w	r3, r7, #19
  4017b8:	2201      	movs	r2, #1
  4017ba:	4619      	mov	r1, r3
  4017bc:	20cf      	movs	r0, #207	; 0xcf
  4017be:	4b26      	ldr	r3, [pc, #152]	; (401858 <ili9488_init+0x13c>)
  4017c0:	4798      	blx	r3
	ili9488_delay(100);
  4017c2:	2064      	movs	r0, #100	; 0x64
  4017c4:	4b25      	ldr	r3, [pc, #148]	; (40185c <ili9488_init+0x140>)
  4017c6:	4798      	blx	r3
	ili9488_delay(100);
	ili9488_write_register(ILI9488_CMD_PARTIAL_MODE_ON, 0, 0);
	ili9488_delay(100);
#endif
#ifdef ILI9488_SPIMODE
	param = 0x06;
  4017c8:	2306      	movs	r3, #6
  4017ca:	74fb      	strb	r3, [r7, #19]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  4017cc:	f107 0313 	add.w	r3, r7, #19
  4017d0:	2201      	movs	r2, #1
  4017d2:	4619      	mov	r1, r3
  4017d4:	203a      	movs	r0, #58	; 0x3a
  4017d6:	4b20      	ldr	r3, [pc, #128]	; (401858 <ili9488_init+0x13c>)
  4017d8:	4798      	blx	r3
	ili9488_delay(100);
  4017da:	2064      	movs	r0, #100	; 0x64
  4017dc:	4b1f      	ldr	r3, [pc, #124]	; (40185c <ili9488_init+0x140>)
  4017de:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  4017e0:	2200      	movs	r2, #0
  4017e2:	2100      	movs	r1, #0
  4017e4:	2013      	movs	r0, #19
  4017e6:	4b1c      	ldr	r3, [pc, #112]	; (401858 <ili9488_init+0x13c>)
  4017e8:	4798      	blx	r3
	ili9488_delay(100);
  4017ea:	2064      	movs	r0, #100	; 0x64
  4017ec:	4b1b      	ldr	r3, [pc, #108]	; (40185c <ili9488_init+0x140>)
  4017ee:	4798      	blx	r3
#endif

	ili9488_display_on();
  4017f0:	4b1c      	ldr	r3, [pc, #112]	; (401864 <ili9488_init+0x148>)
  4017f2:	4798      	blx	r3
	ili9488_delay(100);
  4017f4:	2064      	movs	r0, #100	; 0x64
  4017f6:	4b19      	ldr	r3, [pc, #100]	; (40185c <ili9488_init+0x140>)
  4017f8:	4798      	blx	r3

	ili9488_set_display_direction(LANDSCAPE);
  4017fa:	2000      	movs	r0, #0
  4017fc:	4b1a      	ldr	r3, [pc, #104]	; (401868 <ili9488_init+0x14c>)
  4017fe:	4798      	blx	r3
	ili9488_delay(100);
  401800:	2064      	movs	r0, #100	; 0x64
  401802:	4b16      	ldr	r3, [pc, #88]	; (40185c <ili9488_init+0x140>)
  401804:	4798      	blx	r3

	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  401806:	687b      	ldr	r3, [r7, #4]
  401808:	681b      	ldr	r3, [r3, #0]
  40180a:	b29a      	uxth	r2, r3
  40180c:	687b      	ldr	r3, [r7, #4]
  40180e:	685b      	ldr	r3, [r3, #4]
  401810:	b29b      	uxth	r3, r3
  401812:	2100      	movs	r1, #0
  401814:	2000      	movs	r0, #0
  401816:	4c15      	ldr	r4, [pc, #84]	; (40186c <ili9488_init+0x150>)
  401818:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  40181a:	687b      	ldr	r3, [r7, #4]
  40181c:	689b      	ldr	r3, [r3, #8]
  40181e:	4618      	mov	r0, r3
  401820:	4b13      	ldr	r3, [pc, #76]	; (401870 <ili9488_init+0x154>)
  401822:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  401824:	2100      	movs	r1, #0
  401826:	2000      	movs	r0, #0
  401828:	4b12      	ldr	r3, [pc, #72]	; (401874 <ili9488_init+0x158>)
  40182a:	4798      	blx	r3

	return 0;
  40182c:	2300      	movs	r3, #0
}
  40182e:	4618      	mov	r0, r3
  401830:	371c      	adds	r7, #28
  401832:	46bd      	mov	sp, r7
  401834:	bd90      	pop	{r4, r7, pc}
  401836:	bf00      	nop
  401838:	40008000 	.word	0x40008000
  40183c:	004010a5 	.word	0x004010a5
  401840:	01312d00 	.word	0x01312d00
  401844:	00401115 	.word	0x00401115
  401848:	00401dd1 	.word	0x00401dd1
  40184c:	004011c9 	.word	0x004011c9
  401850:	00401341 	.word	0x00401341
  401854:	0040135b 	.word	0x0040135b
  401858:	004013f9 	.word	0x004013f9
  40185c:	0040153d 	.word	0x0040153d
  401860:	00401471 	.word	0x00401471
  401864:	00401879 	.word	0x00401879
  401868:	00401621 	.word	0x00401621
  40186c:	00401655 	.word	0x00401655
  401870:	00401891 	.word	0x00401891
  401874:	004018e5 	.word	0x004018e5

00401878 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  401878:	b580      	push	{r7, lr}
  40187a:	af00      	add	r7, sp, #0
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  40187c:	2200      	movs	r2, #0
  40187e:	2100      	movs	r1, #0
  401880:	2029      	movs	r0, #41	; 0x29
  401882:	4b02      	ldr	r3, [pc, #8]	; (40188c <ili9488_display_on+0x14>)
  401884:	4798      	blx	r3
}
  401886:	bf00      	nop
  401888:	bd80      	pop	{r7, pc}
  40188a:	bf00      	nop
  40188c:	004013f9 	.word	0x004013f9

00401890 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  401890:	b480      	push	{r7}
  401892:	b085      	sub	sp, #20
  401894:	af00      	add	r7, sp, #0
  401896:	6078      	str	r0, [r7, #4]
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  401898:	2300      	movs	r3, #0
  40189a:	60fb      	str	r3, [r7, #12]
  40189c:	e016      	b.n	4018cc <ili9488_set_foreground_color+0x3c>
		g_ul_pixel_cache[i++] = ul_color>>16;
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	1c5a      	adds	r2, r3, #1
  4018a2:	60fa      	str	r2, [r7, #12]
  4018a4:	687a      	ldr	r2, [r7, #4]
  4018a6:	0c12      	lsrs	r2, r2, #16
  4018a8:	b2d1      	uxtb	r1, r2
  4018aa:	4a0d      	ldr	r2, [pc, #52]	; (4018e0 <ili9488_set_foreground_color+0x50>)
  4018ac:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color>>8;
  4018ae:	68fb      	ldr	r3, [r7, #12]
  4018b0:	1c5a      	adds	r2, r3, #1
  4018b2:	60fa      	str	r2, [r7, #12]
  4018b4:	687a      	ldr	r2, [r7, #4]
  4018b6:	0a12      	lsrs	r2, r2, #8
  4018b8:	b2d1      	uxtb	r1, r2
  4018ba:	4a09      	ldr	r2, [pc, #36]	; (4018e0 <ili9488_set_foreground_color+0x50>)
  4018bc:	54d1      	strb	r1, [r2, r3]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  4018be:	68fb      	ldr	r3, [r7, #12]
  4018c0:	1c5a      	adds	r2, r3, #1
  4018c2:	60fa      	str	r2, [r7, #12]
  4018c4:	687a      	ldr	r2, [r7, #4]
  4018c6:	b2d1      	uxtb	r1, r2
  4018c8:	4a05      	ldr	r2, [pc, #20]	; (4018e0 <ili9488_set_foreground_color+0x50>)
  4018ca:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  4018cc:	68fb      	ldr	r3, [r7, #12]
  4018ce:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
  4018d2:	d3e4      	bcc.n	40189e <ili9488_set_foreground_color+0xe>
	}
#endif
}
  4018d4:	bf00      	nop
  4018d6:	3714      	adds	r7, #20
  4018d8:	46bd      	mov	sp, r7
  4018da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018de:	4770      	bx	lr
  4018e0:	204009dc 	.word	0x204009dc

004018e4 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  4018e4:	b580      	push	{r7, lr}
  4018e6:	b084      	sub	sp, #16
  4018e8:	af00      	add	r7, sp, #0
  4018ea:	4603      	mov	r3, r0
  4018ec:	460a      	mov	r2, r1
  4018ee:	80fb      	strh	r3, [r7, #6]
  4018f0:	4613      	mov	r3, r2
  4018f2:	80bb      	strh	r3, [r7, #4]
	/* Set Horizontal Address Start Position */
	uint32_t cnt = 0;
  4018f4:	2300      	movs	r3, #0
  4018f6:	60fb      	str	r3, [r7, #12]

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);
  4018f8:	2304      	movs	r3, #4
  4018fa:	60fb      	str	r3, [r7, #12]

	buf[0] = get_8b_to_16b(x);
  4018fc:	1dbb      	adds	r3, r7, #6
  4018fe:	785b      	ldrb	r3, [r3, #1]
  401900:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(x);
  401902:	1dbb      	adds	r3, r7, #6
  401904:	781b      	ldrb	r3, [r3, #0]
  401906:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(x);
  401908:	1dbb      	adds	r3, r7, #6
  40190a:	785b      	ldrb	r3, [r3, #1]
  40190c:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(x);
  40190e:	1dbb      	adds	r3, r7, #6
  401910:	781b      	ldrb	r3, [r3, #0]
  401912:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401914:	f107 0308 	add.w	r3, r7, #8
  401918:	68fa      	ldr	r2, [r7, #12]
  40191a:	4619      	mov	r1, r3
  40191c:	202a      	movs	r0, #42	; 0x2a
  40191e:	4b11      	ldr	r3, [pc, #68]	; (401964 <ili9488_set_cursor_position+0x80>)
  401920:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401922:	2200      	movs	r2, #0
  401924:	2100      	movs	r1, #0
  401926:	2000      	movs	r0, #0
  401928:	4b0e      	ldr	r3, [pc, #56]	; (401964 <ili9488_set_cursor_position+0x80>)
  40192a:	4798      	blx	r3


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  40192c:	1d3b      	adds	r3, r7, #4
  40192e:	785b      	ldrb	r3, [r3, #1]
  401930:	723b      	strb	r3, [r7, #8]
	buf[1] = get_0b_to_8b(y);
  401932:	1d3b      	adds	r3, r7, #4
  401934:	781b      	ldrb	r3, [r3, #0]
  401936:	727b      	strb	r3, [r7, #9]
	buf[2] = get_8b_to_16b(y);
  401938:	1d3b      	adds	r3, r7, #4
  40193a:	785b      	ldrb	r3, [r3, #1]
  40193c:	72bb      	strb	r3, [r7, #10]
	buf[3] = get_0b_to_8b(y);
  40193e:	1d3b      	adds	r3, r7, #4
  401940:	781b      	ldrb	r3, [r3, #0]
  401942:	72fb      	strb	r3, [r7, #11]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401944:	f107 0308 	add.w	r3, r7, #8
  401948:	68fa      	ldr	r2, [r7, #12]
  40194a:	4619      	mov	r1, r3
  40194c:	202b      	movs	r0, #43	; 0x2b
  40194e:	4b05      	ldr	r3, [pc, #20]	; (401964 <ili9488_set_cursor_position+0x80>)
  401950:	4798      	blx	r3
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401952:	2200      	movs	r2, #0
  401954:	2100      	movs	r1, #0
  401956:	2000      	movs	r0, #0
  401958:	4b02      	ldr	r3, [pc, #8]	; (401964 <ili9488_set_cursor_position+0x80>)
  40195a:	4798      	blx	r3
}
  40195c:	bf00      	nop
  40195e:	3710      	adds	r7, #16
  401960:	46bd      	mov	sp, r7
  401962:	bd80      	pop	{r7, pc}
  401964:	004013f9 	.word	0x004013f9

00401968 <ili9488_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili9488_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  401968:	b580      	push	{r7, lr}
  40196a:	b082      	sub	sp, #8
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
  401970:	6039      	str	r1, [r7, #0]
	if ((ul_x >= ILI9488_LCD_WIDTH) || (ul_y >= ILI9488_LCD_HEIGHT)) {
  401972:	687b      	ldr	r3, [r7, #4]
  401974:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  401978:	d203      	bcs.n	401982 <ili9488_draw_pixel+0x1a>
  40197a:	683b      	ldr	r3, [r7, #0]
  40197c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
  401980:	d301      	bcc.n	401986 <ili9488_draw_pixel+0x1e>
		return 1;
  401982:	2301      	movs	r3, #1
  401984:	e00e      	b.n	4019a4 <ili9488_draw_pixel+0x3c>
	}

	/* Set cursor */
	ili9488_set_cursor_position(ul_x, ul_y);
  401986:	687b      	ldr	r3, [r7, #4]
  401988:	b29b      	uxth	r3, r3
  40198a:	683a      	ldr	r2, [r7, #0]
  40198c:	b292      	uxth	r2, r2
  40198e:	4611      	mov	r1, r2
  401990:	4618      	mov	r0, r3
  401992:	4b06      	ldr	r3, [pc, #24]	; (4019ac <ili9488_draw_pixel+0x44>)
  401994:	4798      	blx	r3

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401996:	4b06      	ldr	r3, [pc, #24]	; (4019b0 <ili9488_draw_pixel+0x48>)
  401998:	4798      	blx	r3
	ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_COLOR_UNIT);
  40199a:	2103      	movs	r1, #3
  40199c:	4805      	ldr	r0, [pc, #20]	; (4019b4 <ili9488_draw_pixel+0x4c>)
  40199e:	4b06      	ldr	r3, [pc, #24]	; (4019b8 <ili9488_draw_pixel+0x50>)
  4019a0:	4798      	blx	r3
	return 0;
  4019a2:	2300      	movs	r3, #0
}
  4019a4:	4618      	mov	r0, r3
  4019a6:	3708      	adds	r7, #8
  4019a8:	46bd      	mov	sp, r7
  4019aa:	bd80      	pop	{r7, pc}
  4019ac:	004018e5 	.word	0x004018e5
  4019b0:	00401379 	.word	0x00401379
  4019b4:	204009dc 	.word	0x204009dc
  4019b8:	004013b9 	.word	0x004013b9

004019bc <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  4019bc:	b590      	push	{r4, r7, lr}
  4019be:	b087      	sub	sp, #28
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	60f8      	str	r0, [r7, #12]
  4019c4:	60b9      	str	r1, [r7, #8]
  4019c6:	607a      	str	r2, [r7, #4]
  4019c8:	603b      	str	r3, [r7, #0]
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  4019ca:	463b      	mov	r3, r7
  4019cc:	1d3a      	adds	r2, r7, #4
  4019ce:	f107 0108 	add.w	r1, r7, #8
  4019d2:	f107 000c 	add.w	r0, r7, #12
  4019d6:	4c2a      	ldr	r4, [pc, #168]	; (401a80 <ili9488_draw_filled_rectangle+0xc4>)
  4019d8:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  4019da:	68fb      	ldr	r3, [r7, #12]
  4019dc:	b298      	uxth	r0, r3
  4019de:	68bb      	ldr	r3, [r7, #8]
  4019e0:	b299      	uxth	r1, r3
  4019e2:	687b      	ldr	r3, [r7, #4]
  4019e4:	b29a      	uxth	r2, r3
  4019e6:	68fb      	ldr	r3, [r7, #12]
  4019e8:	b29b      	uxth	r3, r3
  4019ea:	1ad3      	subs	r3, r2, r3
  4019ec:	b29b      	uxth	r3, r3
  4019ee:	3301      	adds	r3, #1
  4019f0:	b29c      	uxth	r4, r3
  4019f2:	683b      	ldr	r3, [r7, #0]
  4019f4:	b29a      	uxth	r2, r3
  4019f6:	68bb      	ldr	r3, [r7, #8]
  4019f8:	b29b      	uxth	r3, r3
  4019fa:	1ad3      	subs	r3, r2, r3
  4019fc:	b29b      	uxth	r3, r3
  4019fe:	3301      	adds	r3, #1
  401a00:	b29b      	uxth	r3, r3
  401a02:	4622      	mov	r2, r4
  401a04:	4c1f      	ldr	r4, [pc, #124]	; (401a84 <ili9488_draw_filled_rectangle+0xc8>)
  401a06:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401a08:	4b1f      	ldr	r3, [pc, #124]	; (401a88 <ili9488_draw_filled_rectangle+0xcc>)
  401a0a:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401a0c:	687a      	ldr	r2, [r7, #4]
  401a0e:	68fb      	ldr	r3, [r7, #12]
  401a10:	1ad3      	subs	r3, r2, r3
  401a12:	3301      	adds	r3, #1
  401a14:	6839      	ldr	r1, [r7, #0]
  401a16:	68ba      	ldr	r2, [r7, #8]
  401a18:	1a8a      	subs	r2, r1, r2
  401a1a:	3201      	adds	r2, #1
  401a1c:	fb02 f303 	mul.w	r3, r2, r3
  401a20:	613b      	str	r3, [r7, #16]
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401a22:	693b      	ldr	r3, [r7, #16]
  401a24:	4a19      	ldr	r2, [pc, #100]	; (401a8c <ili9488_draw_filled_rectangle+0xd0>)
  401a26:	fba2 2303 	umull	r2, r3, r2, r3
  401a2a:	0a1b      	lsrs	r3, r3, #8
  401a2c:	617b      	str	r3, [r7, #20]
	while (blocks--) {
  401a2e:	e004      	b.n	401a3a <ili9488_draw_filled_rectangle+0x7e>
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401a30:	f44f 7170 	mov.w	r1, #960	; 0x3c0
  401a34:	4816      	ldr	r0, [pc, #88]	; (401a90 <ili9488_draw_filled_rectangle+0xd4>)
  401a36:	4b17      	ldr	r3, [pc, #92]	; (401a94 <ili9488_draw_filled_rectangle+0xd8>)
  401a38:	4798      	blx	r3
	while (blocks--) {
  401a3a:	697b      	ldr	r3, [r7, #20]
  401a3c:	1e5a      	subs	r2, r3, #1
  401a3e:	617a      	str	r2, [r7, #20]
  401a40:	2b00      	cmp	r3, #0
  401a42:	d1f5      	bne.n	401a30 <ili9488_draw_filled_rectangle+0x74>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401a44:	6939      	ldr	r1, [r7, #16]
  401a46:	4b11      	ldr	r3, [pc, #68]	; (401a8c <ili9488_draw_filled_rectangle+0xd0>)
  401a48:	fba3 2301 	umull	r2, r3, r3, r1
  401a4c:	0a1a      	lsrs	r2, r3, #8
  401a4e:	4613      	mov	r3, r2
  401a50:	009b      	lsls	r3, r3, #2
  401a52:	4413      	add	r3, r2
  401a54:	019b      	lsls	r3, r3, #6
  401a56:	1aca      	subs	r2, r1, r3
  401a58:	4613      	mov	r3, r2
  401a5a:	005b      	lsls	r3, r3, #1
  401a5c:	4413      	add	r3, r2
  401a5e:	4619      	mov	r1, r3
  401a60:	480b      	ldr	r0, [pc, #44]	; (401a90 <ili9488_draw_filled_rectangle+0xd4>)
  401a62:	4b0c      	ldr	r3, [pc, #48]	; (401a94 <ili9488_draw_filled_rectangle+0xd8>)
  401a64:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401a66:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401a6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  401a6e:	2100      	movs	r1, #0
  401a70:	2000      	movs	r0, #0
  401a72:	4c04      	ldr	r4, [pc, #16]	; (401a84 <ili9488_draw_filled_rectangle+0xc8>)
  401a74:	47a0      	blx	r4

}
  401a76:	bf00      	nop
  401a78:	371c      	adds	r7, #28
  401a7a:	46bd      	mov	sp, r7
  401a7c:	bd90      	pop	{r4, r7, pc}
  401a7e:	bf00      	nop
  401a80:	0040157d 	.word	0x0040157d
  401a84:	00401655 	.word	0x00401655
  401a88:	00401379 	.word	0x00401379
  401a8c:	cccccccd 	.word	0xcccccccd
  401a90:	204009dc 	.word	0x204009dc
  401a94:	004013b9 	.word	0x004013b9

00401a98 <ili9488_draw_char>:
 * \param ul_x X coordinate of character upper-left corner.
 * \param ul_y Y coordinate of character upper-left corner.
 * \param uc_c character to print.
 */
static void ili9488_draw_char(uint32_t ul_x, uint32_t ul_y, uint8_t uc_c)
{
  401a98:	b580      	push	{r7, lr}
  401a9a:	b08a      	sub	sp, #40	; 0x28
  401a9c:	af00      	add	r7, sp, #0
  401a9e:	60f8      	str	r0, [r7, #12]
  401aa0:	60b9      	str	r1, [r7, #8]
  401aa2:	4613      	mov	r3, r2
  401aa4:	71fb      	strb	r3, [r7, #7]
	uint32_t row, col;
	uint32_t offset, offset0, offset1;

	/* Compute offset according of the specified ASCII character */
	/* Note: the first 32 characters of the ASCII table are not handled */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  401aa6:	79fa      	ldrb	r2, [r7, #7]
  401aa8:	4613      	mov	r3, r2
  401aaa:	009b      	lsls	r3, r3, #2
  401aac:	4413      	add	r3, r2
  401aae:	009b      	lsls	r3, r3, #2
  401ab0:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
  401ab4:	61fb      	str	r3, [r7, #28]

	for (col = 0; col < 10; col++) {
  401ab6:	2300      	movs	r3, #0
  401ab8:	623b      	str	r3, [r7, #32]
  401aba:	e04b      	b.n	401b54 <ili9488_draw_char+0xbc>
		/* Compute the first and second byte offset of a column */
		offset0 = offset + col * 2;
  401abc:	6a3b      	ldr	r3, [r7, #32]
  401abe:	005a      	lsls	r2, r3, #1
  401ac0:	69fb      	ldr	r3, [r7, #28]
  401ac2:	4413      	add	r3, r2
  401ac4:	61bb      	str	r3, [r7, #24]
		offset1 = offset0 + 1;
  401ac6:	69bb      	ldr	r3, [r7, #24]
  401ac8:	3301      	adds	r3, #1
  401aca:	617b      	str	r3, [r7, #20]

		/* Draw pixel on screen depending on the corresponding bit value from the charset */
		for (row = 0; row < 8; row++) {
  401acc:	2300      	movs	r3, #0
  401ace:	627b      	str	r3, [r7, #36]	; 0x24
  401ad0:	e019      	b.n	401b06 <ili9488_draw_char+0x6e>
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  401ad2:	4a24      	ldr	r2, [pc, #144]	; (401b64 <ili9488_draw_char+0xcc>)
  401ad4:	69bb      	ldr	r3, [r7, #24]
  401ad6:	4413      	add	r3, r2
  401ad8:	781b      	ldrb	r3, [r3, #0]
  401ada:	461a      	mov	r2, r3
  401adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401ade:	f1c3 0307 	rsb	r3, r3, #7
  401ae2:	fa42 f303 	asr.w	r3, r2, r3
  401ae6:	f003 0301 	and.w	r3, r3, #1
  401aea:	2b00      	cmp	r3, #0
  401aec:	d008      	beq.n	401b00 <ili9488_draw_char+0x68>
				ili9488_draw_pixel(ul_x + col, ul_y + row);
  401aee:	68fa      	ldr	r2, [r7, #12]
  401af0:	6a3b      	ldr	r3, [r7, #32]
  401af2:	18d0      	adds	r0, r2, r3
  401af4:	68ba      	ldr	r2, [r7, #8]
  401af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401af8:	4413      	add	r3, r2
  401afa:	4619      	mov	r1, r3
  401afc:	4b1a      	ldr	r3, [pc, #104]	; (401b68 <ili9488_draw_char+0xd0>)
  401afe:	4798      	blx	r3
		for (row = 0; row < 8; row++) {
  401b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b02:	3301      	adds	r3, #1
  401b04:	627b      	str	r3, [r7, #36]	; 0x24
  401b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b08:	2b07      	cmp	r3, #7
  401b0a:	d9e2      	bls.n	401ad2 <ili9488_draw_char+0x3a>
			}
		}

		for (row = 0; row < 6; row++) {
  401b0c:	2300      	movs	r3, #0
  401b0e:	627b      	str	r3, [r7, #36]	; 0x24
  401b10:	e01a      	b.n	401b48 <ili9488_draw_char+0xb0>
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  401b12:	4a14      	ldr	r2, [pc, #80]	; (401b64 <ili9488_draw_char+0xcc>)
  401b14:	697b      	ldr	r3, [r7, #20]
  401b16:	4413      	add	r3, r2
  401b18:	781b      	ldrb	r3, [r3, #0]
  401b1a:	461a      	mov	r2, r3
  401b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b1e:	f1c3 0307 	rsb	r3, r3, #7
  401b22:	fa42 f303 	asr.w	r3, r2, r3
  401b26:	f003 0301 	and.w	r3, r3, #1
  401b2a:	2b00      	cmp	r3, #0
  401b2c:	d009      	beq.n	401b42 <ili9488_draw_char+0xaa>
				ili9488_draw_pixel(ul_x + col, ul_y + row + 8);
  401b2e:	68fa      	ldr	r2, [r7, #12]
  401b30:	6a3b      	ldr	r3, [r7, #32]
  401b32:	18d0      	adds	r0, r2, r3
  401b34:	68ba      	ldr	r2, [r7, #8]
  401b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b38:	4413      	add	r3, r2
  401b3a:	3308      	adds	r3, #8
  401b3c:	4619      	mov	r1, r3
  401b3e:	4b0a      	ldr	r3, [pc, #40]	; (401b68 <ili9488_draw_char+0xd0>)
  401b40:	4798      	blx	r3
		for (row = 0; row < 6; row++) {
  401b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b44:	3301      	adds	r3, #1
  401b46:	627b      	str	r3, [r7, #36]	; 0x24
  401b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b4a:	2b05      	cmp	r3, #5
  401b4c:	d9e1      	bls.n	401b12 <ili9488_draw_char+0x7a>
	for (col = 0; col < 10; col++) {
  401b4e:	6a3b      	ldr	r3, [r7, #32]
  401b50:	3301      	adds	r3, #1
  401b52:	623b      	str	r3, [r7, #32]
  401b54:	6a3b      	ldr	r3, [r7, #32]
  401b56:	2b09      	cmp	r3, #9
  401b58:	d9b0      	bls.n	401abc <ili9488_draw_char+0x24>
			}
		}
	}
}
  401b5a:	bf00      	nop
  401b5c:	3728      	adds	r7, #40	; 0x28
  401b5e:	46bd      	mov	sp, r7
  401b60:	bd80      	pop	{r7, pc}
  401b62:	bf00      	nop
  401b64:	0040852c 	.word	0x0040852c
  401b68:	00401969 	.word	0x00401969

00401b6c <ili9488_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili9488_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  401b6c:	b580      	push	{r7, lr}
  401b6e:	b086      	sub	sp, #24
  401b70:	af00      	add	r7, sp, #0
  401b72:	60f8      	str	r0, [r7, #12]
  401b74:	60b9      	str	r1, [r7, #8]
  401b76:	607a      	str	r2, [r7, #4]
	uint32_t xorg = ul_x;
  401b78:	68fb      	ldr	r3, [r7, #12]
  401b7a:	617b      	str	r3, [r7, #20]

	while (*p_str != 0) {
  401b7c:	e01c      	b.n	401bb8 <ili9488_draw_string+0x4c>
		/* If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  401b7e:	687b      	ldr	r3, [r7, #4]
  401b80:	781b      	ldrb	r3, [r3, #0]
  401b82:	2b0a      	cmp	r3, #10
  401b84:	d108      	bne.n	401b98 <ili9488_draw_string+0x2c>
			ul_y += gfont.height + 2;
  401b86:	230e      	movs	r3, #14
  401b88:	461a      	mov	r2, r3
  401b8a:	68bb      	ldr	r3, [r7, #8]
  401b8c:	4413      	add	r3, r2
  401b8e:	3302      	adds	r3, #2
  401b90:	60bb      	str	r3, [r7, #8]
			ul_x = xorg;
  401b92:	697b      	ldr	r3, [r7, #20]
  401b94:	60fb      	str	r3, [r7, #12]
  401b96:	e00c      	b.n	401bb2 <ili9488_draw_string+0x46>
		} else {
			/* Draw the character and place cursor right after (font width + 2) */
			ili9488_draw_char(ul_x, ul_y, *p_str);
  401b98:	687b      	ldr	r3, [r7, #4]
  401b9a:	781b      	ldrb	r3, [r3, #0]
  401b9c:	461a      	mov	r2, r3
  401b9e:	68b9      	ldr	r1, [r7, #8]
  401ba0:	68f8      	ldr	r0, [r7, #12]
  401ba2:	4b09      	ldr	r3, [pc, #36]	; (401bc8 <ili9488_draw_string+0x5c>)
  401ba4:	4798      	blx	r3
			ul_x += gfont.width + 2;
  401ba6:	230a      	movs	r3, #10
  401ba8:	461a      	mov	r2, r3
  401baa:	68fb      	ldr	r3, [r7, #12]
  401bac:	4413      	add	r3, r2
  401bae:	3302      	adds	r3, #2
  401bb0:	60fb      	str	r3, [r7, #12]
		}
		p_str++;
  401bb2:	687b      	ldr	r3, [r7, #4]
  401bb4:	3301      	adds	r3, #1
  401bb6:	607b      	str	r3, [r7, #4]
	while (*p_str != 0) {
  401bb8:	687b      	ldr	r3, [r7, #4]
  401bba:	781b      	ldrb	r3, [r3, #0]
  401bbc:	2b00      	cmp	r3, #0
  401bbe:	d1de      	bne.n	401b7e <ili9488_draw_string+0x12>
	}
}
  401bc0:	bf00      	nop
  401bc2:	3718      	adds	r7, #24
  401bc4:	46bd      	mov	sp, r7
  401bc6:	bd80      	pop	{r7, pc}
  401bc8:	00401a99 	.word	0x00401a99

00401bcc <spi_get_peripheral_select_mode>:
{
  401bcc:	b480      	push	{r7}
  401bce:	b083      	sub	sp, #12
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401bd4:	687b      	ldr	r3, [r7, #4]
  401bd6:	685b      	ldr	r3, [r3, #4]
  401bd8:	f003 0302 	and.w	r3, r3, #2
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d001      	beq.n	401be4 <spi_get_peripheral_select_mode+0x18>
		return 1;
  401be0:	2301      	movs	r3, #1
  401be2:	e000      	b.n	401be6 <spi_get_peripheral_select_mode+0x1a>
		return 0;
  401be4:	2300      	movs	r3, #0
}
  401be6:	4618      	mov	r0, r3
  401be8:	370c      	adds	r7, #12
  401bea:	46bd      	mov	sp, r7
  401bec:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bf0:	4770      	bx	lr
	...

00401bf4 <sysclk_enable_peripheral_clock>:
{
  401bf4:	b580      	push	{r7, lr}
  401bf6:	b082      	sub	sp, #8
  401bf8:	af00      	add	r7, sp, #0
  401bfa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401bfc:	6878      	ldr	r0, [r7, #4]
  401bfe:	4b03      	ldr	r3, [pc, #12]	; (401c0c <sysclk_enable_peripheral_clock+0x18>)
  401c00:	4798      	blx	r3
}
  401c02:	bf00      	nop
  401c04:	3708      	adds	r7, #8
  401c06:	46bd      	mov	sp, r7
  401c08:	bd80      	pop	{r7, pc}
  401c0a:	bf00      	nop
  401c0c:	004033a9 	.word	0x004033a9

00401c10 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401c10:	b580      	push	{r7, lr}
  401c12:	b082      	sub	sp, #8
  401c14:	af00      	add	r7, sp, #0
  401c16:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401c18:	687b      	ldr	r3, [r7, #4]
  401c1a:	4a09      	ldr	r2, [pc, #36]	; (401c40 <spi_enable_clock+0x30>)
  401c1c:	4293      	cmp	r3, r2
  401c1e:	d103      	bne.n	401c28 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  401c20:	2015      	movs	r0, #21
  401c22:	4b08      	ldr	r3, [pc, #32]	; (401c44 <spi_enable_clock+0x34>)
  401c24:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401c26:	e006      	b.n	401c36 <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  401c28:	687b      	ldr	r3, [r7, #4]
  401c2a:	4a07      	ldr	r2, [pc, #28]	; (401c48 <spi_enable_clock+0x38>)
  401c2c:	4293      	cmp	r3, r2
  401c2e:	d102      	bne.n	401c36 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  401c30:	202a      	movs	r0, #42	; 0x2a
  401c32:	4b04      	ldr	r3, [pc, #16]	; (401c44 <spi_enable_clock+0x34>)
  401c34:	4798      	blx	r3
}
  401c36:	bf00      	nop
  401c38:	3708      	adds	r7, #8
  401c3a:	46bd      	mov	sp, r7
  401c3c:	bd80      	pop	{r7, pc}
  401c3e:	bf00      	nop
  401c40:	40008000 	.word	0x40008000
  401c44:	00401bf5 	.word	0x00401bf5
  401c48:	40058000 	.word	0x40058000

00401c4c <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  401c4c:	b480      	push	{r7}
  401c4e:	b083      	sub	sp, #12
  401c50:	af00      	add	r7, sp, #0
  401c52:	6078      	str	r0, [r7, #4]
  401c54:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401c56:	687b      	ldr	r3, [r7, #4]
  401c58:	685b      	ldr	r3, [r3, #4]
  401c5a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  401c5e:	687b      	ldr	r3, [r7, #4]
  401c60:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401c62:	687b      	ldr	r3, [r7, #4]
  401c64:	685a      	ldr	r2, [r3, #4]
  401c66:	683b      	ldr	r3, [r7, #0]
  401c68:	041b      	lsls	r3, r3, #16
  401c6a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  401c6e:	431a      	orrs	r2, r3
  401c70:	687b      	ldr	r3, [r7, #4]
  401c72:	605a      	str	r2, [r3, #4]
}
  401c74:	bf00      	nop
  401c76:	370c      	adds	r7, #12
  401c78:	46bd      	mov	sp, r7
  401c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c7e:	4770      	bx	lr

00401c80 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  401c80:	b480      	push	{r7}
  401c82:	b083      	sub	sp, #12
  401c84:	af00      	add	r7, sp, #0
  401c86:	6078      	str	r0, [r7, #4]
  401c88:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401c8a:	687b      	ldr	r3, [r7, #4]
  401c8c:	685b      	ldr	r3, [r3, #4]
  401c8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  401c92:	687b      	ldr	r3, [r7, #4]
  401c94:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401c96:	687b      	ldr	r3, [r7, #4]
  401c98:	685a      	ldr	r2, [r3, #4]
  401c9a:	683b      	ldr	r3, [r7, #0]
  401c9c:	061b      	lsls	r3, r3, #24
  401c9e:	431a      	orrs	r2, r3
  401ca0:	687b      	ldr	r3, [r7, #4]
  401ca2:	605a      	str	r2, [r3, #4]
}
  401ca4:	bf00      	nop
  401ca6:	370c      	adds	r7, #12
  401ca8:	46bd      	mov	sp, r7
  401caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cae:	4770      	bx	lr

00401cb0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401cb0:	b580      	push	{r7, lr}
  401cb2:	b084      	sub	sp, #16
  401cb4:	af00      	add	r7, sp, #0
  401cb6:	6078      	str	r0, [r7, #4]
  401cb8:	4608      	mov	r0, r1
  401cba:	4611      	mov	r1, r2
  401cbc:	461a      	mov	r2, r3
  401cbe:	4603      	mov	r3, r0
  401cc0:	807b      	strh	r3, [r7, #2]
  401cc2:	460b      	mov	r3, r1
  401cc4:	707b      	strb	r3, [r7, #1]
  401cc6:	4613      	mov	r3, r2
  401cc8:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  401cca:	f643 2398 	movw	r3, #15000	; 0x3a98
  401cce:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401cd0:	e006      	b.n	401ce0 <spi_write+0x30>
		if (!timeout--) {
  401cd2:	68fb      	ldr	r3, [r7, #12]
  401cd4:	1e5a      	subs	r2, r3, #1
  401cd6:	60fa      	str	r2, [r7, #12]
  401cd8:	2b00      	cmp	r3, #0
  401cda:	d101      	bne.n	401ce0 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  401cdc:	2301      	movs	r3, #1
  401cde:	e020      	b.n	401d22 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401ce0:	687b      	ldr	r3, [r7, #4]
  401ce2:	691b      	ldr	r3, [r3, #16]
  401ce4:	f003 0302 	and.w	r3, r3, #2
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d0f2      	beq.n	401cd2 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401cec:	6878      	ldr	r0, [r7, #4]
  401cee:	4b0f      	ldr	r3, [pc, #60]	; (401d2c <spi_write+0x7c>)
  401cf0:	4798      	blx	r3
  401cf2:	4603      	mov	r3, r0
  401cf4:	2b00      	cmp	r3, #0
  401cf6:	d00e      	beq.n	401d16 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401cf8:	887a      	ldrh	r2, [r7, #2]
  401cfa:	787b      	ldrb	r3, [r7, #1]
  401cfc:	041b      	lsls	r3, r3, #16
  401cfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  401d02:	4313      	orrs	r3, r2
  401d04:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  401d06:	783b      	ldrb	r3, [r7, #0]
  401d08:	2b00      	cmp	r3, #0
  401d0a:	d006      	beq.n	401d1a <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  401d0c:	68bb      	ldr	r3, [r7, #8]
  401d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  401d12:	60bb      	str	r3, [r7, #8]
  401d14:	e001      	b.n	401d1a <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  401d16:	887b      	ldrh	r3, [r7, #2]
  401d18:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  401d1a:	687b      	ldr	r3, [r7, #4]
  401d1c:	68ba      	ldr	r2, [r7, #8]
  401d1e:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  401d20:	2300      	movs	r3, #0
}
  401d22:	4618      	mov	r0, r3
  401d24:	3710      	adds	r7, #16
  401d26:	46bd      	mov	sp, r7
  401d28:	bd80      	pop	{r7, pc}
  401d2a:	bf00      	nop
  401d2c:	00401bcd 	.word	0x00401bcd

00401d30 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  401d30:	b480      	push	{r7}
  401d32:	b085      	sub	sp, #20
  401d34:	af00      	add	r7, sp, #0
  401d36:	60f8      	str	r0, [r7, #12]
  401d38:	60b9      	str	r1, [r7, #8]
  401d3a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  401d3c:	687b      	ldr	r3, [r7, #4]
  401d3e:	2b00      	cmp	r3, #0
  401d40:	d00c      	beq.n	401d5c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401d42:	68fb      	ldr	r3, [r7, #12]
  401d44:	68ba      	ldr	r2, [r7, #8]
  401d46:	320c      	adds	r2, #12
  401d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d4c:	f043 0101 	orr.w	r1, r3, #1
  401d50:	68fb      	ldr	r3, [r7, #12]
  401d52:	68ba      	ldr	r2, [r7, #8]
  401d54:	320c      	adds	r2, #12
  401d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  401d5a:	e00b      	b.n	401d74 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401d5c:	68fb      	ldr	r3, [r7, #12]
  401d5e:	68ba      	ldr	r2, [r7, #8]
  401d60:	320c      	adds	r2, #12
  401d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d66:	f023 0101 	bic.w	r1, r3, #1
  401d6a:	68fb      	ldr	r3, [r7, #12]
  401d6c:	68ba      	ldr	r2, [r7, #8]
  401d6e:	320c      	adds	r2, #12
  401d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401d74:	bf00      	nop
  401d76:	3714      	adds	r7, #20
  401d78:	46bd      	mov	sp, r7
  401d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d7e:	4770      	bx	lr

00401d80 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  401d80:	b480      	push	{r7}
  401d82:	b085      	sub	sp, #20
  401d84:	af00      	add	r7, sp, #0
  401d86:	60f8      	str	r0, [r7, #12]
  401d88:	60b9      	str	r1, [r7, #8]
  401d8a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  401d8c:	687b      	ldr	r3, [r7, #4]
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d00c      	beq.n	401dac <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401d92:	68fb      	ldr	r3, [r7, #12]
  401d94:	68ba      	ldr	r2, [r7, #8]
  401d96:	320c      	adds	r2, #12
  401d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d9c:	f043 0102 	orr.w	r1, r3, #2
  401da0:	68fb      	ldr	r3, [r7, #12]
  401da2:	68ba      	ldr	r2, [r7, #8]
  401da4:	320c      	adds	r2, #12
  401da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  401daa:	e00b      	b.n	401dc4 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401dac:	68fb      	ldr	r3, [r7, #12]
  401dae:	68ba      	ldr	r2, [r7, #8]
  401db0:	320c      	adds	r2, #12
  401db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401db6:	f023 0102 	bic.w	r1, r3, #2
  401dba:	68fb      	ldr	r3, [r7, #12]
  401dbc:	68ba      	ldr	r2, [r7, #8]
  401dbe:	320c      	adds	r2, #12
  401dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401dc4:	bf00      	nop
  401dc6:	3714      	adds	r7, #20
  401dc8:	46bd      	mov	sp, r7
  401dca:	f85d 7b04 	ldr.w	r7, [sp], #4
  401dce:	4770      	bx	lr

00401dd0 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  401dd0:	b480      	push	{r7}
  401dd2:	b085      	sub	sp, #20
  401dd4:	af00      	add	r7, sp, #0
  401dd6:	60f8      	str	r0, [r7, #12]
  401dd8:	60b9      	str	r1, [r7, #8]
  401dda:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401ddc:	687b      	ldr	r3, [r7, #4]
  401dde:	2b04      	cmp	r3, #4
  401de0:	d118      	bne.n	401e14 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401de2:	68fb      	ldr	r3, [r7, #12]
  401de4:	68ba      	ldr	r2, [r7, #8]
  401de6:	320c      	adds	r2, #12
  401de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401dec:	f023 0108 	bic.w	r1, r3, #8
  401df0:	68fb      	ldr	r3, [r7, #12]
  401df2:	68ba      	ldr	r2, [r7, #8]
  401df4:	320c      	adds	r2, #12
  401df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401dfa:	68fb      	ldr	r3, [r7, #12]
  401dfc:	68ba      	ldr	r2, [r7, #8]
  401dfe:	320c      	adds	r2, #12
  401e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401e04:	f043 0104 	orr.w	r1, r3, #4
  401e08:	68fb      	ldr	r3, [r7, #12]
  401e0a:	68ba      	ldr	r2, [r7, #8]
  401e0c:	320c      	adds	r2, #12
  401e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  401e12:	e02a      	b.n	401e6a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401e14:	687b      	ldr	r3, [r7, #4]
  401e16:	2b00      	cmp	r3, #0
  401e18:	d118      	bne.n	401e4c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401e1a:	68fb      	ldr	r3, [r7, #12]
  401e1c:	68ba      	ldr	r2, [r7, #8]
  401e1e:	320c      	adds	r2, #12
  401e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401e24:	f023 0108 	bic.w	r1, r3, #8
  401e28:	68fb      	ldr	r3, [r7, #12]
  401e2a:	68ba      	ldr	r2, [r7, #8]
  401e2c:	320c      	adds	r2, #12
  401e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401e32:	68fb      	ldr	r3, [r7, #12]
  401e34:	68ba      	ldr	r2, [r7, #8]
  401e36:	320c      	adds	r2, #12
  401e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401e3c:	f023 0104 	bic.w	r1, r3, #4
  401e40:	68fb      	ldr	r3, [r7, #12]
  401e42:	68ba      	ldr	r2, [r7, #8]
  401e44:	320c      	adds	r2, #12
  401e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401e4a:	e00e      	b.n	401e6a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401e4c:	687b      	ldr	r3, [r7, #4]
  401e4e:	2b08      	cmp	r3, #8
  401e50:	d10b      	bne.n	401e6a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401e52:	68fb      	ldr	r3, [r7, #12]
  401e54:	68ba      	ldr	r2, [r7, #8]
  401e56:	320c      	adds	r2, #12
  401e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401e5c:	f043 0108 	orr.w	r1, r3, #8
  401e60:	68fb      	ldr	r3, [r7, #12]
  401e62:	68ba      	ldr	r2, [r7, #8]
  401e64:	320c      	adds	r2, #12
  401e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401e6a:	bf00      	nop
  401e6c:	3714      	adds	r7, #20
  401e6e:	46bd      	mov	sp, r7
  401e70:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e74:	4770      	bx	lr

00401e76 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401e76:	b480      	push	{r7}
  401e78:	b085      	sub	sp, #20
  401e7a:	af00      	add	r7, sp, #0
  401e7c:	60f8      	str	r0, [r7, #12]
  401e7e:	60b9      	str	r1, [r7, #8]
  401e80:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401e82:	68fb      	ldr	r3, [r7, #12]
  401e84:	68ba      	ldr	r2, [r7, #8]
  401e86:	320c      	adds	r2, #12
  401e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401e8c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  401e90:	68fb      	ldr	r3, [r7, #12]
  401e92:	68ba      	ldr	r2, [r7, #8]
  401e94:	320c      	adds	r2, #12
  401e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401e9a:	68fb      	ldr	r3, [r7, #12]
  401e9c:	68ba      	ldr	r2, [r7, #8]
  401e9e:	320c      	adds	r2, #12
  401ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401ea4:	687b      	ldr	r3, [r7, #4]
  401ea6:	ea42 0103 	orr.w	r1, r2, r3
  401eaa:	68fb      	ldr	r3, [r7, #12]
  401eac:	68ba      	ldr	r2, [r7, #8]
  401eae:	320c      	adds	r2, #12
  401eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401eb4:	bf00      	nop
  401eb6:	3714      	adds	r7, #20
  401eb8:	46bd      	mov	sp, r7
  401eba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ebe:	4770      	bx	lr

00401ec0 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  401ec0:	b480      	push	{r7}
  401ec2:	b085      	sub	sp, #20
  401ec4:	af00      	add	r7, sp, #0
  401ec6:	6078      	str	r0, [r7, #4]
  401ec8:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  401eca:	683a      	ldr	r2, [r7, #0]
  401ecc:	687b      	ldr	r3, [r7, #4]
  401ece:	4413      	add	r3, r2
  401ed0:	1e5a      	subs	r2, r3, #1
  401ed2:	687b      	ldr	r3, [r7, #4]
  401ed4:	fbb2 f3f3 	udiv	r3, r2, r3
  401ed8:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401eda:	68fb      	ldr	r3, [r7, #12]
  401edc:	2b00      	cmp	r3, #0
  401ede:	dd02      	ble.n	401ee6 <spi_calc_baudrate_div+0x26>
  401ee0:	68fb      	ldr	r3, [r7, #12]
  401ee2:	2bff      	cmp	r3, #255	; 0xff
  401ee4:	dd02      	ble.n	401eec <spi_calc_baudrate_div+0x2c>
		return -1;
  401ee6:	f04f 33ff 	mov.w	r3, #4294967295
  401eea:	e001      	b.n	401ef0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  401eec:	68fb      	ldr	r3, [r7, #12]
  401eee:	b21b      	sxth	r3, r3
}
  401ef0:	4618      	mov	r0, r3
  401ef2:	3714      	adds	r7, #20
  401ef4:	46bd      	mov	sp, r7
  401ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401efa:	4770      	bx	lr

00401efc <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  401efc:	b480      	push	{r7}
  401efe:	b085      	sub	sp, #20
  401f00:	af00      	add	r7, sp, #0
  401f02:	60f8      	str	r0, [r7, #12]
  401f04:	60b9      	str	r1, [r7, #8]
  401f06:	4613      	mov	r3, r2
  401f08:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401f0a:	79fb      	ldrb	r3, [r7, #7]
  401f0c:	2b00      	cmp	r3, #0
  401f0e:	d102      	bne.n	401f16 <spi_set_baudrate_div+0x1a>
        return -1;
  401f10:	f04f 33ff 	mov.w	r3, #4294967295
  401f14:	e01b      	b.n	401f4e <spi_set_baudrate_div+0x52>
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401f16:	68fb      	ldr	r3, [r7, #12]
  401f18:	68ba      	ldr	r2, [r7, #8]
  401f1a:	320c      	adds	r2, #12
  401f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401f20:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  401f24:	68fb      	ldr	r3, [r7, #12]
  401f26:	68ba      	ldr	r2, [r7, #8]
  401f28:	320c      	adds	r2, #12
  401f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401f2e:	68fb      	ldr	r3, [r7, #12]
  401f30:	68ba      	ldr	r2, [r7, #8]
  401f32:	320c      	adds	r2, #12
  401f34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401f38:	79fb      	ldrb	r3, [r7, #7]
  401f3a:	021b      	lsls	r3, r3, #8
  401f3c:	b29b      	uxth	r3, r3
  401f3e:	ea42 0103 	orr.w	r1, r2, r3
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	68ba      	ldr	r2, [r7, #8]
  401f46:	320c      	adds	r2, #12
  401f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  401f4c:	2300      	movs	r3, #0
}
  401f4e:	4618      	mov	r0, r3
  401f50:	3714      	adds	r7, #20
  401f52:	46bd      	mov	sp, r7
  401f54:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f58:	4770      	bx	lr

00401f5a <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401f5a:	b480      	push	{r7}
  401f5c:	b085      	sub	sp, #20
  401f5e:	af00      	add	r7, sp, #0
  401f60:	60f8      	str	r0, [r7, #12]
  401f62:	60b9      	str	r1, [r7, #8]
  401f64:	4611      	mov	r1, r2
  401f66:	461a      	mov	r2, r3
  401f68:	460b      	mov	r3, r1
  401f6a:	71fb      	strb	r3, [r7, #7]
  401f6c:	4613      	mov	r3, r2
  401f6e:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401f70:	68fb      	ldr	r3, [r7, #12]
  401f72:	68ba      	ldr	r2, [r7, #8]
  401f74:	320c      	adds	r2, #12
  401f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401f7a:	b299      	uxth	r1, r3
  401f7c:	68fb      	ldr	r3, [r7, #12]
  401f7e:	68ba      	ldr	r2, [r7, #8]
  401f80:	320c      	adds	r2, #12
  401f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401f86:	68fb      	ldr	r3, [r7, #12]
  401f88:	68ba      	ldr	r2, [r7, #8]
  401f8a:	320c      	adds	r2, #12
  401f8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401f90:	79fb      	ldrb	r3, [r7, #7]
  401f92:	041b      	lsls	r3, r3, #16
  401f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  401f98:	79b9      	ldrb	r1, [r7, #6]
  401f9a:	0609      	lsls	r1, r1, #24
  401f9c:	430b      	orrs	r3, r1
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401f9e:	ea42 0103 	orr.w	r1, r2, r3
  401fa2:	68fb      	ldr	r3, [r7, #12]
  401fa4:	68ba      	ldr	r2, [r7, #8]
  401fa6:	320c      	adds	r2, #12
  401fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401fac:	bf00      	nop
  401fae:	3714      	adds	r7, #20
  401fb0:	46bd      	mov	sp, r7
  401fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fb6:	4770      	bx	lr

00401fb8 <osc_enable>:
{
  401fb8:	b580      	push	{r7, lr}
  401fba:	b082      	sub	sp, #8
  401fbc:	af00      	add	r7, sp, #0
  401fbe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401fc0:	687b      	ldr	r3, [r7, #4]
  401fc2:	2b07      	cmp	r3, #7
  401fc4:	d831      	bhi.n	40202a <osc_enable+0x72>
  401fc6:	a201      	add	r2, pc, #4	; (adr r2, 401fcc <osc_enable+0x14>)
  401fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401fcc:	00402029 	.word	0x00402029
  401fd0:	00401fed 	.word	0x00401fed
  401fd4:	00401ff5 	.word	0x00401ff5
  401fd8:	00401ffd 	.word	0x00401ffd
  401fdc:	00402005 	.word	0x00402005
  401fe0:	0040200d 	.word	0x0040200d
  401fe4:	00402015 	.word	0x00402015
  401fe8:	0040201f 	.word	0x0040201f
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401fec:	2000      	movs	r0, #0
  401fee:	4b11      	ldr	r3, [pc, #68]	; (402034 <osc_enable+0x7c>)
  401ff0:	4798      	blx	r3
		break;
  401ff2:	e01a      	b.n	40202a <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401ff4:	2001      	movs	r0, #1
  401ff6:	4b0f      	ldr	r3, [pc, #60]	; (402034 <osc_enable+0x7c>)
  401ff8:	4798      	blx	r3
		break;
  401ffa:	e016      	b.n	40202a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401ffc:	2000      	movs	r0, #0
  401ffe:	4b0e      	ldr	r3, [pc, #56]	; (402038 <osc_enable+0x80>)
  402000:	4798      	blx	r3
		break;
  402002:	e012      	b.n	40202a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  402004:	2010      	movs	r0, #16
  402006:	4b0c      	ldr	r3, [pc, #48]	; (402038 <osc_enable+0x80>)
  402008:	4798      	blx	r3
		break;
  40200a:	e00e      	b.n	40202a <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40200c:	2020      	movs	r0, #32
  40200e:	4b0a      	ldr	r3, [pc, #40]	; (402038 <osc_enable+0x80>)
  402010:	4798      	blx	r3
		break;
  402012:	e00a      	b.n	40202a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402014:	213e      	movs	r1, #62	; 0x3e
  402016:	2000      	movs	r0, #0
  402018:	4b08      	ldr	r3, [pc, #32]	; (40203c <osc_enable+0x84>)
  40201a:	4798      	blx	r3
		break;
  40201c:	e005      	b.n	40202a <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40201e:	213e      	movs	r1, #62	; 0x3e
  402020:	2001      	movs	r0, #1
  402022:	4b06      	ldr	r3, [pc, #24]	; (40203c <osc_enable+0x84>)
  402024:	4798      	blx	r3
		break;
  402026:	e000      	b.n	40202a <osc_enable+0x72>
		break;
  402028:	bf00      	nop
}
  40202a:	bf00      	nop
  40202c:	3708      	adds	r7, #8
  40202e:	46bd      	mov	sp, r7
  402030:	bd80      	pop	{r7, pc}
  402032:	bf00      	nop
  402034:	004031e5 	.word	0x004031e5
  402038:	00403251 	.word	0x00403251
  40203c:	004032c1 	.word	0x004032c1

00402040 <osc_is_ready>:
{
  402040:	b580      	push	{r7, lr}
  402042:	b082      	sub	sp, #8
  402044:	af00      	add	r7, sp, #0
  402046:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402048:	687b      	ldr	r3, [r7, #4]
  40204a:	2b07      	cmp	r3, #7
  40204c:	d826      	bhi.n	40209c <osc_is_ready+0x5c>
  40204e:	a201      	add	r2, pc, #4	; (adr r2, 402054 <osc_is_ready+0x14>)
  402050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402054:	00402075 	.word	0x00402075
  402058:	00402079 	.word	0x00402079
  40205c:	00402079 	.word	0x00402079
  402060:	0040208b 	.word	0x0040208b
  402064:	0040208b 	.word	0x0040208b
  402068:	0040208b 	.word	0x0040208b
  40206c:	0040208b 	.word	0x0040208b
  402070:	0040208b 	.word	0x0040208b
		return 1;
  402074:	2301      	movs	r3, #1
  402076:	e012      	b.n	40209e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  402078:	4b0b      	ldr	r3, [pc, #44]	; (4020a8 <osc_is_ready+0x68>)
  40207a:	4798      	blx	r3
  40207c:	4603      	mov	r3, r0
  40207e:	2b00      	cmp	r3, #0
  402080:	bf14      	ite	ne
  402082:	2301      	movne	r3, #1
  402084:	2300      	moveq	r3, #0
  402086:	b2db      	uxtb	r3, r3
  402088:	e009      	b.n	40209e <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  40208a:	4b08      	ldr	r3, [pc, #32]	; (4020ac <osc_is_ready+0x6c>)
  40208c:	4798      	blx	r3
  40208e:	4603      	mov	r3, r0
  402090:	2b00      	cmp	r3, #0
  402092:	bf14      	ite	ne
  402094:	2301      	movne	r3, #1
  402096:	2300      	moveq	r3, #0
  402098:	b2db      	uxtb	r3, r3
  40209a:	e000      	b.n	40209e <osc_is_ready+0x5e>
	return 0;
  40209c:	2300      	movs	r3, #0
}
  40209e:	4618      	mov	r0, r3
  4020a0:	3708      	adds	r7, #8
  4020a2:	46bd      	mov	sp, r7
  4020a4:	bd80      	pop	{r7, pc}
  4020a6:	bf00      	nop
  4020a8:	0040321d 	.word	0x0040321d
  4020ac:	00403339 	.word	0x00403339

004020b0 <osc_get_rate>:
{
  4020b0:	b480      	push	{r7}
  4020b2:	b083      	sub	sp, #12
  4020b4:	af00      	add	r7, sp, #0
  4020b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4020b8:	687b      	ldr	r3, [r7, #4]
  4020ba:	2b07      	cmp	r3, #7
  4020bc:	d825      	bhi.n	40210a <osc_get_rate+0x5a>
  4020be:	a201      	add	r2, pc, #4	; (adr r2, 4020c4 <osc_get_rate+0x14>)
  4020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4020c4:	004020e5 	.word	0x004020e5
  4020c8:	004020eb 	.word	0x004020eb
  4020cc:	004020f1 	.word	0x004020f1
  4020d0:	004020f7 	.word	0x004020f7
  4020d4:	004020fb 	.word	0x004020fb
  4020d8:	004020ff 	.word	0x004020ff
  4020dc:	00402103 	.word	0x00402103
  4020e0:	00402107 	.word	0x00402107
		return OSC_SLCK_32K_RC_HZ;
  4020e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4020e8:	e010      	b.n	40210c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020ee:	e00d      	b.n	40210c <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4020f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4020f4:	e00a      	b.n	40210c <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4020f6:	4b08      	ldr	r3, [pc, #32]	; (402118 <osc_get_rate+0x68>)
  4020f8:	e008      	b.n	40210c <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4020fa:	4b08      	ldr	r3, [pc, #32]	; (40211c <osc_get_rate+0x6c>)
  4020fc:	e006      	b.n	40210c <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4020fe:	4b08      	ldr	r3, [pc, #32]	; (402120 <osc_get_rate+0x70>)
  402100:	e004      	b.n	40210c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  402102:	4b07      	ldr	r3, [pc, #28]	; (402120 <osc_get_rate+0x70>)
  402104:	e002      	b.n	40210c <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  402106:	4b06      	ldr	r3, [pc, #24]	; (402120 <osc_get_rate+0x70>)
  402108:	e000      	b.n	40210c <osc_get_rate+0x5c>
	return 0;
  40210a:	2300      	movs	r3, #0
}
  40210c:	4618      	mov	r0, r3
  40210e:	370c      	adds	r7, #12
  402110:	46bd      	mov	sp, r7
  402112:	f85d 7b04 	ldr.w	r7, [sp], #4
  402116:	4770      	bx	lr
  402118:	003d0900 	.word	0x003d0900
  40211c:	007a1200 	.word	0x007a1200
  402120:	00b71b00 	.word	0x00b71b00

00402124 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  402124:	b580      	push	{r7, lr}
  402126:	b082      	sub	sp, #8
  402128:	af00      	add	r7, sp, #0
  40212a:	4603      	mov	r3, r0
  40212c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40212e:	bf00      	nop
  402130:	79fb      	ldrb	r3, [r7, #7]
  402132:	4618      	mov	r0, r3
  402134:	4b05      	ldr	r3, [pc, #20]	; (40214c <osc_wait_ready+0x28>)
  402136:	4798      	blx	r3
  402138:	4603      	mov	r3, r0
  40213a:	f083 0301 	eor.w	r3, r3, #1
  40213e:	b2db      	uxtb	r3, r3
  402140:	2b00      	cmp	r3, #0
  402142:	d1f5      	bne.n	402130 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  402144:	bf00      	nop
  402146:	3708      	adds	r7, #8
  402148:	46bd      	mov	sp, r7
  40214a:	bd80      	pop	{r7, pc}
  40214c:	00402041 	.word	0x00402041

00402150 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  402150:	b580      	push	{r7, lr}
  402152:	b086      	sub	sp, #24
  402154:	af00      	add	r7, sp, #0
  402156:	60f8      	str	r0, [r7, #12]
  402158:	607a      	str	r2, [r7, #4]
  40215a:	603b      	str	r3, [r7, #0]
  40215c:	460b      	mov	r3, r1
  40215e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  402160:	687b      	ldr	r3, [r7, #4]
  402162:	2b00      	cmp	r3, #0
  402164:	d107      	bne.n	402176 <pll_config_init+0x26>
  402166:	683b      	ldr	r3, [r7, #0]
  402168:	2b00      	cmp	r3, #0
  40216a:	d104      	bne.n	402176 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  40216c:	68fb      	ldr	r3, [r7, #12]
  40216e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  402172:	601a      	str	r2, [r3, #0]
  402174:	e019      	b.n	4021aa <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  402176:	7afb      	ldrb	r3, [r7, #11]
  402178:	4618      	mov	r0, r3
  40217a:	4b0e      	ldr	r3, [pc, #56]	; (4021b4 <pll_config_init+0x64>)
  40217c:	4798      	blx	r3
  40217e:	4602      	mov	r2, r0
  402180:	687b      	ldr	r3, [r7, #4]
  402182:	fbb2 f3f3 	udiv	r3, r2, r3
  402186:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  402188:	697b      	ldr	r3, [r7, #20]
  40218a:	683a      	ldr	r2, [r7, #0]
  40218c:	fb02 f303 	mul.w	r3, r2, r3
  402190:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  402192:	683b      	ldr	r3, [r7, #0]
  402194:	3b01      	subs	r3, #1
  402196:	041a      	lsls	r2, r3, #16
  402198:	4b07      	ldr	r3, [pc, #28]	; (4021b8 <pll_config_init+0x68>)
  40219a:	4013      	ands	r3, r2
  40219c:	687a      	ldr	r2, [r7, #4]
  40219e:	b2d2      	uxtb	r2, r2
  4021a0:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4021a2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4021a6:	68fb      	ldr	r3, [r7, #12]
  4021a8:	601a      	str	r2, [r3, #0]
	}
}
  4021aa:	bf00      	nop
  4021ac:	3718      	adds	r7, #24
  4021ae:	46bd      	mov	sp, r7
  4021b0:	bd80      	pop	{r7, pc}
  4021b2:	bf00      	nop
  4021b4:	004020b1 	.word	0x004020b1
  4021b8:	07ff0000 	.word	0x07ff0000

004021bc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4021bc:	b580      	push	{r7, lr}
  4021be:	b082      	sub	sp, #8
  4021c0:	af00      	add	r7, sp, #0
  4021c2:	6078      	str	r0, [r7, #4]
  4021c4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4021c6:	683b      	ldr	r3, [r7, #0]
  4021c8:	2b00      	cmp	r3, #0
  4021ca:	d108      	bne.n	4021de <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4021cc:	4b09      	ldr	r3, [pc, #36]	; (4021f4 <pll_enable+0x38>)
  4021ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4021d0:	4a09      	ldr	r2, [pc, #36]	; (4021f8 <pll_enable+0x3c>)
  4021d2:	687b      	ldr	r3, [r7, #4]
  4021d4:	681b      	ldr	r3, [r3, #0]
  4021d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4021da:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4021dc:	e005      	b.n	4021ea <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4021de:	4a06      	ldr	r2, [pc, #24]	; (4021f8 <pll_enable+0x3c>)
  4021e0:	687b      	ldr	r3, [r7, #4]
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4021e8:	61d3      	str	r3, [r2, #28]
}
  4021ea:	bf00      	nop
  4021ec:	3708      	adds	r7, #8
  4021ee:	46bd      	mov	sp, r7
  4021f0:	bd80      	pop	{r7, pc}
  4021f2:	bf00      	nop
  4021f4:	00403355 	.word	0x00403355
  4021f8:	400e0600 	.word	0x400e0600

004021fc <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4021fc:	b580      	push	{r7, lr}
  4021fe:	b082      	sub	sp, #8
  402200:	af00      	add	r7, sp, #0
  402202:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  402204:	687b      	ldr	r3, [r7, #4]
  402206:	2b00      	cmp	r3, #0
  402208:	d103      	bne.n	402212 <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  40220a:	4b05      	ldr	r3, [pc, #20]	; (402220 <pll_is_locked+0x24>)
  40220c:	4798      	blx	r3
  40220e:	4603      	mov	r3, r0
  402210:	e002      	b.n	402218 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  402212:	4b04      	ldr	r3, [pc, #16]	; (402224 <pll_is_locked+0x28>)
  402214:	4798      	blx	r3
  402216:	4603      	mov	r3, r0
	}
}
  402218:	4618      	mov	r0, r3
  40221a:	3708      	adds	r7, #8
  40221c:	46bd      	mov	sp, r7
  40221e:	bd80      	pop	{r7, pc}
  402220:	00403371 	.word	0x00403371
  402224:	0040338d 	.word	0x0040338d

00402228 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  402228:	b580      	push	{r7, lr}
  40222a:	b082      	sub	sp, #8
  40222c:	af00      	add	r7, sp, #0
  40222e:	4603      	mov	r3, r0
  402230:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  402232:	79fb      	ldrb	r3, [r7, #7]
  402234:	3b03      	subs	r3, #3
  402236:	2b04      	cmp	r3, #4
  402238:	d808      	bhi.n	40224c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40223a:	79fb      	ldrb	r3, [r7, #7]
  40223c:	4618      	mov	r0, r3
  40223e:	4b06      	ldr	r3, [pc, #24]	; (402258 <pll_enable_source+0x30>)
  402240:	4798      	blx	r3
		osc_wait_ready(e_src);
  402242:	79fb      	ldrb	r3, [r7, #7]
  402244:	4618      	mov	r0, r3
  402246:	4b05      	ldr	r3, [pc, #20]	; (40225c <pll_enable_source+0x34>)
  402248:	4798      	blx	r3
		break;
  40224a:	e000      	b.n	40224e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40224c:	bf00      	nop
	}
}
  40224e:	bf00      	nop
  402250:	3708      	adds	r7, #8
  402252:	46bd      	mov	sp, r7
  402254:	bd80      	pop	{r7, pc}
  402256:	bf00      	nop
  402258:	00401fb9 	.word	0x00401fb9
  40225c:	00402125 	.word	0x00402125

00402260 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  402260:	b580      	push	{r7, lr}
  402262:	b082      	sub	sp, #8
  402264:	af00      	add	r7, sp, #0
  402266:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402268:	bf00      	nop
  40226a:	6878      	ldr	r0, [r7, #4]
  40226c:	4b04      	ldr	r3, [pc, #16]	; (402280 <pll_wait_for_lock+0x20>)
  40226e:	4798      	blx	r3
  402270:	4603      	mov	r3, r0
  402272:	2b00      	cmp	r3, #0
  402274:	d0f9      	beq.n	40226a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  402276:	2300      	movs	r3, #0
}
  402278:	4618      	mov	r0, r3
  40227a:	3708      	adds	r7, #8
  40227c:	46bd      	mov	sp, r7
  40227e:	bd80      	pop	{r7, pc}
  402280:	004021fd 	.word	0x004021fd

00402284 <sysclk_get_main_hz>:
{
  402284:	b580      	push	{r7, lr}
  402286:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402288:	2006      	movs	r0, #6
  40228a:	4b05      	ldr	r3, [pc, #20]	; (4022a0 <sysclk_get_main_hz+0x1c>)
  40228c:	4798      	blx	r3
  40228e:	4602      	mov	r2, r0
  402290:	4613      	mov	r3, r2
  402292:	009b      	lsls	r3, r3, #2
  402294:	4413      	add	r3, r2
  402296:	009a      	lsls	r2, r3, #2
  402298:	4413      	add	r3, r2
}
  40229a:	4618      	mov	r0, r3
  40229c:	bd80      	pop	{r7, pc}
  40229e:	bf00      	nop
  4022a0:	004020b1 	.word	0x004020b1

004022a4 <sysclk_get_cpu_hz>:
{
  4022a4:	b580      	push	{r7, lr}
  4022a6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4022a8:	4b02      	ldr	r3, [pc, #8]	; (4022b4 <sysclk_get_cpu_hz+0x10>)
  4022aa:	4798      	blx	r3
  4022ac:	4603      	mov	r3, r0
}
  4022ae:	4618      	mov	r0, r3
  4022b0:	bd80      	pop	{r7, pc}
  4022b2:	bf00      	nop
  4022b4:	00402285 	.word	0x00402285

004022b8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4022b8:	b590      	push	{r4, r7, lr}
  4022ba:	b083      	sub	sp, #12
  4022bc:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4022be:	4813      	ldr	r0, [pc, #76]	; (40230c <sysclk_init+0x54>)
  4022c0:	4b13      	ldr	r3, [pc, #76]	; (402310 <sysclk_init+0x58>)
  4022c2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4022c4:	2006      	movs	r0, #6
  4022c6:	4b13      	ldr	r3, [pc, #76]	; (402314 <sysclk_init+0x5c>)
  4022c8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4022ca:	1d38      	adds	r0, r7, #4
  4022cc:	2319      	movs	r3, #25
  4022ce:	2201      	movs	r2, #1
  4022d0:	2106      	movs	r1, #6
  4022d2:	4c11      	ldr	r4, [pc, #68]	; (402318 <sysclk_init+0x60>)
  4022d4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4022d6:	1d3b      	adds	r3, r7, #4
  4022d8:	2100      	movs	r1, #0
  4022da:	4618      	mov	r0, r3
  4022dc:	4b0f      	ldr	r3, [pc, #60]	; (40231c <sysclk_init+0x64>)
  4022de:	4798      	blx	r3
		pll_wait_for_lock(0);
  4022e0:	2000      	movs	r0, #0
  4022e2:	4b0f      	ldr	r3, [pc, #60]	; (402320 <sysclk_init+0x68>)
  4022e4:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4022e6:	2002      	movs	r0, #2
  4022e8:	4b0e      	ldr	r3, [pc, #56]	; (402324 <sysclk_init+0x6c>)
  4022ea:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4022ec:	2000      	movs	r0, #0
  4022ee:	4b0e      	ldr	r3, [pc, #56]	; (402328 <sysclk_init+0x70>)
  4022f0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4022f2:	4b0e      	ldr	r3, [pc, #56]	; (40232c <sysclk_init+0x74>)
  4022f4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4022f6:	4b0e      	ldr	r3, [pc, #56]	; (402330 <sysclk_init+0x78>)
  4022f8:	4798      	blx	r3
  4022fa:	4603      	mov	r3, r0
  4022fc:	4618      	mov	r0, r3
  4022fe:	4b04      	ldr	r3, [pc, #16]	; (402310 <sysclk_init+0x58>)
  402300:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  402302:	bf00      	nop
  402304:	370c      	adds	r7, #12
  402306:	46bd      	mov	sp, r7
  402308:	bd90      	pop	{r4, r7, pc}
  40230a:	bf00      	nop
  40230c:	07270e00 	.word	0x07270e00
  402310:	00403ad5 	.word	0x00403ad5
  402314:	00402229 	.word	0x00402229
  402318:	00402151 	.word	0x00402151
  40231c:	004021bd 	.word	0x004021bd
  402320:	00402261 	.word	0x00402261
  402324:	004030e5 	.word	0x004030e5
  402328:	00403161 	.word	0x00403161
  40232c:	0040396d 	.word	0x0040396d
  402330:	004022a5 	.word	0x004022a5

00402334 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  402334:	b480      	push	{r7}
  402336:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40233c:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  402340:	4b09      	ldr	r3, [pc, #36]	; (402368 <SCB_EnableICache+0x34>)
  402342:	2200      	movs	r2, #0
  402344:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  402348:	4a07      	ldr	r2, [pc, #28]	; (402368 <SCB_EnableICache+0x34>)
  40234a:	4b07      	ldr	r3, [pc, #28]	; (402368 <SCB_EnableICache+0x34>)
  40234c:	695b      	ldr	r3, [r3, #20]
  40234e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  402352:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  402354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402358:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  40235c:	bf00      	nop
  40235e:	46bd      	mov	sp, r7
  402360:	f85d 7b04 	ldr.w	r7, [sp], #4
  402364:	4770      	bx	lr
  402366:	bf00      	nop
  402368:	e000ed00 	.word	0xe000ed00

0040236c <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  40236c:	b480      	push	{r7}
  40236e:	b08b      	sub	sp, #44	; 0x2c
  402370:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  402372:	4b26      	ldr	r3, [pc, #152]	; (40240c <SCB_EnableDCache+0xa0>)
  402374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  402378:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  40237a:	69fb      	ldr	r3, [r7, #28]
  40237c:	0b5b      	lsrs	r3, r3, #13
  40237e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  402382:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  402384:	69fb      	ldr	r3, [r7, #28]
  402386:	f003 0307 	and.w	r3, r3, #7
  40238a:	3304      	adds	r3, #4
  40238c:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  40238e:	69fb      	ldr	r3, [r7, #28]
  402390:	08db      	lsrs	r3, r3, #3
  402392:	f3c3 0309 	ubfx	r3, r3, #0, #10
  402396:	617b      	str	r3, [r7, #20]
  402398:	697b      	ldr	r3, [r7, #20]
  40239a:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40239c:	68bb      	ldr	r3, [r7, #8]
  40239e:	fab3 f383 	clz	r3, r3
  4023a2:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  4023a4:	687b      	ldr	r3, [r7, #4]
  4023a6:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  4023a8:	f003 031f 	and.w	r3, r3, #31
  4023ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4023ae:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4023b2:	697b      	ldr	r3, [r7, #20]
  4023b4:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4023b6:	6a3a      	ldr	r2, [r7, #32]
  4023b8:	693b      	ldr	r3, [r7, #16]
  4023ba:	fa02 f303 	lsl.w	r3, r2, r3
  4023be:	4619      	mov	r1, r3
  4023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4023c2:	69bb      	ldr	r3, [r7, #24]
  4023c4:	fa02 f303 	lsl.w	r3, r2, r3
  4023c8:	430b      	orrs	r3, r1
  4023ca:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4023cc:	4a0f      	ldr	r2, [pc, #60]	; (40240c <SCB_EnableDCache+0xa0>)
  4023ce:	68fb      	ldr	r3, [r7, #12]
  4023d0:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4023d4:	6a3b      	ldr	r3, [r7, #32]
  4023d6:	1e5a      	subs	r2, r3, #1
  4023d8:	623a      	str	r2, [r7, #32]
  4023da:	2b00      	cmp	r3, #0
  4023dc:	d1eb      	bne.n	4023b6 <SCB_EnableDCache+0x4a>
        } while(sets--);
  4023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4023e0:	1e5a      	subs	r2, r3, #1
  4023e2:	627a      	str	r2, [r7, #36]	; 0x24
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d1e4      	bne.n	4023b2 <SCB_EnableDCache+0x46>
  4023e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4023ec:	4a07      	ldr	r2, [pc, #28]	; (40240c <SCB_EnableDCache+0xa0>)
  4023ee:	4b07      	ldr	r3, [pc, #28]	; (40240c <SCB_EnableDCache+0xa0>)
  4023f0:	695b      	ldr	r3, [r3, #20]
  4023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4023f6:	6153      	str	r3, [r2, #20]
  4023f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4023fc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  402400:	bf00      	nop
  402402:	372c      	adds	r7, #44	; 0x2c
  402404:	46bd      	mov	sp, r7
  402406:	f85d 7b04 	ldr.w	r7, [sp], #4
  40240a:	4770      	bx	lr
  40240c:	e000ed00 	.word	0xe000ed00

00402410 <sysclk_enable_peripheral_clock>:
{
  402410:	b580      	push	{r7, lr}
  402412:	b082      	sub	sp, #8
  402414:	af00      	add	r7, sp, #0
  402416:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402418:	6878      	ldr	r0, [r7, #4]
  40241a:	4b03      	ldr	r3, [pc, #12]	; (402428 <sysclk_enable_peripheral_clock+0x18>)
  40241c:	4798      	blx	r3
}
  40241e:	bf00      	nop
  402420:	3708      	adds	r7, #8
  402422:	46bd      	mov	sp, r7
  402424:	bd80      	pop	{r7, pc}
  402426:	bf00      	nop
  402428:	004033a9 	.word	0x004033a9

0040242c <ioport_init>:
{
  40242c:	b580      	push	{r7, lr}
  40242e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  402430:	200a      	movs	r0, #10
  402432:	4b08      	ldr	r3, [pc, #32]	; (402454 <ioport_init+0x28>)
  402434:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  402436:	200b      	movs	r0, #11
  402438:	4b06      	ldr	r3, [pc, #24]	; (402454 <ioport_init+0x28>)
  40243a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  40243c:	200c      	movs	r0, #12
  40243e:	4b05      	ldr	r3, [pc, #20]	; (402454 <ioport_init+0x28>)
  402440:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  402442:	2010      	movs	r0, #16
  402444:	4b03      	ldr	r3, [pc, #12]	; (402454 <ioport_init+0x28>)
  402446:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  402448:	2011      	movs	r0, #17
  40244a:	4b02      	ldr	r3, [pc, #8]	; (402454 <ioport_init+0x28>)
  40244c:	4798      	blx	r3
}
  40244e:	bf00      	nop
  402450:	bd80      	pop	{r7, pc}
  402452:	bf00      	nop
  402454:	00402411 	.word	0x00402411

00402458 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  402458:	b480      	push	{r7}
  40245a:	b08d      	sub	sp, #52	; 0x34
  40245c:	af00      	add	r7, sp, #0
  40245e:	6078      	str	r0, [r7, #4]
  402460:	6039      	str	r1, [r7, #0]
  402462:	687b      	ldr	r3, [r7, #4]
  402464:	62fb      	str	r3, [r7, #44]	; 0x2c
  402466:	683b      	ldr	r3, [r7, #0]
  402468:	62bb      	str	r3, [r7, #40]	; 0x28
  40246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40246c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402470:	095a      	lsrs	r2, r3, #5
  402472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402474:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402476:	6a3b      	ldr	r3, [r7, #32]
  402478:	f003 031f 	and.w	r3, r3, #31
  40247c:	2101      	movs	r1, #1
  40247e:	fa01 f303 	lsl.w	r3, r1, r3
  402482:	61fa      	str	r2, [r7, #28]
  402484:	61bb      	str	r3, [r7, #24]
  402486:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402488:	617b      	str	r3, [r7, #20]
  40248a:	69fb      	ldr	r3, [r7, #28]
  40248c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40248e:	693a      	ldr	r2, [r7, #16]
  402490:	4b37      	ldr	r3, [pc, #220]	; (402570 <ioport_set_pin_mode+0x118>)
  402492:	4413      	add	r3, r2
  402494:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  402496:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  402498:	697b      	ldr	r3, [r7, #20]
  40249a:	f003 0308 	and.w	r3, r3, #8
  40249e:	2b00      	cmp	r3, #0
  4024a0:	d003      	beq.n	4024aa <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4024a2:	68fb      	ldr	r3, [r7, #12]
  4024a4:	69ba      	ldr	r2, [r7, #24]
  4024a6:	665a      	str	r2, [r3, #100]	; 0x64
  4024a8:	e002      	b.n	4024b0 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4024aa:	68fb      	ldr	r3, [r7, #12]
  4024ac:	69ba      	ldr	r2, [r7, #24]
  4024ae:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4024b0:	697b      	ldr	r3, [r7, #20]
  4024b2:	f003 0310 	and.w	r3, r3, #16
  4024b6:	2b00      	cmp	r3, #0
  4024b8:	d004      	beq.n	4024c4 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4024ba:	68fb      	ldr	r3, [r7, #12]
  4024bc:	69ba      	ldr	r2, [r7, #24]
  4024be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4024c2:	e003      	b.n	4024cc <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4024c4:	68fb      	ldr	r3, [r7, #12]
  4024c6:	69ba      	ldr	r2, [r7, #24]
  4024c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  4024cc:	697b      	ldr	r3, [r7, #20]
  4024ce:	f003 0320 	and.w	r3, r3, #32
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	d003      	beq.n	4024de <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  4024d6:	68fb      	ldr	r3, [r7, #12]
  4024d8:	69ba      	ldr	r2, [r7, #24]
  4024da:	651a      	str	r2, [r3, #80]	; 0x50
  4024dc:	e002      	b.n	4024e4 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4024de:	68fb      	ldr	r3, [r7, #12]
  4024e0:	69ba      	ldr	r2, [r7, #24]
  4024e2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4024e4:	697b      	ldr	r3, [r7, #20]
  4024e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4024ea:	2b00      	cmp	r3, #0
  4024ec:	d003      	beq.n	4024f6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4024ee:	68fb      	ldr	r3, [r7, #12]
  4024f0:	69ba      	ldr	r2, [r7, #24]
  4024f2:	621a      	str	r2, [r3, #32]
  4024f4:	e002      	b.n	4024fc <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4024f6:	68fb      	ldr	r3, [r7, #12]
  4024f8:	69ba      	ldr	r2, [r7, #24]
  4024fa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4024fc:	697b      	ldr	r3, [r7, #20]
  4024fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402502:	2b00      	cmp	r3, #0
  402504:	d004      	beq.n	402510 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402506:	68fb      	ldr	r3, [r7, #12]
  402508:	69ba      	ldr	r2, [r7, #24]
  40250a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40250e:	e003      	b.n	402518 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402510:	68fb      	ldr	r3, [r7, #12]
  402512:	69ba      	ldr	r2, [r7, #24]
  402514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  402518:	697b      	ldr	r3, [r7, #20]
  40251a:	f003 0301 	and.w	r3, r3, #1
  40251e:	2b00      	cmp	r3, #0
  402520:	d006      	beq.n	402530 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  402522:	68fb      	ldr	r3, [r7, #12]
  402524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402526:	69bb      	ldr	r3, [r7, #24]
  402528:	431a      	orrs	r2, r3
  40252a:	68fb      	ldr	r3, [r7, #12]
  40252c:	671a      	str	r2, [r3, #112]	; 0x70
  40252e:	e006      	b.n	40253e <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402530:	68fb      	ldr	r3, [r7, #12]
  402532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402534:	69bb      	ldr	r3, [r7, #24]
  402536:	43db      	mvns	r3, r3
  402538:	401a      	ands	r2, r3
  40253a:	68fb      	ldr	r3, [r7, #12]
  40253c:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40253e:	697b      	ldr	r3, [r7, #20]
  402540:	f003 0302 	and.w	r3, r3, #2
  402544:	2b00      	cmp	r3, #0
  402546:	d006      	beq.n	402556 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  402548:	68fb      	ldr	r3, [r7, #12]
  40254a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40254c:	69bb      	ldr	r3, [r7, #24]
  40254e:	431a      	orrs	r2, r3
  402550:	68fb      	ldr	r3, [r7, #12]
  402552:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  402554:	e006      	b.n	402564 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402556:	68fb      	ldr	r3, [r7, #12]
  402558:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40255a:	69bb      	ldr	r3, [r7, #24]
  40255c:	43db      	mvns	r3, r3
  40255e:	401a      	ands	r2, r3
  402560:	68fb      	ldr	r3, [r7, #12]
  402562:	675a      	str	r2, [r3, #116]	; 0x74
  402564:	bf00      	nop
  402566:	3734      	adds	r7, #52	; 0x34
  402568:	46bd      	mov	sp, r7
  40256a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40256e:	4770      	bx	lr
  402570:	00200707 	.word	0x00200707

00402574 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402574:	b480      	push	{r7}
  402576:	b08d      	sub	sp, #52	; 0x34
  402578:	af00      	add	r7, sp, #0
  40257a:	6078      	str	r0, [r7, #4]
  40257c:	460b      	mov	r3, r1
  40257e:	70fb      	strb	r3, [r7, #3]
  402580:	687b      	ldr	r3, [r7, #4]
  402582:	62fb      	str	r3, [r7, #44]	; 0x2c
  402584:	78fb      	ldrb	r3, [r7, #3]
  402586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40258c:	627b      	str	r3, [r7, #36]	; 0x24
  40258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402590:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  402592:	6a3b      	ldr	r3, [r7, #32]
  402594:	095b      	lsrs	r3, r3, #5
  402596:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402598:	69fa      	ldr	r2, [r7, #28]
  40259a:	4b17      	ldr	r3, [pc, #92]	; (4025f8 <ioport_set_pin_dir+0x84>)
  40259c:	4413      	add	r3, r2
  40259e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4025a0:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4025a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025a6:	2b01      	cmp	r3, #1
  4025a8:	d109      	bne.n	4025be <ioport_set_pin_dir+0x4a>
  4025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025ac:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4025ae:	697b      	ldr	r3, [r7, #20]
  4025b0:	f003 031f 	and.w	r3, r3, #31
  4025b4:	2201      	movs	r2, #1
  4025b6:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4025b8:	69bb      	ldr	r3, [r7, #24]
  4025ba:	611a      	str	r2, [r3, #16]
  4025bc:	e00c      	b.n	4025d8 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4025be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d108      	bne.n	4025d8 <ioport_set_pin_dir+0x64>
  4025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025c8:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4025ca:	693b      	ldr	r3, [r7, #16]
  4025cc:	f003 031f 	and.w	r3, r3, #31
  4025d0:	2201      	movs	r2, #1
  4025d2:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4025d4:	69bb      	ldr	r3, [r7, #24]
  4025d6:	615a      	str	r2, [r3, #20]
  4025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4025da:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4025dc:	68fb      	ldr	r3, [r7, #12]
  4025de:	f003 031f 	and.w	r3, r3, #31
  4025e2:	2201      	movs	r2, #1
  4025e4:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025e6:	69bb      	ldr	r3, [r7, #24]
  4025e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4025ec:	bf00      	nop
  4025ee:	3734      	adds	r7, #52	; 0x34
  4025f0:	46bd      	mov	sp, r7
  4025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f6:	4770      	bx	lr
  4025f8:	00200707 	.word	0x00200707

004025fc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4025fc:	b480      	push	{r7}
  4025fe:	b08b      	sub	sp, #44	; 0x2c
  402600:	af00      	add	r7, sp, #0
  402602:	6078      	str	r0, [r7, #4]
  402604:	460b      	mov	r3, r1
  402606:	70fb      	strb	r3, [r7, #3]
  402608:	687b      	ldr	r3, [r7, #4]
  40260a:	627b      	str	r3, [r7, #36]	; 0x24
  40260c:	78fb      	ldrb	r3, [r7, #3]
  40260e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  402612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402614:	61fb      	str	r3, [r7, #28]
  402616:	69fb      	ldr	r3, [r7, #28]
  402618:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40261a:	69bb      	ldr	r3, [r7, #24]
  40261c:	095b      	lsrs	r3, r3, #5
  40261e:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402620:	697a      	ldr	r2, [r7, #20]
  402622:	4b10      	ldr	r3, [pc, #64]	; (402664 <ioport_set_pin_level+0x68>)
  402624:	4413      	add	r3, r2
  402626:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402628:	613b      	str	r3, [r7, #16]

	if (level) {
  40262a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40262e:	2b00      	cmp	r3, #0
  402630:	d009      	beq.n	402646 <ioport_set_pin_level+0x4a>
  402632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402634:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402636:	68fb      	ldr	r3, [r7, #12]
  402638:	f003 031f 	and.w	r3, r3, #31
  40263c:	2201      	movs	r2, #1
  40263e:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402640:	693b      	ldr	r3, [r7, #16]
  402642:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  402644:	e008      	b.n	402658 <ioport_set_pin_level+0x5c>
  402646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402648:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40264a:	68bb      	ldr	r3, [r7, #8]
  40264c:	f003 031f 	and.w	r3, r3, #31
  402650:	2201      	movs	r2, #1
  402652:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402654:	693b      	ldr	r3, [r7, #16]
  402656:	635a      	str	r2, [r3, #52]	; 0x34
  402658:	bf00      	nop
  40265a:	372c      	adds	r7, #44	; 0x2c
  40265c:	46bd      	mov	sp, r7
  40265e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402662:	4770      	bx	lr
  402664:	00200707 	.word	0x00200707

00402668 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  402668:	b480      	push	{r7}
  40266a:	b08d      	sub	sp, #52	; 0x34
  40266c:	af00      	add	r7, sp, #0
  40266e:	6078      	str	r0, [r7, #4]
  402670:	460b      	mov	r3, r1
  402672:	70fb      	strb	r3, [r7, #3]
  402674:	687b      	ldr	r3, [r7, #4]
  402676:	62fb      	str	r3, [r7, #44]	; 0x2c
  402678:	78fb      	ldrb	r3, [r7, #3]
  40267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402680:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402684:	095a      	lsrs	r2, r3, #5
  402686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402688:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40268a:	6a3b      	ldr	r3, [r7, #32]
  40268c:	f003 031f 	and.w	r3, r3, #31
  402690:	2101      	movs	r1, #1
  402692:	fa01 f303 	lsl.w	r3, r1, r3
  402696:	61fa      	str	r2, [r7, #28]
  402698:	61bb      	str	r3, [r7, #24]
  40269a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40269e:	75fb      	strb	r3, [r7, #23]
  4026a0:	69fb      	ldr	r3, [r7, #28]
  4026a2:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4026a4:	693a      	ldr	r2, [r7, #16]
  4026a6:	4b23      	ldr	r3, [pc, #140]	; (402734 <ioport_set_pin_sense_mode+0xcc>)
  4026a8:	4413      	add	r3, r2
  4026aa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4026ac:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4026ae:	7dfb      	ldrb	r3, [r7, #23]
  4026b0:	3b01      	subs	r3, #1
  4026b2:	2b03      	cmp	r3, #3
  4026b4:	d82e      	bhi.n	402714 <ioport_set_pin_sense_mode+0xac>
  4026b6:	a201      	add	r2, pc, #4	; (adr r2, 4026bc <ioport_set_pin_sense_mode+0x54>)
  4026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4026bc:	004026f1 	.word	0x004026f1
  4026c0:	00402703 	.word	0x00402703
  4026c4:	004026cd 	.word	0x004026cd
  4026c8:	004026df 	.word	0x004026df
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  4026cc:	68fb      	ldr	r3, [r7, #12]
  4026ce:	69ba      	ldr	r2, [r7, #24]
  4026d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  4026d4:	68fb      	ldr	r3, [r7, #12]
  4026d6:	69ba      	ldr	r2, [r7, #24]
  4026d8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4026dc:	e01f      	b.n	40271e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4026de:	68fb      	ldr	r3, [r7, #12]
  4026e0:	69ba      	ldr	r2, [r7, #24]
  4026e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4026e6:	68fb      	ldr	r3, [r7, #12]
  4026e8:	69ba      	ldr	r2, [r7, #24]
  4026ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4026ee:	e016      	b.n	40271e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4026f0:	68fb      	ldr	r3, [r7, #12]
  4026f2:	69ba      	ldr	r2, [r7, #24]
  4026f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4026f8:	68fb      	ldr	r3, [r7, #12]
  4026fa:	69ba      	ldr	r2, [r7, #24]
  4026fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402700:	e00d      	b.n	40271e <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402702:	68fb      	ldr	r3, [r7, #12]
  402704:	69ba      	ldr	r2, [r7, #24]
  402706:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40270a:	68fb      	ldr	r3, [r7, #12]
  40270c:	69ba      	ldr	r2, [r7, #24]
  40270e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402712:	e004      	b.n	40271e <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  402714:	68fb      	ldr	r3, [r7, #12]
  402716:	69ba      	ldr	r2, [r7, #24]
  402718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  40271c:	e003      	b.n	402726 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40271e:	68fb      	ldr	r3, [r7, #12]
  402720:	69ba      	ldr	r2, [r7, #24]
  402722:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402726:	bf00      	nop
  402728:	3734      	adds	r7, #52	; 0x34
  40272a:	46bd      	mov	sp, r7
  40272c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402730:	4770      	bx	lr
  402732:	bf00      	nop
  402734:	00200707 	.word	0x00200707

00402738 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  402738:	b480      	push	{r7}
  40273a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  40273c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402740:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  402744:	4a0c      	ldr	r2, [pc, #48]	; (402778 <tcm_disable+0x40>)
  402746:	4b0c      	ldr	r3, [pc, #48]	; (402778 <tcm_disable+0x40>)
  402748:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  40274c:	f023 0301 	bic.w	r3, r3, #1
  402750:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  402754:	4a08      	ldr	r2, [pc, #32]	; (402778 <tcm_disable+0x40>)
  402756:	4b08      	ldr	r3, [pc, #32]	; (402778 <tcm_disable+0x40>)
  402758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  40275c:	f023 0301 	bic.w	r3, r3, #1
  402760:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  402764:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  402768:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  40276c:	bf00      	nop
  40276e:	46bd      	mov	sp, r7
  402770:	f85d 7b04 	ldr.w	r7, [sp], #4
  402774:	4770      	bx	lr
  402776:	bf00      	nop
  402778:	e000ed00 	.word	0xe000ed00

0040277c <board_init>:
#endif

void board_init(void)
{
  40277c:	b598      	push	{r3, r4, r7, lr}
  40277e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402780:	4b4c      	ldr	r3, [pc, #304]	; (4028b4 <board_init+0x138>)
  402782:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402786:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  402788:	4b4b      	ldr	r3, [pc, #300]	; (4028b8 <board_init+0x13c>)
  40278a:	4798      	blx	r3
	SCB_EnableDCache();
  40278c:	4b4b      	ldr	r3, [pc, #300]	; (4028bc <board_init+0x140>)
  40278e:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402790:	4b4b      	ldr	r3, [pc, #300]	; (4028c0 <board_init+0x144>)
  402792:	4a4c      	ldr	r2, [pc, #304]	; (4028c4 <board_init+0x148>)
  402794:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  402796:	4b4a      	ldr	r3, [pc, #296]	; (4028c0 <board_init+0x144>)
  402798:	4a4b      	ldr	r2, [pc, #300]	; (4028c8 <board_init+0x14c>)
  40279a:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  40279c:	4b4b      	ldr	r3, [pc, #300]	; (4028cc <board_init+0x150>)
  40279e:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4027a0:	4b4b      	ldr	r3, [pc, #300]	; (4028d0 <board_init+0x154>)
  4027a2:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4027a4:	2101      	movs	r1, #1
  4027a6:	2048      	movs	r0, #72	; 0x48
  4027a8:	4b4a      	ldr	r3, [pc, #296]	; (4028d4 <board_init+0x158>)
  4027aa:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4027ac:	2101      	movs	r1, #1
  4027ae:	2048      	movs	r0, #72	; 0x48
  4027b0:	4b49      	ldr	r3, [pc, #292]	; (4028d8 <board_init+0x15c>)
  4027b2:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4027b4:	2100      	movs	r1, #0
  4027b6:	200b      	movs	r0, #11
  4027b8:	4b46      	ldr	r3, [pc, #280]	; (4028d4 <board_init+0x158>)
  4027ba:	4798      	blx	r3
  4027bc:	2188      	movs	r1, #136	; 0x88
  4027be:	200b      	movs	r0, #11
  4027c0:	4b46      	ldr	r3, [pc, #280]	; (4028dc <board_init+0x160>)
  4027c2:	4798      	blx	r3
  4027c4:	2102      	movs	r1, #2
  4027c6:	200b      	movs	r0, #11
  4027c8:	4b45      	ldr	r3, [pc, #276]	; (4028e0 <board_init+0x164>)
  4027ca:	4798      	blx	r3
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4027cc:	2300      	movs	r3, #0
  4027ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4027d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4027d6:	4843      	ldr	r0, [pc, #268]	; (4028e4 <board_init+0x168>)
  4027d8:	4c43      	ldr	r4, [pc, #268]	; (4028e8 <board_init+0x16c>)
  4027da:	47a0      	blx	r4
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  4027dc:	2300      	movs	r3, #0
  4027de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4027e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4027e6:	483f      	ldr	r0, [pc, #252]	; (4028e4 <board_init+0x168>)
  4027e8:	4c3f      	ldr	r4, [pc, #252]	; (4028e8 <board_init+0x16c>)
  4027ea:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4027ec:	2301      	movs	r3, #1
  4027ee:	22ff      	movs	r2, #255	; 0xff
  4027f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4027f4:	483b      	ldr	r0, [pc, #236]	; (4028e4 <board_init+0x168>)
  4027f6:	4c3c      	ldr	r4, [pc, #240]	; (4028e8 <board_init+0x16c>)
  4027f8:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4027fa:	2301      	movs	r3, #1
  4027fc:	223f      	movs	r2, #63	; 0x3f
  4027fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402802:	483a      	ldr	r0, [pc, #232]	; (4028ec <board_init+0x170>)
  402804:	4c38      	ldr	r4, [pc, #224]	; (4028e8 <board_init+0x16c>)
  402806:	47a0      	blx	r4
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  402808:	2301      	movs	r3, #1
  40280a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  40280e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402812:	4837      	ldr	r0, [pc, #220]	; (4028f0 <board_init+0x174>)
  402814:	4c34      	ldr	r4, [pc, #208]	; (4028e8 <board_init+0x16c>)
  402816:	47a0      	blx	r4
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  402818:	2301      	movs	r3, #1
  40281a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40281e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402822:	4830      	ldr	r0, [pc, #192]	; (4028e4 <board_init+0x168>)
  402824:	4c30      	ldr	r4, [pc, #192]	; (4028e8 <board_init+0x16c>)
  402826:	47a0      	blx	r4
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  402828:	2301      	movs	r3, #1
  40282a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40282e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402832:	482c      	ldr	r0, [pc, #176]	; (4028e4 <board_init+0x168>)
  402834:	4c2c      	ldr	r4, [pc, #176]	; (4028e8 <board_init+0x16c>)
  402836:	47a0      	blx	r4
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  402838:	2301      	movs	r3, #1
  40283a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40283e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402842:	482c      	ldr	r0, [pc, #176]	; (4028f4 <board_init+0x178>)
  402844:	4c28      	ldr	r4, [pc, #160]	; (4028e8 <board_init+0x16c>)
  402846:	47a0      	blx	r4
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  402848:	2300      	movs	r3, #0
  40284a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40284e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402852:	4824      	ldr	r0, [pc, #144]	; (4028e4 <board_init+0x168>)
  402854:	4c24      	ldr	r4, [pc, #144]	; (4028e8 <board_init+0x16c>)
  402856:	47a0      	blx	r4
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  402858:	f44f 7100 	mov.w	r1, #512	; 0x200
  40285c:	4821      	ldr	r0, [pc, #132]	; (4028e4 <board_init+0x168>)
  40285e:	4b26      	ldr	r3, [pc, #152]	; (4028f8 <board_init+0x17c>)
  402860:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  402862:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402866:	2074      	movs	r0, #116	; 0x74
  402868:	4b24      	ldr	r3, [pc, #144]	; (4028fc <board_init+0x180>)
  40286a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  40286c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402870:	2075      	movs	r0, #117	; 0x75
  402872:	4b22      	ldr	r3, [pc, #136]	; (4028fc <board_init+0x180>)
  402874:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  402876:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40287a:	2076      	movs	r0, #118	; 0x76
  40287c:	4b1f      	ldr	r3, [pc, #124]	; (4028fc <board_init+0x180>)
  40287e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  402880:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402884:	207b      	movs	r0, #123	; 0x7b
  402886:	4b1d      	ldr	r3, [pc, #116]	; (4028fc <board_init+0x180>)
  402888:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  40288a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40288e:	2018      	movs	r0, #24
  402890:	4b1a      	ldr	r3, [pc, #104]	; (4028fc <board_init+0x180>)
  402892:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  402894:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402898:	2006      	movs	r0, #6
  40289a:	4b18      	ldr	r3, [pc, #96]	; (4028fc <board_init+0x180>)
  40289c:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  40289e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4028a2:	2053      	movs	r0, #83	; 0x53
  4028a4:	4b15      	ldr	r3, [pc, #84]	; (4028fc <board_init+0x180>)
  4028a6:	4798      	blx	r3
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  4028a8:	2053      	movs	r0, #83	; 0x53
  4028aa:	4b15      	ldr	r3, [pc, #84]	; (402900 <board_init+0x184>)
  4028ac:	4798      	blx	r3

#endif
}
  4028ae:	bf00      	nop
  4028b0:	bd98      	pop	{r3, r4, r7, pc}
  4028b2:	bf00      	nop
  4028b4:	400e1850 	.word	0x400e1850
  4028b8:	00402335 	.word	0x00402335
  4028bc:	0040236d 	.word	0x0040236d
  4028c0:	400e0c00 	.word	0x400e0c00
  4028c4:	5a00080c 	.word	0x5a00080c
  4028c8:	5a00070c 	.word	0x5a00070c
  4028cc:	00402739 	.word	0x00402739
  4028d0:	0040242d 	.word	0x0040242d
  4028d4:	00402575 	.word	0x00402575
  4028d8:	004025fd 	.word	0x004025fd
  4028dc:	00402459 	.word	0x00402459
  4028e0:	00402669 	.word	0x00402669
  4028e4:	400e1200 	.word	0x400e1200
  4028e8:	00402b41 	.word	0x00402b41
  4028ec:	400e1600 	.word	0x400e1600
  4028f0:	400e0e00 	.word	0x400e0e00
  4028f4:	400e1400 	.word	0x400e1400
  4028f8:	00402931 	.word	0x00402931
  4028fc:	00402d41 	.word	0x00402d41
  402900:	00402ce1 	.word	0x00402ce1

00402904 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  402904:	b480      	push	{r7}
  402906:	b085      	sub	sp, #20
  402908:	af00      	add	r7, sp, #0
  40290a:	60f8      	str	r0, [r7, #12]
  40290c:	60b9      	str	r1, [r7, #8]
  40290e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402910:	687b      	ldr	r3, [r7, #4]
  402912:	2b00      	cmp	r3, #0
  402914:	d003      	beq.n	40291e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  402916:	68fb      	ldr	r3, [r7, #12]
  402918:	68ba      	ldr	r2, [r7, #8]
  40291a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  40291c:	e002      	b.n	402924 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40291e:	68fb      	ldr	r3, [r7, #12]
  402920:	68ba      	ldr	r2, [r7, #8]
  402922:	661a      	str	r2, [r3, #96]	; 0x60
}
  402924:	bf00      	nop
  402926:	3714      	adds	r7, #20
  402928:	46bd      	mov	sp, r7
  40292a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40292e:	4770      	bx	lr

00402930 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  402930:	b480      	push	{r7}
  402932:	b083      	sub	sp, #12
  402934:	af00      	add	r7, sp, #0
  402936:	6078      	str	r0, [r7, #4]
  402938:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40293a:	687b      	ldr	r3, [r7, #4]
  40293c:	683a      	ldr	r2, [r7, #0]
  40293e:	631a      	str	r2, [r3, #48]	; 0x30
}
  402940:	bf00      	nop
  402942:	370c      	adds	r7, #12
  402944:	46bd      	mov	sp, r7
  402946:	f85d 7b04 	ldr.w	r7, [sp], #4
  40294a:	4770      	bx	lr

0040294c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40294c:	b480      	push	{r7}
  40294e:	b087      	sub	sp, #28
  402950:	af00      	add	r7, sp, #0
  402952:	60f8      	str	r0, [r7, #12]
  402954:	60b9      	str	r1, [r7, #8]
  402956:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402958:	68fb      	ldr	r3, [r7, #12]
  40295a:	687a      	ldr	r2, [r7, #4]
  40295c:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40295e:	68bb      	ldr	r3, [r7, #8]
  402960:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402964:	d04a      	beq.n	4029fc <pio_set_peripheral+0xb0>
  402966:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40296a:	d808      	bhi.n	40297e <pio_set_peripheral+0x32>
  40296c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402970:	d016      	beq.n	4029a0 <pio_set_peripheral+0x54>
  402972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402976:	d02c      	beq.n	4029d2 <pio_set_peripheral+0x86>
  402978:	2b00      	cmp	r3, #0
  40297a:	d069      	beq.n	402a50 <pio_set_peripheral+0x104>
  40297c:	e064      	b.n	402a48 <pio_set_peripheral+0xfc>
  40297e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402982:	d065      	beq.n	402a50 <pio_set_peripheral+0x104>
  402984:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402988:	d803      	bhi.n	402992 <pio_set_peripheral+0x46>
  40298a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40298e:	d04a      	beq.n	402a26 <pio_set_peripheral+0xda>
  402990:	e05a      	b.n	402a48 <pio_set_peripheral+0xfc>
  402992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402996:	d05b      	beq.n	402a50 <pio_set_peripheral+0x104>
  402998:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40299c:	d058      	beq.n	402a50 <pio_set_peripheral+0x104>
  40299e:	e053      	b.n	402a48 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4029a0:	68fb      	ldr	r3, [r7, #12]
  4029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4029a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4029a6:	68fb      	ldr	r3, [r7, #12]
  4029a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4029aa:	687b      	ldr	r3, [r7, #4]
  4029ac:	43d9      	mvns	r1, r3
  4029ae:	697b      	ldr	r3, [r7, #20]
  4029b0:	400b      	ands	r3, r1
  4029b2:	401a      	ands	r2, r3
  4029b4:	68fb      	ldr	r3, [r7, #12]
  4029b6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4029b8:	68fb      	ldr	r3, [r7, #12]
  4029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4029bc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4029be:	68fb      	ldr	r3, [r7, #12]
  4029c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029c2:	687b      	ldr	r3, [r7, #4]
  4029c4:	43d9      	mvns	r1, r3
  4029c6:	697b      	ldr	r3, [r7, #20]
  4029c8:	400b      	ands	r3, r1
  4029ca:	401a      	ands	r2, r3
  4029cc:	68fb      	ldr	r3, [r7, #12]
  4029ce:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4029d0:	e03a      	b.n	402a48 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4029d2:	68fb      	ldr	r3, [r7, #12]
  4029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4029d6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4029d8:	687a      	ldr	r2, [r7, #4]
  4029da:	697b      	ldr	r3, [r7, #20]
  4029dc:	431a      	orrs	r2, r3
  4029de:	68fb      	ldr	r3, [r7, #12]
  4029e0:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4029e2:	68fb      	ldr	r3, [r7, #12]
  4029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4029e6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4029e8:	68fb      	ldr	r3, [r7, #12]
  4029ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029ec:	687b      	ldr	r3, [r7, #4]
  4029ee:	43d9      	mvns	r1, r3
  4029f0:	697b      	ldr	r3, [r7, #20]
  4029f2:	400b      	ands	r3, r1
  4029f4:	401a      	ands	r2, r3
  4029f6:	68fb      	ldr	r3, [r7, #12]
  4029f8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4029fa:	e025      	b.n	402a48 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4029fc:	68fb      	ldr	r3, [r7, #12]
  4029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402a00:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402a02:	68fb      	ldr	r3, [r7, #12]
  402a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402a06:	687b      	ldr	r3, [r7, #4]
  402a08:	43d9      	mvns	r1, r3
  402a0a:	697b      	ldr	r3, [r7, #20]
  402a0c:	400b      	ands	r3, r1
  402a0e:	401a      	ands	r2, r3
  402a10:	68fb      	ldr	r3, [r7, #12]
  402a12:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402a14:	68fb      	ldr	r3, [r7, #12]
  402a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402a18:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402a1a:	687a      	ldr	r2, [r7, #4]
  402a1c:	697b      	ldr	r3, [r7, #20]
  402a1e:	431a      	orrs	r2, r3
  402a20:	68fb      	ldr	r3, [r7, #12]
  402a22:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402a24:	e010      	b.n	402a48 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402a26:	68fb      	ldr	r3, [r7, #12]
  402a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402a2a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402a2c:	687a      	ldr	r2, [r7, #4]
  402a2e:	697b      	ldr	r3, [r7, #20]
  402a30:	431a      	orrs	r2, r3
  402a32:	68fb      	ldr	r3, [r7, #12]
  402a34:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402a36:	68fb      	ldr	r3, [r7, #12]
  402a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  402a3a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402a3c:	687a      	ldr	r2, [r7, #4]
  402a3e:	697b      	ldr	r3, [r7, #20]
  402a40:	431a      	orrs	r2, r3
  402a42:	68fb      	ldr	r3, [r7, #12]
  402a44:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  402a46:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402a48:	68fb      	ldr	r3, [r7, #12]
  402a4a:	687a      	ldr	r2, [r7, #4]
  402a4c:	605a      	str	r2, [r3, #4]
  402a4e:	e000      	b.n	402a52 <pio_set_peripheral+0x106>
		return;
  402a50:	bf00      	nop
}
  402a52:	371c      	adds	r7, #28
  402a54:	46bd      	mov	sp, r7
  402a56:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a5a:	4770      	bx	lr

00402a5c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  402a5c:	b580      	push	{r7, lr}
  402a5e:	b084      	sub	sp, #16
  402a60:	af00      	add	r7, sp, #0
  402a62:	60f8      	str	r0, [r7, #12]
  402a64:	60b9      	str	r1, [r7, #8]
  402a66:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  402a68:	68b9      	ldr	r1, [r7, #8]
  402a6a:	68f8      	ldr	r0, [r7, #12]
  402a6c:	4b19      	ldr	r3, [pc, #100]	; (402ad4 <pio_set_input+0x78>)
  402a6e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  402a70:	687b      	ldr	r3, [r7, #4]
  402a72:	f003 0301 	and.w	r3, r3, #1
  402a76:	461a      	mov	r2, r3
  402a78:	68b9      	ldr	r1, [r7, #8]
  402a7a:	68f8      	ldr	r0, [r7, #12]
  402a7c:	4b16      	ldr	r3, [pc, #88]	; (402ad8 <pio_set_input+0x7c>)
  402a7e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402a80:	687b      	ldr	r3, [r7, #4]
  402a82:	f003 030a 	and.w	r3, r3, #10
  402a86:	2b00      	cmp	r3, #0
  402a88:	d003      	beq.n	402a92 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  402a8a:	68fb      	ldr	r3, [r7, #12]
  402a8c:	68ba      	ldr	r2, [r7, #8]
  402a8e:	621a      	str	r2, [r3, #32]
  402a90:	e002      	b.n	402a98 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402a92:	68fb      	ldr	r3, [r7, #12]
  402a94:	68ba      	ldr	r2, [r7, #8]
  402a96:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402a98:	687b      	ldr	r3, [r7, #4]
  402a9a:	f003 0302 	and.w	r3, r3, #2
  402a9e:	2b00      	cmp	r3, #0
  402aa0:	d004      	beq.n	402aac <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  402aa2:	68fb      	ldr	r3, [r7, #12]
  402aa4:	68ba      	ldr	r2, [r7, #8]
  402aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  402aaa:	e008      	b.n	402abe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402aac:	687b      	ldr	r3, [r7, #4]
  402aae:	f003 0308 	and.w	r3, r3, #8
  402ab2:	2b00      	cmp	r3, #0
  402ab4:	d003      	beq.n	402abe <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  402ab6:	68fb      	ldr	r3, [r7, #12]
  402ab8:	68ba      	ldr	r2, [r7, #8]
  402aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402abe:	68fb      	ldr	r3, [r7, #12]
  402ac0:	68ba      	ldr	r2, [r7, #8]
  402ac2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  402ac4:	68fb      	ldr	r3, [r7, #12]
  402ac6:	68ba      	ldr	r2, [r7, #8]
  402ac8:	601a      	str	r2, [r3, #0]
}
  402aca:	bf00      	nop
  402acc:	3710      	adds	r7, #16
  402ace:	46bd      	mov	sp, r7
  402ad0:	bd80      	pop	{r7, pc}
  402ad2:	bf00      	nop
  402ad4:	00402c95 	.word	0x00402c95
  402ad8:	00402905 	.word	0x00402905

00402adc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402adc:	b580      	push	{r7, lr}
  402ade:	b084      	sub	sp, #16
  402ae0:	af00      	add	r7, sp, #0
  402ae2:	60f8      	str	r0, [r7, #12]
  402ae4:	60b9      	str	r1, [r7, #8]
  402ae6:	607a      	str	r2, [r7, #4]
  402ae8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  402aea:	68b9      	ldr	r1, [r7, #8]
  402aec:	68f8      	ldr	r0, [r7, #12]
  402aee:	4b12      	ldr	r3, [pc, #72]	; (402b38 <pio_set_output+0x5c>)
  402af0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  402af2:	69ba      	ldr	r2, [r7, #24]
  402af4:	68b9      	ldr	r1, [r7, #8]
  402af6:	68f8      	ldr	r0, [r7, #12]
  402af8:	4b10      	ldr	r3, [pc, #64]	; (402b3c <pio_set_output+0x60>)
  402afa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402afc:	683b      	ldr	r3, [r7, #0]
  402afe:	2b00      	cmp	r3, #0
  402b00:	d003      	beq.n	402b0a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  402b02:	68fb      	ldr	r3, [r7, #12]
  402b04:	68ba      	ldr	r2, [r7, #8]
  402b06:	651a      	str	r2, [r3, #80]	; 0x50
  402b08:	e002      	b.n	402b10 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402b0a:	68fb      	ldr	r3, [r7, #12]
  402b0c:	68ba      	ldr	r2, [r7, #8]
  402b0e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402b10:	687b      	ldr	r3, [r7, #4]
  402b12:	2b00      	cmp	r3, #0
  402b14:	d003      	beq.n	402b1e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  402b16:	68fb      	ldr	r3, [r7, #12]
  402b18:	68ba      	ldr	r2, [r7, #8]
  402b1a:	631a      	str	r2, [r3, #48]	; 0x30
  402b1c:	e002      	b.n	402b24 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402b1e:	68fb      	ldr	r3, [r7, #12]
  402b20:	68ba      	ldr	r2, [r7, #8]
  402b22:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402b24:	68fb      	ldr	r3, [r7, #12]
  402b26:	68ba      	ldr	r2, [r7, #8]
  402b28:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  402b2a:	68fb      	ldr	r3, [r7, #12]
  402b2c:	68ba      	ldr	r2, [r7, #8]
  402b2e:	601a      	str	r2, [r3, #0]
}
  402b30:	bf00      	nop
  402b32:	3710      	adds	r7, #16
  402b34:	46bd      	mov	sp, r7
  402b36:	bd80      	pop	{r7, pc}
  402b38:	00402c95 	.word	0x00402c95
  402b3c:	00402905 	.word	0x00402905

00402b40 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  402b40:	b590      	push	{r4, r7, lr}
  402b42:	b087      	sub	sp, #28
  402b44:	af02      	add	r7, sp, #8
  402b46:	60f8      	str	r0, [r7, #12]
  402b48:	60b9      	str	r1, [r7, #8]
  402b4a:	607a      	str	r2, [r7, #4]
  402b4c:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  402b4e:	68bb      	ldr	r3, [r7, #8]
  402b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402b54:	d016      	beq.n	402b84 <pio_configure+0x44>
  402b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402b5a:	d809      	bhi.n	402b70 <pio_configure+0x30>
  402b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402b60:	d010      	beq.n	402b84 <pio_configure+0x44>
  402b62:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402b66:	d00d      	beq.n	402b84 <pio_configure+0x44>
  402b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402b6c:	d00a      	beq.n	402b84 <pio_configure+0x44>
  402b6e:	e03d      	b.n	402bec <pio_configure+0xac>
  402b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402b74:	d01a      	beq.n	402bac <pio_configure+0x6c>
  402b76:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402b7a:	d017      	beq.n	402bac <pio_configure+0x6c>
  402b7c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402b80:	d00e      	beq.n	402ba0 <pio_configure+0x60>
  402b82:	e033      	b.n	402bec <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402b84:	687a      	ldr	r2, [r7, #4]
  402b86:	68b9      	ldr	r1, [r7, #8]
  402b88:	68f8      	ldr	r0, [r7, #12]
  402b8a:	4b1c      	ldr	r3, [pc, #112]	; (402bfc <pio_configure+0xbc>)
  402b8c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  402b8e:	683b      	ldr	r3, [r7, #0]
  402b90:	f003 0301 	and.w	r3, r3, #1
  402b94:	461a      	mov	r2, r3
  402b96:	6879      	ldr	r1, [r7, #4]
  402b98:	68f8      	ldr	r0, [r7, #12]
  402b9a:	4b19      	ldr	r3, [pc, #100]	; (402c00 <pio_configure+0xc0>)
  402b9c:	4798      	blx	r3
		break;
  402b9e:	e027      	b.n	402bf0 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402ba0:	683a      	ldr	r2, [r7, #0]
  402ba2:	6879      	ldr	r1, [r7, #4]
  402ba4:	68f8      	ldr	r0, [r7, #12]
  402ba6:	4b17      	ldr	r3, [pc, #92]	; (402c04 <pio_configure+0xc4>)
  402ba8:	4798      	blx	r3
		break;
  402baa:	e021      	b.n	402bf0 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402bac:	68bb      	ldr	r3, [r7, #8]
  402bae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402bb2:	bf0c      	ite	eq
  402bb4:	2301      	moveq	r3, #1
  402bb6:	2300      	movne	r3, #0
  402bb8:	b2db      	uxtb	r3, r3
  402bba:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  402bbc:	683b      	ldr	r3, [r7, #0]
  402bbe:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402bc2:	2b00      	cmp	r3, #0
  402bc4:	bf14      	ite	ne
  402bc6:	2301      	movne	r3, #1
  402bc8:	2300      	moveq	r3, #0
  402bca:	b2db      	uxtb	r3, r3
  402bcc:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  402bce:	683b      	ldr	r3, [r7, #0]
  402bd0:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402bd4:	2b00      	cmp	r3, #0
  402bd6:	bf14      	ite	ne
  402bd8:	2301      	movne	r3, #1
  402bda:	2300      	moveq	r3, #0
  402bdc:	b2db      	uxtb	r3, r3
  402bde:	9300      	str	r3, [sp, #0]
  402be0:	460b      	mov	r3, r1
  402be2:	6879      	ldr	r1, [r7, #4]
  402be4:	68f8      	ldr	r0, [r7, #12]
  402be6:	4c08      	ldr	r4, [pc, #32]	; (402c08 <pio_configure+0xc8>)
  402be8:	47a0      	blx	r4
		break;
  402bea:	e001      	b.n	402bf0 <pio_configure+0xb0>

	default:
		return 0;
  402bec:	2300      	movs	r3, #0
  402bee:	e000      	b.n	402bf2 <pio_configure+0xb2>
	}

	return 1;
  402bf0:	2301      	movs	r3, #1
}
  402bf2:	4618      	mov	r0, r3
  402bf4:	3714      	adds	r7, #20
  402bf6:	46bd      	mov	sp, r7
  402bf8:	bd90      	pop	{r4, r7, pc}
  402bfa:	bf00      	nop
  402bfc:	0040294d 	.word	0x0040294d
  402c00:	00402905 	.word	0x00402905
  402c04:	00402a5d 	.word	0x00402a5d
  402c08:	00402add 	.word	0x00402add

00402c0c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  402c0c:	b480      	push	{r7}
  402c0e:	b085      	sub	sp, #20
  402c10:	af00      	add	r7, sp, #0
  402c12:	60f8      	str	r0, [r7, #12]
  402c14:	60b9      	str	r1, [r7, #8]
  402c16:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402c18:	687b      	ldr	r3, [r7, #4]
  402c1a:	f003 0310 	and.w	r3, r3, #16
  402c1e:	2b00      	cmp	r3, #0
  402c20:	d020      	beq.n	402c64 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402c22:	68fb      	ldr	r3, [r7, #12]
  402c24:	68ba      	ldr	r2, [r7, #8]
  402c26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402c2a:	687b      	ldr	r3, [r7, #4]
  402c2c:	f003 0320 	and.w	r3, r3, #32
  402c30:	2b00      	cmp	r3, #0
  402c32:	d004      	beq.n	402c3e <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402c34:	68fb      	ldr	r3, [r7, #12]
  402c36:	68ba      	ldr	r2, [r7, #8]
  402c38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  402c3c:	e003      	b.n	402c46 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402c3e:	68fb      	ldr	r3, [r7, #12]
  402c40:	68ba      	ldr	r2, [r7, #8]
  402c42:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402c46:	687b      	ldr	r3, [r7, #4]
  402c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
  402c4c:	2b00      	cmp	r3, #0
  402c4e:	d004      	beq.n	402c5a <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402c50:	68fb      	ldr	r3, [r7, #12]
  402c52:	68ba      	ldr	r2, [r7, #8]
  402c54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  402c58:	e008      	b.n	402c6c <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  402c5a:	68fb      	ldr	r3, [r7, #12]
  402c5c:	68ba      	ldr	r2, [r7, #8]
  402c5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  402c62:	e003      	b.n	402c6c <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  402c64:	68fb      	ldr	r3, [r7, #12]
  402c66:	68ba      	ldr	r2, [r7, #8]
  402c68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  402c6c:	bf00      	nop
  402c6e:	3714      	adds	r7, #20
  402c70:	46bd      	mov	sp, r7
  402c72:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c76:	4770      	bx	lr

00402c78 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402c78:	b480      	push	{r7}
  402c7a:	b083      	sub	sp, #12
  402c7c:	af00      	add	r7, sp, #0
  402c7e:	6078      	str	r0, [r7, #4]
  402c80:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  402c82:	687b      	ldr	r3, [r7, #4]
  402c84:	683a      	ldr	r2, [r7, #0]
  402c86:	641a      	str	r2, [r3, #64]	; 0x40
}
  402c88:	bf00      	nop
  402c8a:	370c      	adds	r7, #12
  402c8c:	46bd      	mov	sp, r7
  402c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c92:	4770      	bx	lr

00402c94 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  402c94:	b480      	push	{r7}
  402c96:	b083      	sub	sp, #12
  402c98:	af00      	add	r7, sp, #0
  402c9a:	6078      	str	r0, [r7, #4]
  402c9c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  402c9e:	687b      	ldr	r3, [r7, #4]
  402ca0:	683a      	ldr	r2, [r7, #0]
  402ca2:	645a      	str	r2, [r3, #68]	; 0x44
}
  402ca4:	bf00      	nop
  402ca6:	370c      	adds	r7, #12
  402ca8:	46bd      	mov	sp, r7
  402caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cae:	4770      	bx	lr

00402cb0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  402cb0:	b480      	push	{r7}
  402cb2:	b083      	sub	sp, #12
  402cb4:	af00      	add	r7, sp, #0
  402cb6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  402cb8:	687b      	ldr	r3, [r7, #4]
  402cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  402cbc:	4618      	mov	r0, r3
  402cbe:	370c      	adds	r7, #12
  402cc0:	46bd      	mov	sp, r7
  402cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cc6:	4770      	bx	lr

00402cc8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  402cc8:	b480      	push	{r7}
  402cca:	b083      	sub	sp, #12
  402ccc:	af00      	add	r7, sp, #0
  402cce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  402cd0:	687b      	ldr	r3, [r7, #4]
  402cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  402cd4:	4618      	mov	r0, r3
  402cd6:	370c      	adds	r7, #12
  402cd8:	46bd      	mov	sp, r7
  402cda:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cde:	4770      	bx	lr

00402ce0 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
  402ce0:	b580      	push	{r7, lr}
  402ce2:	b084      	sub	sp, #16
  402ce4:	af00      	add	r7, sp, #0
  402ce6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402ce8:	6878      	ldr	r0, [r7, #4]
  402cea:	4b08      	ldr	r3, [pc, #32]	; (402d0c <pio_set_pin_high+0x2c>)
  402cec:	4798      	blx	r3
  402cee:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  402cf0:	687b      	ldr	r3, [r7, #4]
  402cf2:	f003 031f 	and.w	r3, r3, #31
  402cf6:	2201      	movs	r2, #1
  402cf8:	fa02 f303 	lsl.w	r3, r2, r3
  402cfc:	461a      	mov	r2, r3
  402cfe:	68fb      	ldr	r3, [r7, #12]
  402d00:	631a      	str	r2, [r3, #48]	; 0x30
}
  402d02:	bf00      	nop
  402d04:	3710      	adds	r7, #16
  402d06:	46bd      	mov	sp, r7
  402d08:	bd80      	pop	{r7, pc}
  402d0a:	bf00      	nop
  402d0c:	00402ef1 	.word	0x00402ef1

00402d10 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
  402d10:	b580      	push	{r7, lr}
  402d12:	b084      	sub	sp, #16
  402d14:	af00      	add	r7, sp, #0
  402d16:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402d18:	6878      	ldr	r0, [r7, #4]
  402d1a:	4b08      	ldr	r3, [pc, #32]	; (402d3c <pio_set_pin_low+0x2c>)
  402d1c:	4798      	blx	r3
  402d1e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  402d20:	687b      	ldr	r3, [r7, #4]
  402d22:	f003 031f 	and.w	r3, r3, #31
  402d26:	2201      	movs	r2, #1
  402d28:	fa02 f303 	lsl.w	r3, r2, r3
  402d2c:	461a      	mov	r2, r3
  402d2e:	68fb      	ldr	r3, [r7, #12]
  402d30:	635a      	str	r2, [r3, #52]	; 0x34
}
  402d32:	bf00      	nop
  402d34:	3710      	adds	r7, #16
  402d36:	46bd      	mov	sp, r7
  402d38:	bd80      	pop	{r7, pc}
  402d3a:	bf00      	nop
  402d3c:	00402ef1 	.word	0x00402ef1

00402d40 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402d40:	b590      	push	{r4, r7, lr}
  402d42:	b087      	sub	sp, #28
  402d44:	af02      	add	r7, sp, #8
  402d46:	6078      	str	r0, [r7, #4]
  402d48:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  402d4a:	6878      	ldr	r0, [r7, #4]
  402d4c:	4b63      	ldr	r3, [pc, #396]	; (402edc <pio_configure_pin+0x19c>)
  402d4e:	4798      	blx	r3
  402d50:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402d52:	683b      	ldr	r3, [r7, #0]
  402d54:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  402d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402d5c:	d067      	beq.n	402e2e <pio_configure_pin+0xee>
  402d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  402d62:	d809      	bhi.n	402d78 <pio_configure_pin+0x38>
  402d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402d68:	d02b      	beq.n	402dc2 <pio_configure_pin+0x82>
  402d6a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  402d6e:	d043      	beq.n	402df8 <pio_configure_pin+0xb8>
  402d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  402d74:	d00a      	beq.n	402d8c <pio_configure_pin+0x4c>
  402d76:	e0a9      	b.n	402ecc <pio_configure_pin+0x18c>
  402d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  402d7c:	d07e      	beq.n	402e7c <pio_configure_pin+0x13c>
  402d7e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402d82:	d07b      	beq.n	402e7c <pio_configure_pin+0x13c>
  402d84:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  402d88:	d06c      	beq.n	402e64 <pio_configure_pin+0x124>
  402d8a:	e09f      	b.n	402ecc <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  402d8c:	687b      	ldr	r3, [r7, #4]
  402d8e:	f003 031f 	and.w	r3, r3, #31
  402d92:	2201      	movs	r2, #1
  402d94:	fa02 f303 	lsl.w	r3, r2, r3
  402d98:	461a      	mov	r2, r3
  402d9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402d9e:	68f8      	ldr	r0, [r7, #12]
  402da0:	4b4f      	ldr	r3, [pc, #316]	; (402ee0 <pio_configure_pin+0x1a0>)
  402da2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402da4:	687b      	ldr	r3, [r7, #4]
  402da6:	f003 031f 	and.w	r3, r3, #31
  402daa:	2201      	movs	r2, #1
  402dac:	fa02 f303 	lsl.w	r3, r2, r3
  402db0:	4619      	mov	r1, r3
  402db2:	683b      	ldr	r3, [r7, #0]
  402db4:	f003 0301 	and.w	r3, r3, #1
  402db8:	461a      	mov	r2, r3
  402dba:	68f8      	ldr	r0, [r7, #12]
  402dbc:	4b49      	ldr	r3, [pc, #292]	; (402ee4 <pio_configure_pin+0x1a4>)
  402dbe:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402dc0:	e086      	b.n	402ed0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  402dc2:	687b      	ldr	r3, [r7, #4]
  402dc4:	f003 031f 	and.w	r3, r3, #31
  402dc8:	2201      	movs	r2, #1
  402dca:	fa02 f303 	lsl.w	r3, r2, r3
  402dce:	461a      	mov	r2, r3
  402dd0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402dd4:	68f8      	ldr	r0, [r7, #12]
  402dd6:	4b42      	ldr	r3, [pc, #264]	; (402ee0 <pio_configure_pin+0x1a0>)
  402dd8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402dda:	687b      	ldr	r3, [r7, #4]
  402ddc:	f003 031f 	and.w	r3, r3, #31
  402de0:	2201      	movs	r2, #1
  402de2:	fa02 f303 	lsl.w	r3, r2, r3
  402de6:	4619      	mov	r1, r3
  402de8:	683b      	ldr	r3, [r7, #0]
  402dea:	f003 0301 	and.w	r3, r3, #1
  402dee:	461a      	mov	r2, r3
  402df0:	68f8      	ldr	r0, [r7, #12]
  402df2:	4b3c      	ldr	r3, [pc, #240]	; (402ee4 <pio_configure_pin+0x1a4>)
  402df4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402df6:	e06b      	b.n	402ed0 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402df8:	687b      	ldr	r3, [r7, #4]
  402dfa:	f003 031f 	and.w	r3, r3, #31
  402dfe:	2201      	movs	r2, #1
  402e00:	fa02 f303 	lsl.w	r3, r2, r3
  402e04:	461a      	mov	r2, r3
  402e06:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402e0a:	68f8      	ldr	r0, [r7, #12]
  402e0c:	4b34      	ldr	r3, [pc, #208]	; (402ee0 <pio_configure_pin+0x1a0>)
  402e0e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402e10:	687b      	ldr	r3, [r7, #4]
  402e12:	f003 031f 	and.w	r3, r3, #31
  402e16:	2201      	movs	r2, #1
  402e18:	fa02 f303 	lsl.w	r3, r2, r3
  402e1c:	4619      	mov	r1, r3
  402e1e:	683b      	ldr	r3, [r7, #0]
  402e20:	f003 0301 	and.w	r3, r3, #1
  402e24:	461a      	mov	r2, r3
  402e26:	68f8      	ldr	r0, [r7, #12]
  402e28:	4b2e      	ldr	r3, [pc, #184]	; (402ee4 <pio_configure_pin+0x1a4>)
  402e2a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402e2c:	e050      	b.n	402ed0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402e2e:	687b      	ldr	r3, [r7, #4]
  402e30:	f003 031f 	and.w	r3, r3, #31
  402e34:	2201      	movs	r2, #1
  402e36:	fa02 f303 	lsl.w	r3, r2, r3
  402e3a:	461a      	mov	r2, r3
  402e3c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402e40:	68f8      	ldr	r0, [r7, #12]
  402e42:	4b27      	ldr	r3, [pc, #156]	; (402ee0 <pio_configure_pin+0x1a0>)
  402e44:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402e46:	687b      	ldr	r3, [r7, #4]
  402e48:	f003 031f 	and.w	r3, r3, #31
  402e4c:	2201      	movs	r2, #1
  402e4e:	fa02 f303 	lsl.w	r3, r2, r3
  402e52:	4619      	mov	r1, r3
  402e54:	683b      	ldr	r3, [r7, #0]
  402e56:	f003 0301 	and.w	r3, r3, #1
  402e5a:	461a      	mov	r2, r3
  402e5c:	68f8      	ldr	r0, [r7, #12]
  402e5e:	4b21      	ldr	r3, [pc, #132]	; (402ee4 <pio_configure_pin+0x1a4>)
  402e60:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  402e62:	e035      	b.n	402ed0 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402e64:	687b      	ldr	r3, [r7, #4]
  402e66:	f003 031f 	and.w	r3, r3, #31
  402e6a:	2201      	movs	r2, #1
  402e6c:	fa02 f303 	lsl.w	r3, r2, r3
  402e70:	683a      	ldr	r2, [r7, #0]
  402e72:	4619      	mov	r1, r3
  402e74:	68f8      	ldr	r0, [r7, #12]
  402e76:	4b1c      	ldr	r3, [pc, #112]	; (402ee8 <pio_configure_pin+0x1a8>)
  402e78:	4798      	blx	r3
		break;
  402e7a:	e029      	b.n	402ed0 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402e7c:	687b      	ldr	r3, [r7, #4]
  402e7e:	f003 031f 	and.w	r3, r3, #31
  402e82:	2201      	movs	r2, #1
  402e84:	fa02 f303 	lsl.w	r3, r2, r3
  402e88:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402e8a:	683b      	ldr	r3, [r7, #0]
  402e8c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402e90:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  402e94:	bf0c      	ite	eq
  402e96:	2301      	moveq	r3, #1
  402e98:	2300      	movne	r3, #0
  402e9a:	b2db      	uxtb	r3, r3
  402e9c:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  402e9e:	683b      	ldr	r3, [r7, #0]
  402ea0:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402ea4:	2b00      	cmp	r3, #0
  402ea6:	bf14      	ite	ne
  402ea8:	2301      	movne	r3, #1
  402eaa:	2300      	moveq	r3, #0
  402eac:	b2db      	uxtb	r3, r3
  402eae:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  402eb0:	683b      	ldr	r3, [r7, #0]
  402eb2:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402eb6:	2b00      	cmp	r3, #0
  402eb8:	bf14      	ite	ne
  402eba:	2301      	movne	r3, #1
  402ebc:	2300      	moveq	r3, #0
  402ebe:	b2db      	uxtb	r3, r3
  402ec0:	9300      	str	r3, [sp, #0]
  402ec2:	4603      	mov	r3, r0
  402ec4:	68f8      	ldr	r0, [r7, #12]
  402ec6:	4c09      	ldr	r4, [pc, #36]	; (402eec <pio_configure_pin+0x1ac>)
  402ec8:	47a0      	blx	r4
		break;
  402eca:	e001      	b.n	402ed0 <pio_configure_pin+0x190>

	default:
		return 0;
  402ecc:	2300      	movs	r3, #0
  402ece:	e000      	b.n	402ed2 <pio_configure_pin+0x192>
	}

	return 1;
  402ed0:	2301      	movs	r3, #1
}
  402ed2:	4618      	mov	r0, r3
  402ed4:	3714      	adds	r7, #20
  402ed6:	46bd      	mov	sp, r7
  402ed8:	bd90      	pop	{r4, r7, pc}
  402eda:	bf00      	nop
  402edc:	00402ef1 	.word	0x00402ef1
  402ee0:	0040294d 	.word	0x0040294d
  402ee4:	00402905 	.word	0x00402905
  402ee8:	00402a5d 	.word	0x00402a5d
  402eec:	00402add 	.word	0x00402add

00402ef0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  402ef0:	b480      	push	{r7}
  402ef2:	b085      	sub	sp, #20
  402ef4:	af00      	add	r7, sp, #0
  402ef6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402ef8:	687b      	ldr	r3, [r7, #4]
  402efa:	095a      	lsrs	r2, r3, #5
  402efc:	4b05      	ldr	r3, [pc, #20]	; (402f14 <pio_get_pin_group+0x24>)
  402efe:	4413      	add	r3, r2
  402f00:	025b      	lsls	r3, r3, #9
  402f02:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  402f04:	68fb      	ldr	r3, [r7, #12]
}
  402f06:	4618      	mov	r0, r3
  402f08:	3714      	adds	r7, #20
  402f0a:	46bd      	mov	sp, r7
  402f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f10:	4770      	bx	lr
  402f12:	bf00      	nop
  402f14:	00200707 	.word	0x00200707

00402f18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402f18:	b580      	push	{r7, lr}
  402f1a:	b084      	sub	sp, #16
  402f1c:	af00      	add	r7, sp, #0
  402f1e:	6078      	str	r0, [r7, #4]
  402f20:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402f22:	6878      	ldr	r0, [r7, #4]
  402f24:	4b26      	ldr	r3, [pc, #152]	; (402fc0 <pio_handler_process+0xa8>)
  402f26:	4798      	blx	r3
  402f28:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  402f2a:	6878      	ldr	r0, [r7, #4]
  402f2c:	4b25      	ldr	r3, [pc, #148]	; (402fc4 <pio_handler_process+0xac>)
  402f2e:	4798      	blx	r3
  402f30:	4602      	mov	r2, r0
  402f32:	68fb      	ldr	r3, [r7, #12]
  402f34:	4013      	ands	r3, r2
  402f36:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402f38:	68fb      	ldr	r3, [r7, #12]
  402f3a:	2b00      	cmp	r3, #0
  402f3c:	d03c      	beq.n	402fb8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  402f3e:	2300      	movs	r3, #0
  402f40:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  402f42:	e034      	b.n	402fae <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402f44:	4a20      	ldr	r2, [pc, #128]	; (402fc8 <pio_handler_process+0xb0>)
  402f46:	68bb      	ldr	r3, [r7, #8]
  402f48:	011b      	lsls	r3, r3, #4
  402f4a:	4413      	add	r3, r2
  402f4c:	681a      	ldr	r2, [r3, #0]
  402f4e:	683b      	ldr	r3, [r7, #0]
  402f50:	429a      	cmp	r2, r3
  402f52:	d126      	bne.n	402fa2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402f54:	4a1c      	ldr	r2, [pc, #112]	; (402fc8 <pio_handler_process+0xb0>)
  402f56:	68bb      	ldr	r3, [r7, #8]
  402f58:	011b      	lsls	r3, r3, #4
  402f5a:	4413      	add	r3, r2
  402f5c:	3304      	adds	r3, #4
  402f5e:	681a      	ldr	r2, [r3, #0]
  402f60:	68fb      	ldr	r3, [r7, #12]
  402f62:	4013      	ands	r3, r2
  402f64:	2b00      	cmp	r3, #0
  402f66:	d01c      	beq.n	402fa2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402f68:	4a17      	ldr	r2, [pc, #92]	; (402fc8 <pio_handler_process+0xb0>)
  402f6a:	68bb      	ldr	r3, [r7, #8]
  402f6c:	011b      	lsls	r3, r3, #4
  402f6e:	4413      	add	r3, r2
  402f70:	330c      	adds	r3, #12
  402f72:	681b      	ldr	r3, [r3, #0]
  402f74:	4914      	ldr	r1, [pc, #80]	; (402fc8 <pio_handler_process+0xb0>)
  402f76:	68ba      	ldr	r2, [r7, #8]
  402f78:	0112      	lsls	r2, r2, #4
  402f7a:	440a      	add	r2, r1
  402f7c:	6810      	ldr	r0, [r2, #0]
  402f7e:	4912      	ldr	r1, [pc, #72]	; (402fc8 <pio_handler_process+0xb0>)
  402f80:	68ba      	ldr	r2, [r7, #8]
  402f82:	0112      	lsls	r2, r2, #4
  402f84:	440a      	add	r2, r1
  402f86:	3204      	adds	r2, #4
  402f88:	6812      	ldr	r2, [r2, #0]
  402f8a:	4611      	mov	r1, r2
  402f8c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402f8e:	4a0e      	ldr	r2, [pc, #56]	; (402fc8 <pio_handler_process+0xb0>)
  402f90:	68bb      	ldr	r3, [r7, #8]
  402f92:	011b      	lsls	r3, r3, #4
  402f94:	4413      	add	r3, r2
  402f96:	3304      	adds	r3, #4
  402f98:	681b      	ldr	r3, [r3, #0]
  402f9a:	43db      	mvns	r3, r3
  402f9c:	68fa      	ldr	r2, [r7, #12]
  402f9e:	4013      	ands	r3, r2
  402fa0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  402fa2:	68bb      	ldr	r3, [r7, #8]
  402fa4:	3301      	adds	r3, #1
  402fa6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402fa8:	68bb      	ldr	r3, [r7, #8]
  402faa:	2b06      	cmp	r3, #6
  402fac:	d803      	bhi.n	402fb6 <pio_handler_process+0x9e>
		while (status != 0) {
  402fae:	68fb      	ldr	r3, [r7, #12]
  402fb0:	2b00      	cmp	r3, #0
  402fb2:	d1c7      	bne.n	402f44 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  402fb4:	e000      	b.n	402fb8 <pio_handler_process+0xa0>
				break;
  402fb6:	bf00      	nop
}
  402fb8:	bf00      	nop
  402fba:	3710      	adds	r7, #16
  402fbc:	46bd      	mov	sp, r7
  402fbe:	bd80      	pop	{r7, pc}
  402fc0:	00402cb1 	.word	0x00402cb1
  402fc4:	00402cc9 	.word	0x00402cc9
  402fc8:	20400d9c 	.word	0x20400d9c

00402fcc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  402fcc:	b580      	push	{r7, lr}
  402fce:	b086      	sub	sp, #24
  402fd0:	af00      	add	r7, sp, #0
  402fd2:	60f8      	str	r0, [r7, #12]
  402fd4:	60b9      	str	r1, [r7, #8]
  402fd6:	607a      	str	r2, [r7, #4]
  402fd8:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402fda:	4b21      	ldr	r3, [pc, #132]	; (403060 <pio_handler_set+0x94>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	2b06      	cmp	r3, #6
  402fe0:	d901      	bls.n	402fe6 <pio_handler_set+0x1a>
		return 1;
  402fe2:	2301      	movs	r3, #1
  402fe4:	e038      	b.n	403058 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402fe6:	2300      	movs	r3, #0
  402fe8:	75fb      	strb	r3, [r7, #23]
  402fea:	e011      	b.n	403010 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  402fec:	7dfb      	ldrb	r3, [r7, #23]
  402fee:	011b      	lsls	r3, r3, #4
  402ff0:	4a1c      	ldr	r2, [pc, #112]	; (403064 <pio_handler_set+0x98>)
  402ff2:	4413      	add	r3, r2
  402ff4:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402ff6:	693b      	ldr	r3, [r7, #16]
  402ff8:	681a      	ldr	r2, [r3, #0]
  402ffa:	68bb      	ldr	r3, [r7, #8]
  402ffc:	429a      	cmp	r2, r3
  402ffe:	d104      	bne.n	40300a <pio_handler_set+0x3e>
  403000:	693b      	ldr	r3, [r7, #16]
  403002:	685a      	ldr	r2, [r3, #4]
  403004:	687b      	ldr	r3, [r7, #4]
  403006:	429a      	cmp	r2, r3
  403008:	d008      	beq.n	40301c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40300a:	7dfb      	ldrb	r3, [r7, #23]
  40300c:	3301      	adds	r3, #1
  40300e:	75fb      	strb	r3, [r7, #23]
  403010:	7dfa      	ldrb	r2, [r7, #23]
  403012:	4b13      	ldr	r3, [pc, #76]	; (403060 <pio_handler_set+0x94>)
  403014:	681b      	ldr	r3, [r3, #0]
  403016:	429a      	cmp	r2, r3
  403018:	d9e8      	bls.n	402fec <pio_handler_set+0x20>
  40301a:	e000      	b.n	40301e <pio_handler_set+0x52>
			break;
  40301c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40301e:	693b      	ldr	r3, [r7, #16]
  403020:	68ba      	ldr	r2, [r7, #8]
  403022:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  403024:	693b      	ldr	r3, [r7, #16]
  403026:	687a      	ldr	r2, [r7, #4]
  403028:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40302a:	693b      	ldr	r3, [r7, #16]
  40302c:	683a      	ldr	r2, [r7, #0]
  40302e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  403030:	693b      	ldr	r3, [r7, #16]
  403032:	6a3a      	ldr	r2, [r7, #32]
  403034:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  403036:	7dfa      	ldrb	r2, [r7, #23]
  403038:	4b09      	ldr	r3, [pc, #36]	; (403060 <pio_handler_set+0x94>)
  40303a:	681b      	ldr	r3, [r3, #0]
  40303c:	3301      	adds	r3, #1
  40303e:	429a      	cmp	r2, r3
  403040:	d104      	bne.n	40304c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  403042:	4b07      	ldr	r3, [pc, #28]	; (403060 <pio_handler_set+0x94>)
  403044:	681b      	ldr	r3, [r3, #0]
  403046:	3301      	adds	r3, #1
  403048:	4a05      	ldr	r2, [pc, #20]	; (403060 <pio_handler_set+0x94>)
  40304a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40304c:	683a      	ldr	r2, [r7, #0]
  40304e:	6879      	ldr	r1, [r7, #4]
  403050:	68f8      	ldr	r0, [r7, #12]
  403052:	4b05      	ldr	r3, [pc, #20]	; (403068 <pio_handler_set+0x9c>)
  403054:	4798      	blx	r3

	return 0;
  403056:	2300      	movs	r3, #0
}
  403058:	4618      	mov	r0, r3
  40305a:	3718      	adds	r7, #24
  40305c:	46bd      	mov	sp, r7
  40305e:	bd80      	pop	{r7, pc}
  403060:	20400e0c 	.word	0x20400e0c
  403064:	20400d9c 	.word	0x20400d9c
  403068:	00402c0d 	.word	0x00402c0d

0040306c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40306c:	b580      	push	{r7, lr}
  40306e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  403070:	210a      	movs	r1, #10
  403072:	4802      	ldr	r0, [pc, #8]	; (40307c <PIOA_Handler+0x10>)
  403074:	4b02      	ldr	r3, [pc, #8]	; (403080 <PIOA_Handler+0x14>)
  403076:	4798      	blx	r3
}
  403078:	bf00      	nop
  40307a:	bd80      	pop	{r7, pc}
  40307c:	400e0e00 	.word	0x400e0e00
  403080:	00402f19 	.word	0x00402f19

00403084 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  403084:	b580      	push	{r7, lr}
  403086:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  403088:	210b      	movs	r1, #11
  40308a:	4802      	ldr	r0, [pc, #8]	; (403094 <PIOB_Handler+0x10>)
  40308c:	4b02      	ldr	r3, [pc, #8]	; (403098 <PIOB_Handler+0x14>)
  40308e:	4798      	blx	r3
}
  403090:	bf00      	nop
  403092:	bd80      	pop	{r7, pc}
  403094:	400e1000 	.word	0x400e1000
  403098:	00402f19 	.word	0x00402f19

0040309c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40309c:	b580      	push	{r7, lr}
  40309e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4030a0:	210c      	movs	r1, #12
  4030a2:	4802      	ldr	r0, [pc, #8]	; (4030ac <PIOC_Handler+0x10>)
  4030a4:	4b02      	ldr	r3, [pc, #8]	; (4030b0 <PIOC_Handler+0x14>)
  4030a6:	4798      	blx	r3
}
  4030a8:	bf00      	nop
  4030aa:	bd80      	pop	{r7, pc}
  4030ac:	400e1200 	.word	0x400e1200
  4030b0:	00402f19 	.word	0x00402f19

004030b4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4030b4:	b580      	push	{r7, lr}
  4030b6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4030b8:	2110      	movs	r1, #16
  4030ba:	4802      	ldr	r0, [pc, #8]	; (4030c4 <PIOD_Handler+0x10>)
  4030bc:	4b02      	ldr	r3, [pc, #8]	; (4030c8 <PIOD_Handler+0x14>)
  4030be:	4798      	blx	r3
}
  4030c0:	bf00      	nop
  4030c2:	bd80      	pop	{r7, pc}
  4030c4:	400e1400 	.word	0x400e1400
  4030c8:	00402f19 	.word	0x00402f19

004030cc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4030cc:	b580      	push	{r7, lr}
  4030ce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4030d0:	2111      	movs	r1, #17
  4030d2:	4802      	ldr	r0, [pc, #8]	; (4030dc <PIOE_Handler+0x10>)
  4030d4:	4b02      	ldr	r3, [pc, #8]	; (4030e0 <PIOE_Handler+0x14>)
  4030d6:	4798      	blx	r3
}
  4030d8:	bf00      	nop
  4030da:	bd80      	pop	{r7, pc}
  4030dc:	400e1600 	.word	0x400e1600
  4030e0:	00402f19 	.word	0x00402f19

004030e4 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4030e4:	b480      	push	{r7}
  4030e6:	b083      	sub	sp, #12
  4030e8:	af00      	add	r7, sp, #0
  4030ea:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4030ec:	687b      	ldr	r3, [r7, #4]
  4030ee:	3b01      	subs	r3, #1
  4030f0:	2b03      	cmp	r3, #3
  4030f2:	d81a      	bhi.n	40312a <pmc_mck_set_division+0x46>
  4030f4:	a201      	add	r2, pc, #4	; (adr r2, 4030fc <pmc_mck_set_division+0x18>)
  4030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4030fa:	bf00      	nop
  4030fc:	0040310d 	.word	0x0040310d
  403100:	00403113 	.word	0x00403113
  403104:	0040311b 	.word	0x0040311b
  403108:	00403123 	.word	0x00403123
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40310c:	2300      	movs	r3, #0
  40310e:	607b      	str	r3, [r7, #4]
			break;
  403110:	e00e      	b.n	403130 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  403112:	f44f 7380 	mov.w	r3, #256	; 0x100
  403116:	607b      	str	r3, [r7, #4]
			break;
  403118:	e00a      	b.n	403130 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40311a:	f44f 7340 	mov.w	r3, #768	; 0x300
  40311e:	607b      	str	r3, [r7, #4]
			break;
  403120:	e006      	b.n	403130 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  403122:	f44f 7300 	mov.w	r3, #512	; 0x200
  403126:	607b      	str	r3, [r7, #4]
			break;
  403128:	e002      	b.n	403130 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40312a:	2300      	movs	r3, #0
  40312c:	607b      	str	r3, [r7, #4]
			break;
  40312e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  403130:	490a      	ldr	r1, [pc, #40]	; (40315c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  403132:	4b0a      	ldr	r3, [pc, #40]	; (40315c <pmc_mck_set_division+0x78>)
  403134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40313a:	687b      	ldr	r3, [r7, #4]
  40313c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40313e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403140:	bf00      	nop
  403142:	4b06      	ldr	r3, [pc, #24]	; (40315c <pmc_mck_set_division+0x78>)
  403144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403146:	f003 0308 	and.w	r3, r3, #8
  40314a:	2b00      	cmp	r3, #0
  40314c:	d0f9      	beq.n	403142 <pmc_mck_set_division+0x5e>
}
  40314e:	bf00      	nop
  403150:	370c      	adds	r7, #12
  403152:	46bd      	mov	sp, r7
  403154:	f85d 7b04 	ldr.w	r7, [sp], #4
  403158:	4770      	bx	lr
  40315a:	bf00      	nop
  40315c:	400e0600 	.word	0x400e0600

00403160 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  403160:	b480      	push	{r7}
  403162:	b085      	sub	sp, #20
  403164:	af00      	add	r7, sp, #0
  403166:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403168:	491d      	ldr	r1, [pc, #116]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  40316a:	4b1d      	ldr	r3, [pc, #116]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  40316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  403172:	687b      	ldr	r3, [r7, #4]
  403174:	4313      	orrs	r3, r2
  403176:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40317c:	60fb      	str	r3, [r7, #12]
  40317e:	e007      	b.n	403190 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403180:	68fb      	ldr	r3, [r7, #12]
  403182:	2b00      	cmp	r3, #0
  403184:	d101      	bne.n	40318a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  403186:	2301      	movs	r3, #1
  403188:	e023      	b.n	4031d2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40318a:	68fb      	ldr	r3, [r7, #12]
  40318c:	3b01      	subs	r3, #1
  40318e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403190:	4b13      	ldr	r3, [pc, #76]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  403192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403194:	f003 0308 	and.w	r3, r3, #8
  403198:	2b00      	cmp	r3, #0
  40319a:	d0f1      	beq.n	403180 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40319c:	4a10      	ldr	r2, [pc, #64]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  40319e:	4b10      	ldr	r3, [pc, #64]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  4031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031a2:	f023 0303 	bic.w	r3, r3, #3
  4031a6:	f043 0302 	orr.w	r3, r3, #2
  4031aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4031b0:	60fb      	str	r3, [r7, #12]
  4031b2:	e007      	b.n	4031c4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4031b4:	68fb      	ldr	r3, [r7, #12]
  4031b6:	2b00      	cmp	r3, #0
  4031b8:	d101      	bne.n	4031be <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4031ba:	2301      	movs	r3, #1
  4031bc:	e009      	b.n	4031d2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4031be:	68fb      	ldr	r3, [r7, #12]
  4031c0:	3b01      	subs	r3, #1
  4031c2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4031c4:	4b06      	ldr	r3, [pc, #24]	; (4031e0 <pmc_switch_mck_to_pllack+0x80>)
  4031c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4031c8:	f003 0308 	and.w	r3, r3, #8
  4031cc:	2b00      	cmp	r3, #0
  4031ce:	d0f1      	beq.n	4031b4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4031d0:	2300      	movs	r3, #0
}
  4031d2:	4618      	mov	r0, r3
  4031d4:	3714      	adds	r7, #20
  4031d6:	46bd      	mov	sp, r7
  4031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031dc:	4770      	bx	lr
  4031de:	bf00      	nop
  4031e0:	400e0600 	.word	0x400e0600

004031e4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4031e4:	b480      	push	{r7}
  4031e6:	b083      	sub	sp, #12
  4031e8:	af00      	add	r7, sp, #0
  4031ea:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4031ec:	687b      	ldr	r3, [r7, #4]
  4031ee:	2b01      	cmp	r3, #1
  4031f0:	d105      	bne.n	4031fe <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4031f2:	4907      	ldr	r1, [pc, #28]	; (403210 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4031f4:	4b06      	ldr	r3, [pc, #24]	; (403210 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4031f6:	689a      	ldr	r2, [r3, #8]
  4031f8:	4b06      	ldr	r3, [pc, #24]	; (403214 <pmc_switch_sclk_to_32kxtal+0x30>)
  4031fa:	4313      	orrs	r3, r2
  4031fc:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4031fe:	4b04      	ldr	r3, [pc, #16]	; (403210 <pmc_switch_sclk_to_32kxtal+0x2c>)
  403200:	4a05      	ldr	r2, [pc, #20]	; (403218 <pmc_switch_sclk_to_32kxtal+0x34>)
  403202:	601a      	str	r2, [r3, #0]
}
  403204:	bf00      	nop
  403206:	370c      	adds	r7, #12
  403208:	46bd      	mov	sp, r7
  40320a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40320e:	4770      	bx	lr
  403210:	400e1810 	.word	0x400e1810
  403214:	a5100000 	.word	0xa5100000
  403218:	a5000008 	.word	0xa5000008

0040321c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40321c:	b480      	push	{r7}
  40321e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  403220:	4b09      	ldr	r3, [pc, #36]	; (403248 <pmc_osc_is_ready_32kxtal+0x2c>)
  403222:	695b      	ldr	r3, [r3, #20]
  403224:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  403228:	2b00      	cmp	r3, #0
  40322a:	d007      	beq.n	40323c <pmc_osc_is_ready_32kxtal+0x20>
  40322c:	4b07      	ldr	r3, [pc, #28]	; (40324c <pmc_osc_is_ready_32kxtal+0x30>)
  40322e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403230:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403234:	2b00      	cmp	r3, #0
  403236:	d001      	beq.n	40323c <pmc_osc_is_ready_32kxtal+0x20>
  403238:	2301      	movs	r3, #1
  40323a:	e000      	b.n	40323e <pmc_osc_is_ready_32kxtal+0x22>
  40323c:	2300      	movs	r3, #0
}
  40323e:	4618      	mov	r0, r3
  403240:	46bd      	mov	sp, r7
  403242:	f85d 7b04 	ldr.w	r7, [sp], #4
  403246:	4770      	bx	lr
  403248:	400e1810 	.word	0x400e1810
  40324c:	400e0600 	.word	0x400e0600

00403250 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  403250:	b480      	push	{r7}
  403252:	b083      	sub	sp, #12
  403254:	af00      	add	r7, sp, #0
  403256:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  403258:	4915      	ldr	r1, [pc, #84]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  40325a:	4b15      	ldr	r3, [pc, #84]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  40325c:	6a1a      	ldr	r2, [r3, #32]
  40325e:	4b15      	ldr	r3, [pc, #84]	; (4032b4 <pmc_switch_mainck_to_fastrc+0x64>)
  403260:	4313      	orrs	r3, r2
  403262:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403264:	bf00      	nop
  403266:	4b12      	ldr	r3, [pc, #72]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  403268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40326e:	2b00      	cmp	r3, #0
  403270:	d0f9      	beq.n	403266 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403272:	490f      	ldr	r1, [pc, #60]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  403274:	4b0e      	ldr	r3, [pc, #56]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  403276:	6a1a      	ldr	r2, [r3, #32]
  403278:	4b0f      	ldr	r3, [pc, #60]	; (4032b8 <pmc_switch_mainck_to_fastrc+0x68>)
  40327a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40327c:	687a      	ldr	r2, [r7, #4]
  40327e:	4313      	orrs	r3, r2
  403280:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403284:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403286:	bf00      	nop
  403288:	4b09      	ldr	r3, [pc, #36]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  40328a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  403290:	2b00      	cmp	r3, #0
  403292:	d0f9      	beq.n	403288 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403294:	4906      	ldr	r1, [pc, #24]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  403296:	4b06      	ldr	r3, [pc, #24]	; (4032b0 <pmc_switch_mainck_to_fastrc+0x60>)
  403298:	6a1a      	ldr	r2, [r3, #32]
  40329a:	4b08      	ldr	r3, [pc, #32]	; (4032bc <pmc_switch_mainck_to_fastrc+0x6c>)
  40329c:	4013      	ands	r3, r2
  40329e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4032a2:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4032a4:	bf00      	nop
  4032a6:	370c      	adds	r7, #12
  4032a8:	46bd      	mov	sp, r7
  4032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4032ae:	4770      	bx	lr
  4032b0:	400e0600 	.word	0x400e0600
  4032b4:	00370008 	.word	0x00370008
  4032b8:	ffc8ff8f 	.word	0xffc8ff8f
  4032bc:	fec8ffff 	.word	0xfec8ffff

004032c0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4032c0:	b480      	push	{r7}
  4032c2:	b083      	sub	sp, #12
  4032c4:	af00      	add	r7, sp, #0
  4032c6:	6078      	str	r0, [r7, #4]
  4032c8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4032ca:	687b      	ldr	r3, [r7, #4]
  4032cc:	2b00      	cmp	r3, #0
  4032ce:	d008      	beq.n	4032e2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4032d0:	4913      	ldr	r1, [pc, #76]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  4032d2:	4b13      	ldr	r3, [pc, #76]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  4032d4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4032d6:	4a13      	ldr	r2, [pc, #76]	; (403324 <pmc_switch_mainck_to_xtal+0x64>)
  4032d8:	401a      	ands	r2, r3
  4032da:	4b13      	ldr	r3, [pc, #76]	; (403328 <pmc_switch_mainck_to_xtal+0x68>)
  4032dc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4032de:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4032e0:	e018      	b.n	403314 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4032e2:	490f      	ldr	r1, [pc, #60]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  4032e4:	4b0e      	ldr	r3, [pc, #56]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  4032e6:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4032e8:	4b10      	ldr	r3, [pc, #64]	; (40332c <pmc_switch_mainck_to_xtal+0x6c>)
  4032ea:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4032ec:	683a      	ldr	r2, [r7, #0]
  4032ee:	0212      	lsls	r2, r2, #8
  4032f0:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4032f2:	431a      	orrs	r2, r3
  4032f4:	4b0e      	ldr	r3, [pc, #56]	; (403330 <pmc_switch_mainck_to_xtal+0x70>)
  4032f6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4032f8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4032fa:	bf00      	nop
  4032fc:	4b08      	ldr	r3, [pc, #32]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  4032fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403300:	f003 0301 	and.w	r3, r3, #1
  403304:	2b00      	cmp	r3, #0
  403306:	d0f9      	beq.n	4032fc <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403308:	4905      	ldr	r1, [pc, #20]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  40330a:	4b05      	ldr	r3, [pc, #20]	; (403320 <pmc_switch_mainck_to_xtal+0x60>)
  40330c:	6a1a      	ldr	r2, [r3, #32]
  40330e:	4b09      	ldr	r3, [pc, #36]	; (403334 <pmc_switch_mainck_to_xtal+0x74>)
  403310:	4313      	orrs	r3, r2
  403312:	620b      	str	r3, [r1, #32]
}
  403314:	bf00      	nop
  403316:	370c      	adds	r7, #12
  403318:	46bd      	mov	sp, r7
  40331a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40331e:	4770      	bx	lr
  403320:	400e0600 	.word	0x400e0600
  403324:	fec8fffc 	.word	0xfec8fffc
  403328:	01370002 	.word	0x01370002
  40332c:	ffc8fffc 	.word	0xffc8fffc
  403330:	00370001 	.word	0x00370001
  403334:	01370000 	.word	0x01370000

00403338 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  403338:	b480      	push	{r7}
  40333a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40333c:	4b04      	ldr	r3, [pc, #16]	; (403350 <pmc_osc_is_ready_mainck+0x18>)
  40333e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  403344:	4618      	mov	r0, r3
  403346:	46bd      	mov	sp, r7
  403348:	f85d 7b04 	ldr.w	r7, [sp], #4
  40334c:	4770      	bx	lr
  40334e:	bf00      	nop
  403350:	400e0600 	.word	0x400e0600

00403354 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  403354:	b480      	push	{r7}
  403356:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403358:	4b04      	ldr	r3, [pc, #16]	; (40336c <pmc_disable_pllack+0x18>)
  40335a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40335e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  403360:	bf00      	nop
  403362:	46bd      	mov	sp, r7
  403364:	f85d 7b04 	ldr.w	r7, [sp], #4
  403368:	4770      	bx	lr
  40336a:	bf00      	nop
  40336c:	400e0600 	.word	0x400e0600

00403370 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  403370:	b480      	push	{r7}
  403372:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403374:	4b04      	ldr	r3, [pc, #16]	; (403388 <pmc_is_locked_pllack+0x18>)
  403376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403378:	f003 0302 	and.w	r3, r3, #2
}
  40337c:	4618      	mov	r0, r3
  40337e:	46bd      	mov	sp, r7
  403380:	f85d 7b04 	ldr.w	r7, [sp], #4
  403384:	4770      	bx	lr
  403386:	bf00      	nop
  403388:	400e0600 	.word	0x400e0600

0040338c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  40338c:	b480      	push	{r7}
  40338e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  403390:	4b04      	ldr	r3, [pc, #16]	; (4033a4 <pmc_is_locked_upll+0x18>)
  403392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403394:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  403398:	4618      	mov	r0, r3
  40339a:	46bd      	mov	sp, r7
  40339c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033a0:	4770      	bx	lr
  4033a2:	bf00      	nop
  4033a4:	400e0600 	.word	0x400e0600

004033a8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4033a8:	b480      	push	{r7}
  4033aa:	b085      	sub	sp, #20
  4033ac:	af00      	add	r7, sp, #0
  4033ae:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4033b0:	4a0b      	ldr	r2, [pc, #44]	; (4033e0 <pmc_enable_periph_clk+0x38>)
  4033b2:	687b      	ldr	r3, [r7, #4]
  4033b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4033b8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4033bc:	4b08      	ldr	r3, [pc, #32]	; (4033e0 <pmc_enable_periph_clk+0x38>)
  4033be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  4033c2:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  4033c6:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  4033c8:	4a05      	ldr	r2, [pc, #20]	; (4033e0 <pmc_enable_periph_clk+0x38>)
  4033ca:	68fb      	ldr	r3, [r7, #12]
  4033cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  4033d0:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4033d2:	4618      	mov	r0, r3
  4033d4:	3714      	adds	r7, #20
  4033d6:	46bd      	mov	sp, r7
  4033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033dc:	4770      	bx	lr
  4033de:	bf00      	nop
  4033e0:	400e0600 	.word	0x400e0600

004033e4 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  4033e4:	b480      	push	{r7}
  4033e6:	b083      	sub	sp, #12
  4033e8:	af00      	add	r7, sp, #0
  4033ea:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  4033ec:	4a04      	ldr	r2, [pc, #16]	; (403400 <pmc_set_flash_in_wait_mode+0x1c>)
  4033ee:	687b      	ldr	r3, [r7, #4]
  4033f0:	6013      	str	r3, [r2, #0]
}
  4033f2:	bf00      	nop
  4033f4:	370c      	adds	r7, #12
  4033f6:	46bd      	mov	sp, r7
  4033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033fc:	4770      	bx	lr
  4033fe:	bf00      	nop
  403400:	20400004 	.word	0x20400004

00403404 <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  403404:	b480      	push	{r7}
  403406:	b083      	sub	sp, #12
  403408:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40340a:	4b20      	ldr	r3, [pc, #128]	; (40348c <pmc_enable_waitmode+0x88>)
  40340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40340e:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  403410:	687b      	ldr	r3, [r7, #4]
  403412:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  403416:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  403418:	687b      	ldr	r3, [r7, #4]
  40341a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  40341e:	607b      	str	r3, [r7, #4]
#endif
	PMC->PMC_FSMR = i;
  403420:	4a1a      	ldr	r2, [pc, #104]	; (40348c <pmc_enable_waitmode+0x88>)
  403422:	687b      	ldr	r3, [r7, #4]
  403424:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  403426:	4919      	ldr	r1, [pc, #100]	; (40348c <pmc_enable_waitmode+0x88>)
  403428:	4b18      	ldr	r3, [pc, #96]	; (40348c <pmc_enable_waitmode+0x88>)
  40342a:	6a1a      	ldr	r2, [r3, #32]
  40342c:	4b18      	ldr	r3, [pc, #96]	; (403490 <pmc_enable_waitmode+0x8c>)
  40342e:	4313      	orrs	r3, r2
  403430:	620b      	str	r3, [r1, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403432:	bf00      	nop
  403434:	4b15      	ldr	r3, [pc, #84]	; (40348c <pmc_enable_waitmode+0x88>)
  403436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403438:	f003 0308 	and.w	r3, r3, #8
  40343c:	2b00      	cmp	r3, #0
  40343e:	d0f9      	beq.n	403434 <pmc_enable_waitmode+0x30>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  403440:	2300      	movs	r3, #0
  403442:	607b      	str	r3, [r7, #4]
  403444:	e003      	b.n	40344e <pmc_enable_waitmode+0x4a>
  __ASM volatile ("nop");
  403446:	bf00      	nop
  403448:	687b      	ldr	r3, [r7, #4]
  40344a:	3301      	adds	r3, #1
  40344c:	607b      	str	r3, [r7, #4]
  40344e:	687b      	ldr	r3, [r7, #4]
  403450:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  403454:	d3f7      	bcc.n	403446 <pmc_enable_waitmode+0x42>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  403456:	bf00      	nop
  403458:	4b0c      	ldr	r3, [pc, #48]	; (40348c <pmc_enable_waitmode+0x88>)
  40345a:	6a1b      	ldr	r3, [r3, #32]
  40345c:	f003 0308 	and.w	r3, r3, #8
  403460:	2b00      	cmp	r3, #0
  403462:	d0f9      	beq.n	403458 <pmc_enable_waitmode+0x54>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  403464:	4b09      	ldr	r3, [pc, #36]	; (40348c <pmc_enable_waitmode+0x88>)
  403466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  403468:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  40346a:	687b      	ldr	r3, [r7, #4]
  40346c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  403470:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  403472:	687b      	ldr	r3, [r7, #4]
  403474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  403478:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  40347a:	4a04      	ldr	r2, [pc, #16]	; (40348c <pmc_enable_waitmode+0x88>)
  40347c:	687b      	ldr	r3, [r7, #4]
  40347e:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  403480:	bf00      	nop
  403482:	370c      	adds	r7, #12
  403484:	46bd      	mov	sp, r7
  403486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40348a:	4770      	bx	lr
  40348c:	400e0600 	.word	0x400e0600
  403490:	00370004 	.word	0x00370004

00403494 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  403494:	b590      	push	{r4, r7, lr}
  403496:	b099      	sub	sp, #100	; 0x64
  403498:	af00      	add	r7, sp, #0
  40349a:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  40349c:	687b      	ldr	r3, [r7, #4]
  40349e:	3b01      	subs	r3, #1
  4034a0:	2b04      	cmp	r3, #4
  4034a2:	f200 81a5 	bhi.w	4037f0 <pmc_sleep+0x35c>
  4034a6:	a201      	add	r2, pc, #4	; (adr r2, 4034ac <pmc_sleep+0x18>)
  4034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4034ac:	004034c1 	.word	0x004034c1
  4034b0:	004034c1 	.word	0x004034c1
  4034b4:	004034e1 	.word	0x004034e1
  4034b8:	004034e1 	.word	0x004034e1
  4034bc:	004037cf 	.word	0x004037cf
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4034c0:	4a72      	ldr	r2, [pc, #456]	; (40368c <pmc_sleep+0x1f8>)
  4034c2:	4b72      	ldr	r3, [pc, #456]	; (40368c <pmc_sleep+0x1f8>)
  4034c4:	691b      	ldr	r3, [r3, #16]
  4034c6:	f023 0304 	bic.w	r3, r3, #4
  4034ca:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4034cc:	4b70      	ldr	r3, [pc, #448]	; (403690 <pmc_sleep+0x1fc>)
  4034ce:	2201      	movs	r2, #1
  4034d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4034d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4034d6:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4034d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4034dc:	bf30      	wfi
		__DSB();
		__WFI();
		break;
  4034de:	e187      	b.n	4037f0 <pmc_sleep+0x35c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4034e0:	687b      	ldr	r3, [r7, #4]
  4034e2:	2b03      	cmp	r3, #3
  4034e4:	d103      	bne.n	4034ee <pmc_sleep+0x5a>
  4034e6:	2000      	movs	r0, #0
  4034e8:	4b6a      	ldr	r3, [pc, #424]	; (403694 <pmc_sleep+0x200>)
  4034ea:	4798      	blx	r3
  4034ec:	e003      	b.n	4034f6 <pmc_sleep+0x62>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4034ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  4034f2:	4b68      	ldr	r3, [pc, #416]	; (403694 <pmc_sleep+0x200>)
  4034f4:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4034f6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4034f8:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4034fc:	4b64      	ldr	r3, [pc, #400]	; (403690 <pmc_sleep+0x1fc>)
  4034fe:	2200      	movs	r2, #0
  403500:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  403502:	4b65      	ldr	r3, [pc, #404]	; (403698 <pmc_sleep+0x204>)
  403504:	2201      	movs	r2, #1
  403506:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  403508:	687b      	ldr	r3, [r7, #4]
  40350a:	2b04      	cmp	r3, #4
  40350c:	bf0c      	ite	eq
  40350e:	2301      	moveq	r3, #1
  403510:	2300      	movne	r3, #0
  403512:	b2da      	uxtb	r2, r3
  403514:	f107 031c 	add.w	r3, r7, #28
  403518:	643b      	str	r3, [r7, #64]	; 0x40
  40351a:	f107 0318 	add.w	r3, r7, #24
  40351e:	63fb      	str	r3, [r7, #60]	; 0x3c
  403520:	f107 0314 	add.w	r3, r7, #20
  403524:	63bb      	str	r3, [r7, #56]	; 0x38
  403526:	f107 0310 	add.w	r3, r7, #16
  40352a:	637b      	str	r3, [r7, #52]	; 0x34
  40352c:	f107 030c 	add.w	r3, r7, #12
  403530:	633b      	str	r3, [r7, #48]	; 0x30
  403532:	4613      	mov	r3, r2
  403534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  403538:	4b58      	ldr	r3, [pc, #352]	; (40369c <pmc_sleep+0x208>)
  40353a:	6a1b      	ldr	r3, [r3, #32]
  40353c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  40353e:	4b57      	ldr	r3, [pc, #348]	; (40369c <pmc_sleep+0x208>)
  403540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403542:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  403544:	4b56      	ldr	r3, [pc, #344]	; (4036a0 <pmc_sleep+0x20c>)
  403546:	681b      	ldr	r3, [r3, #0]
  403548:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  40354a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  40354c:	2b00      	cmp	r3, #0
  40354e:	d002      	beq.n	403556 <pmc_sleep+0xc2>
		*p_osc_setting = mor;
  403550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  403552:	6aba      	ldr	r2, [r7, #40]	; 0x28
  403554:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  403556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403558:	2b00      	cmp	r3, #0
  40355a:	d003      	beq.n	403564 <pmc_sleep+0xd0>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40355c:	4b4f      	ldr	r3, [pc, #316]	; (40369c <pmc_sleep+0x208>)
  40355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  403562:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  403564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403566:	2b00      	cmp	r3, #0
  403568:	d002      	beq.n	403570 <pmc_sleep+0xdc>
		*p_pll1_setting = 0;
  40356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40356c:	2200      	movs	r2, #0
  40356e:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  403570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403572:	2b00      	cmp	r3, #0
  403574:	d002      	beq.n	40357c <pmc_sleep+0xe8>
		*p_mck_setting  = mckr;
  403576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  403578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40357a:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  40357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40357e:	2b00      	cmp	r3, #0
  403580:	d002      	beq.n	403588 <pmc_sleep+0xf4>
		*p_fmr_setting  = fmr;
  403582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  403584:	6a3a      	ldr	r2, [r7, #32]
  403586:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  403588:	4944      	ldr	r1, [pc, #272]	; (40369c <pmc_sleep+0x208>)
  40358a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40358c:	4b45      	ldr	r3, [pc, #276]	; (4036a4 <pmc_sleep+0x210>)
  40358e:	4313      	orrs	r3, r2
  403590:	620b      	str	r3, [r1, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  403592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403594:	f003 0303 	and.w	r3, r3, #3
  403598:	2b01      	cmp	r3, #1
  40359a:	d90e      	bls.n	4035ba <pmc_sleep+0x126>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40359e:	f023 0303 	bic.w	r3, r3, #3
  4035a2:	f043 0301 	orr.w	r3, r3, #1
  4035a6:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  4035a8:	4a3c      	ldr	r2, [pc, #240]	; (40369c <pmc_sleep+0x208>)
  4035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035ac:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4035ae:	4b3b      	ldr	r3, [pc, #236]	; (40369c <pmc_sleep+0x208>)
  4035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4035b2:	f003 0308 	and.w	r3, r3, #8
  4035b6:	2b00      	cmp	r3, #0
  4035b8:	d0f9      	beq.n	4035ae <pmc_sleep+0x11a>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4035c0:	2b00      	cmp	r3, #0
  4035c2:	d00c      	beq.n	4035de <pmc_sleep+0x14a>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4035ca:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  4035cc:	4a33      	ldr	r2, [pc, #204]	; (40369c <pmc_sleep+0x208>)
  4035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4035d0:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4035d2:	4b32      	ldr	r3, [pc, #200]	; (40369c <pmc_sleep+0x208>)
  4035d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4035d6:	f003 0308 	and.w	r3, r3, #8
  4035da:	2b00      	cmp	r3, #0
  4035dc:	d0f9      	beq.n	4035d2 <pmc_sleep+0x13e>
	pmc_disable_pllack();
  4035de:	4b32      	ldr	r3, [pc, #200]	; (4036a8 <pmc_sleep+0x214>)
  4035e0:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4035e2:	4b2e      	ldr	r3, [pc, #184]	; (40369c <pmc_sleep+0x208>)
  4035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4035ea:	2b00      	cmp	r3, #0
  4035ec:	d0f9      	beq.n	4035e2 <pmc_sleep+0x14e>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4035ee:	492b      	ldr	r1, [pc, #172]	; (40369c <pmc_sleep+0x208>)
  4035f0:	4b2a      	ldr	r3, [pc, #168]	; (40369c <pmc_sleep+0x208>)
  4035f2:	6a1a      	ldr	r2, [r3, #32]
  4035f4:	4b2d      	ldr	r3, [pc, #180]	; (4036ac <pmc_sleep+0x218>)
  4035f6:	4013      	ands	r3, r2
  4035f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4035fc:	620b      	str	r3, [r1, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4035fe:	4b27      	ldr	r3, [pc, #156]	; (40369c <pmc_sleep+0x208>)
  403600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403606:	2b00      	cmp	r3, #0
  403608:	d0f9      	beq.n	4035fe <pmc_sleep+0x16a>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40360a:	4a25      	ldr	r2, [pc, #148]	; (4036a0 <pmc_sleep+0x20c>)
  40360c:	6a3b      	ldr	r3, [r7, #32]
  40360e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  403612:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  403614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  403618:	2b00      	cmp	r3, #0
  40361a:	d007      	beq.n	40362c <pmc_sleep+0x198>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40361c:	491f      	ldr	r1, [pc, #124]	; (40369c <pmc_sleep+0x208>)
  40361e:	4b1f      	ldr	r3, [pc, #124]	; (40369c <pmc_sleep+0x208>)
  403620:	6a1a      	ldr	r2, [r3, #32]
  403622:	4b23      	ldr	r3, [pc, #140]	; (4036b0 <pmc_sleep+0x21c>)
  403624:	4013      	ands	r3, r2
  403626:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40362a:	620b      	str	r3, [r1, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  40362c:	4b18      	ldr	r3, [pc, #96]	; (403690 <pmc_sleep+0x1fc>)
  40362e:	2201      	movs	r2, #1
  403630:	701a      	strb	r2, [r3, #0]
  403632:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403636:	b662      	cpsie	i

		pmc_enable_waitmode();
  403638:	4b1e      	ldr	r3, [pc, #120]	; (4036b4 <pmc_sleep+0x220>)
  40363a:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40363c:	b672      	cpsid	i
  40363e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  403642:	4b13      	ldr	r3, [pc, #76]	; (403690 <pmc_sleep+0x1fc>)
  403644:	2200      	movs	r2, #0
  403646:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  403648:	69fc      	ldr	r4, [r7, #28]
  40364a:	69b8      	ldr	r0, [r7, #24]
  40364c:	6979      	ldr	r1, [r7, #20]
  40364e:	693a      	ldr	r2, [r7, #16]
  403650:	68fb      	ldr	r3, [r7, #12]
  403652:	65fc      	str	r4, [r7, #92]	; 0x5c
  403654:	65b8      	str	r0, [r7, #88]	; 0x58
  403656:	6579      	str	r1, [r7, #84]	; 0x54
  403658:	653a      	str	r2, [r7, #80]	; 0x50
  40365a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  40365c:	2300      	movs	r3, #0
  40365e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  403660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  403662:	f003 0302 	and.w	r3, r3, #2
  403666:	2b00      	cmp	r3, #0
  403668:	d02c      	beq.n	4036c4 <pmc_sleep+0x230>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40366a:	490c      	ldr	r1, [pc, #48]	; (40369c <pmc_sleep+0x208>)
  40366c:	4b0b      	ldr	r3, [pc, #44]	; (40369c <pmc_sleep+0x208>)
  40366e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403670:	4a11      	ldr	r2, [pc, #68]	; (4036b8 <pmc_sleep+0x224>)
  403672:	401a      	ands	r2, r3
  403674:	4b11      	ldr	r3, [pc, #68]	; (4036bc <pmc_sleep+0x228>)
  403676:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  403678:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40367a:	4908      	ldr	r1, [pc, #32]	; (40369c <pmc_sleep+0x208>)
  40367c:	4b07      	ldr	r3, [pc, #28]	; (40369c <pmc_sleep+0x208>)
  40367e:	6a1a      	ldr	r2, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  403680:	4b0f      	ldr	r3, [pc, #60]	; (4036c0 <pmc_sleep+0x22c>)
  403682:	4013      	ands	r3, r2
  403684:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403688:	620b      	str	r3, [r1, #32]
  40368a:	e04e      	b.n	40372a <pmc_sleep+0x296>
  40368c:	e000ed00 	.word	0xe000ed00
  403690:	20400000 	.word	0x20400000
  403694:	004033e5 	.word	0x004033e5
  403698:	20400e10 	.word	0x20400e10
  40369c:	400e0600 	.word	0x400e0600
  4036a0:	400e0c00 	.word	0x400e0c00
  4036a4:	00370008 	.word	0x00370008
  4036a8:	00403355 	.word	0x00403355
  4036ac:	fec8ffff 	.word	0xfec8ffff
  4036b0:	ffc8fffe 	.word	0xffc8fffe
  4036b4:	00403405 	.word	0x00403405
  4036b8:	fec8fffc 	.word	0xfec8fffc
  4036bc:	01370002 	.word	0x01370002
  4036c0:	ffc8ff87 	.word	0xffc8ff87
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4036c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  4036c6:	f003 0301 	and.w	r3, r3, #1
  4036ca:	2b00      	cmp	r3, #0
  4036cc:	d02d      	beq.n	40372a <pmc_sleep+0x296>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4036ce:	4b4a      	ldr	r3, [pc, #296]	; (4037f8 <pmc_sleep+0x364>)
  4036d0:	6a1b      	ldr	r3, [r3, #32]
  4036d2:	f003 0301 	and.w	r3, r3, #1
  4036d6:	2b00      	cmp	r3, #0
  4036d8:	d10d      	bne.n	4036f6 <pmc_sleep+0x262>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4036da:	4947      	ldr	r1, [pc, #284]	; (4037f8 <pmc_sleep+0x364>)
  4036dc:	4b46      	ldr	r3, [pc, #280]	; (4037f8 <pmc_sleep+0x364>)
  4036de:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  4036e0:	4a46      	ldr	r2, [pc, #280]	; (4037fc <pmc_sleep+0x368>)
  4036e2:	401a      	ands	r2, r3
  4036e4:	4b46      	ldr	r3, [pc, #280]	; (403800 <pmc_sleep+0x36c>)
  4036e6:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4036e8:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4036ea:	4b43      	ldr	r3, [pc, #268]	; (4037f8 <pmc_sleep+0x364>)
  4036ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4036ee:	f003 0301 	and.w	r3, r3, #1
  4036f2:	2b00      	cmp	r3, #0
  4036f4:	d0f9      	beq.n	4036ea <pmc_sleep+0x256>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  4036f6:	4b40      	ldr	r3, [pc, #256]	; (4037f8 <pmc_sleep+0x364>)
  4036f8:	6a1b      	ldr	r3, [r3, #32]
  4036fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4036fe:	2b00      	cmp	r3, #0
  403700:	d10b      	bne.n	40371a <pmc_sleep+0x286>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  403702:	493d      	ldr	r1, [pc, #244]	; (4037f8 <pmc_sleep+0x364>)
  403704:	4b3c      	ldr	r3, [pc, #240]	; (4037f8 <pmc_sleep+0x364>)
  403706:	6a1a      	ldr	r2, [r3, #32]
  403708:	4b3e      	ldr	r3, [pc, #248]	; (403804 <pmc_sleep+0x370>)
  40370a:	4313      	orrs	r3, r2
  40370c:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40370e:	4b3a      	ldr	r3, [pc, #232]	; (4037f8 <pmc_sleep+0x364>)
  403710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  403716:	2b00      	cmp	r3, #0
  403718:	d0f9      	beq.n	40370e <pmc_sleep+0x27a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40371a:	4937      	ldr	r1, [pc, #220]	; (4037f8 <pmc_sleep+0x364>)
  40371c:	4b36      	ldr	r3, [pc, #216]	; (4037f8 <pmc_sleep+0x364>)
  40371e:	6a1a      	ldr	r2, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  403720:	4b39      	ldr	r3, [pc, #228]	; (403808 <pmc_sleep+0x374>)
  403722:	4013      	ands	r3, r2
  403724:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  403728:	620b      	str	r3, [r1, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40372a:	6dba      	ldr	r2, [r7, #88]	; 0x58
  40372c:	4b37      	ldr	r3, [pc, #220]	; (40380c <pmc_sleep+0x378>)
  40372e:	4013      	ands	r3, r2
  403730:	2b00      	cmp	r3, #0
  403732:	d008      	beq.n	403746 <pmc_sleep+0x2b2>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  403734:	4a30      	ldr	r2, [pc, #192]	; (4037f8 <pmc_sleep+0x364>)
  403736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  403738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40373c:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40373e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  403740:	f043 0302 	orr.w	r3, r3, #2
  403744:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  403746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  403748:	f003 0303 	and.w	r3, r3, #3
  40374c:	2b02      	cmp	r3, #2
  40374e:	d105      	bne.n	40375c <pmc_sleep+0x2c8>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  403750:	4b29      	ldr	r3, [pc, #164]	; (4037f8 <pmc_sleep+0x364>)
  403752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403754:	f003 0302 	and.w	r3, r3, #2
  403758:	2b00      	cmp	r3, #0
  40375a:	d0f9      	beq.n	403750 <pmc_sleep+0x2bc>
	mckr = PMC->PMC_MCKR;
  40375c:	4b26      	ldr	r3, [pc, #152]	; (4037f8 <pmc_sleep+0x364>)
  40375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403760:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  403762:	4925      	ldr	r1, [pc, #148]	; (4037f8 <pmc_sleep+0x364>)
  403764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  403766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40376a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40376c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403770:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  403772:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403774:	4b20      	ldr	r3, [pc, #128]	; (4037f8 <pmc_sleep+0x364>)
  403776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403778:	f003 0308 	and.w	r3, r3, #8
  40377c:	2b00      	cmp	r3, #0
  40377e:	d0f9      	beq.n	403774 <pmc_sleep+0x2e0>
	EFC0->EEFC_FMR = fmr_setting;
  403780:	4a23      	ldr	r2, [pc, #140]	; (403810 <pmc_sleep+0x37c>)
  403782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403784:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  403786:	4a1c      	ldr	r2, [pc, #112]	; (4037f8 <pmc_sleep+0x364>)
  403788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40378a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40378c:	4b1a      	ldr	r3, [pc, #104]	; (4037f8 <pmc_sleep+0x364>)
  40378e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403790:	f003 0308 	and.w	r3, r3, #8
  403794:	2b00      	cmp	r3, #0
  403796:	d0f9      	beq.n	40378c <pmc_sleep+0x2f8>
	while (!(PMC->PMC_SR & pll_sr));
  403798:	4b17      	ldr	r3, [pc, #92]	; (4037f8 <pmc_sleep+0x364>)
  40379a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40379e:	4013      	ands	r3, r2
  4037a0:	2b00      	cmp	r3, #0
  4037a2:	d0f9      	beq.n	403798 <pmc_sleep+0x304>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4037a4:	4b1b      	ldr	r3, [pc, #108]	; (403814 <pmc_sleep+0x380>)
  4037a6:	2200      	movs	r2, #0
  4037a8:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4037aa:	4b1b      	ldr	r3, [pc, #108]	; (403818 <pmc_sleep+0x384>)
  4037ac:	681b      	ldr	r3, [r3, #0]
  4037ae:	2b00      	cmp	r3, #0
  4037b0:	d005      	beq.n	4037be <pmc_sleep+0x32a>
			callback_clocks_restored();
  4037b2:	4b19      	ldr	r3, [pc, #100]	; (403818 <pmc_sleep+0x384>)
  4037b4:	681b      	ldr	r3, [r3, #0]
  4037b6:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4037b8:	4b17      	ldr	r3, [pc, #92]	; (403818 <pmc_sleep+0x384>)
  4037ba:	2200      	movs	r2, #0
  4037bc:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4037be:	4b17      	ldr	r3, [pc, #92]	; (40381c <pmc_sleep+0x388>)
  4037c0:	2201      	movs	r2, #1
  4037c2:	701a      	strb	r2, [r3, #0]
  4037c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4037c8:	b662      	cpsie	i

		break;
  4037ca:	bf00      	nop
  4037cc:	e010      	b.n	4037f0 <pmc_sleep+0x35c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4037ce:	4a14      	ldr	r2, [pc, #80]	; (403820 <pmc_sleep+0x38c>)
  4037d0:	4b13      	ldr	r3, [pc, #76]	; (403820 <pmc_sleep+0x38c>)
  4037d2:	691b      	ldr	r3, [r3, #16]
  4037d4:	f043 0304 	orr.w	r3, r3, #4
  4037d8:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4037da:	4b12      	ldr	r3, [pc, #72]	; (403824 <pmc_sleep+0x390>)
  4037dc:	4a12      	ldr	r2, [pc, #72]	; (403828 <pmc_sleep+0x394>)
  4037de:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4037e0:	4b0e      	ldr	r3, [pc, #56]	; (40381c <pmc_sleep+0x388>)
  4037e2:	2201      	movs	r2, #1
  4037e4:	701a      	strb	r2, [r3, #0]
  4037e6:	f3bf 8f5f 	dmb	sy
  4037ea:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4037ec:	bf30      	wfi
		__WFI() ;
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  4037ee:	bf00      	nop
#endif
	}
}
  4037f0:	bf00      	nop
  4037f2:	3764      	adds	r7, #100	; 0x64
  4037f4:	46bd      	mov	sp, r7
  4037f6:	bd90      	pop	{r4, r7, pc}
  4037f8:	400e0600 	.word	0x400e0600
  4037fc:	ffc8fffc 	.word	0xffc8fffc
  403800:	00370001 	.word	0x00370001
  403804:	01370000 	.word	0x01370000
  403808:	ffc8ff87 	.word	0xffc8ff87
  40380c:	07ff0000 	.word	0x07ff0000
  403810:	400e0c00 	.word	0x400e0c00
  403814:	20400e10 	.word	0x20400e10
  403818:	20400e14 	.word	0x20400e14
  40381c:	20400000 	.word	0x20400000
  403820:	e000ed00 	.word	0xe000ed00
  403824:	400e1810 	.word	0x400e1810
  403828:	a5000004 	.word	0xa5000004

0040382c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40382c:	b480      	push	{r7}
  40382e:	b083      	sub	sp, #12
  403830:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403832:	f3ef 8310 	mrs	r3, PRIMASK
  403836:	607b      	str	r3, [r7, #4]
  return(result);
  403838:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40383a:	2b00      	cmp	r3, #0
  40383c:	bf0c      	ite	eq
  40383e:	2301      	moveq	r3, #1
  403840:	2300      	movne	r3, #0
  403842:	b2db      	uxtb	r3, r3
  403844:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403846:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403848:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40384c:	4b04      	ldr	r3, [pc, #16]	; (403860 <cpu_irq_save+0x34>)
  40384e:	2200      	movs	r2, #0
  403850:	701a      	strb	r2, [r3, #0]
	return flags;
  403852:	683b      	ldr	r3, [r7, #0]
}
  403854:	4618      	mov	r0, r3
  403856:	370c      	adds	r7, #12
  403858:	46bd      	mov	sp, r7
  40385a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40385e:	4770      	bx	lr
  403860:	20400000 	.word	0x20400000

00403864 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  403864:	b480      	push	{r7}
  403866:	b083      	sub	sp, #12
  403868:	af00      	add	r7, sp, #0
  40386a:	6078      	str	r0, [r7, #4]
	return (flags);
  40386c:	687b      	ldr	r3, [r7, #4]
  40386e:	2b00      	cmp	r3, #0
  403870:	bf14      	ite	ne
  403872:	2301      	movne	r3, #1
  403874:	2300      	moveq	r3, #0
  403876:	b2db      	uxtb	r3, r3
}
  403878:	4618      	mov	r0, r3
  40387a:	370c      	adds	r7, #12
  40387c:	46bd      	mov	sp, r7
  40387e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403882:	4770      	bx	lr

00403884 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  403884:	b580      	push	{r7, lr}
  403886:	b082      	sub	sp, #8
  403888:	af00      	add	r7, sp, #0
  40388a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40388c:	6878      	ldr	r0, [r7, #4]
  40388e:	4b07      	ldr	r3, [pc, #28]	; (4038ac <cpu_irq_restore+0x28>)
  403890:	4798      	blx	r3
  403892:	4603      	mov	r3, r0
  403894:	2b00      	cmp	r3, #0
  403896:	d005      	beq.n	4038a4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  403898:	4b05      	ldr	r3, [pc, #20]	; (4038b0 <cpu_irq_restore+0x2c>)
  40389a:	2201      	movs	r2, #1
  40389c:	701a      	strb	r2, [r3, #0]
  40389e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4038a2:	b662      	cpsie	i
}
  4038a4:	bf00      	nop
  4038a6:	3708      	adds	r7, #8
  4038a8:	46bd      	mov	sp, r7
  4038aa:	bd80      	pop	{r7, pc}
  4038ac:	00403865 	.word	0x00403865
  4038b0:	20400000 	.word	0x20400000

004038b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4038b4:	b580      	push	{r7, lr}
  4038b6:	b084      	sub	sp, #16
  4038b8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4038ba:	4b1e      	ldr	r3, [pc, #120]	; (403934 <Reset_Handler+0x80>)
  4038bc:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4038be:	4b1e      	ldr	r3, [pc, #120]	; (403938 <Reset_Handler+0x84>)
  4038c0:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4038c2:	68fa      	ldr	r2, [r7, #12]
  4038c4:	68bb      	ldr	r3, [r7, #8]
  4038c6:	429a      	cmp	r2, r3
  4038c8:	d00c      	beq.n	4038e4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4038ca:	e007      	b.n	4038dc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4038cc:	68bb      	ldr	r3, [r7, #8]
  4038ce:	1d1a      	adds	r2, r3, #4
  4038d0:	60ba      	str	r2, [r7, #8]
  4038d2:	68fa      	ldr	r2, [r7, #12]
  4038d4:	1d11      	adds	r1, r2, #4
  4038d6:	60f9      	str	r1, [r7, #12]
  4038d8:	6812      	ldr	r2, [r2, #0]
  4038da:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  4038dc:	68bb      	ldr	r3, [r7, #8]
  4038de:	4a17      	ldr	r2, [pc, #92]	; (40393c <Reset_Handler+0x88>)
  4038e0:	4293      	cmp	r3, r2
  4038e2:	d3f3      	bcc.n	4038cc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4038e4:	4b16      	ldr	r3, [pc, #88]	; (403940 <Reset_Handler+0x8c>)
  4038e6:	60bb      	str	r3, [r7, #8]
  4038e8:	e004      	b.n	4038f4 <Reset_Handler+0x40>
                *pDest++ = 0;
  4038ea:	68bb      	ldr	r3, [r7, #8]
  4038ec:	1d1a      	adds	r2, r3, #4
  4038ee:	60ba      	str	r2, [r7, #8]
  4038f0:	2200      	movs	r2, #0
  4038f2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4038f4:	68bb      	ldr	r3, [r7, #8]
  4038f6:	4a13      	ldr	r2, [pc, #76]	; (403944 <Reset_Handler+0x90>)
  4038f8:	4293      	cmp	r3, r2
  4038fa:	d3f6      	bcc.n	4038ea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4038fc:	4b12      	ldr	r3, [pc, #72]	; (403948 <Reset_Handler+0x94>)
  4038fe:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403900:	4a12      	ldr	r2, [pc, #72]	; (40394c <Reset_Handler+0x98>)
  403902:	68fb      	ldr	r3, [r7, #12]
  403904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403908:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40390a:	4b11      	ldr	r3, [pc, #68]	; (403950 <Reset_Handler+0x9c>)
  40390c:	4798      	blx	r3
  40390e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  403910:	4a10      	ldr	r2, [pc, #64]	; (403954 <Reset_Handler+0xa0>)
  403912:	4b10      	ldr	r3, [pc, #64]	; (403954 <Reset_Handler+0xa0>)
  403914:	681b      	ldr	r3, [r3, #0]
  403916:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40391a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40391c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403920:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  403924:	6878      	ldr	r0, [r7, #4]
  403926:	4b0c      	ldr	r3, [pc, #48]	; (403958 <Reset_Handler+0xa4>)
  403928:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40392a:	4b0c      	ldr	r3, [pc, #48]	; (40395c <Reset_Handler+0xa8>)
  40392c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40392e:	4b0c      	ldr	r3, [pc, #48]	; (403960 <Reset_Handler+0xac>)
  403930:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  403932:	e7fe      	b.n	403932 <Reset_Handler+0x7e>
  403934:	00408f64 	.word	0x00408f64
  403938:	20400000 	.word	0x20400000
  40393c:	204009b8 	.word	0x204009b8
  403940:	204009b8 	.word	0x204009b8
  403944:	20400ea0 	.word	0x20400ea0
  403948:	00400000 	.word	0x00400000
  40394c:	e000ed00 	.word	0xe000ed00
  403950:	0040382d 	.word	0x0040382d
  403954:	e000ed88 	.word	0xe000ed88
  403958:	00403885 	.word	0x00403885
  40395c:	004043c1 	.word	0x004043c1
  403960:	00400c3d 	.word	0x00400c3d

00403964 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403964:	b480      	push	{r7}
  403966:	af00      	add	r7, sp, #0
        while (1) {
  403968:	e7fe      	b.n	403968 <Dummy_Handler+0x4>
	...

0040396c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40396c:	b480      	push	{r7}
  40396e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  403970:	4b52      	ldr	r3, [pc, #328]	; (403abc <SystemCoreClockUpdate+0x150>)
  403972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403974:	f003 0303 	and.w	r3, r3, #3
  403978:	2b01      	cmp	r3, #1
  40397a:	d014      	beq.n	4039a6 <SystemCoreClockUpdate+0x3a>
  40397c:	2b01      	cmp	r3, #1
  40397e:	d302      	bcc.n	403986 <SystemCoreClockUpdate+0x1a>
  403980:	2b02      	cmp	r3, #2
  403982:	d038      	beq.n	4039f6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  403984:	e07a      	b.n	403a7c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  403986:	4b4e      	ldr	r3, [pc, #312]	; (403ac0 <SystemCoreClockUpdate+0x154>)
  403988:	695b      	ldr	r3, [r3, #20]
  40398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40398e:	2b00      	cmp	r3, #0
  403990:	d004      	beq.n	40399c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403992:	4b4c      	ldr	r3, [pc, #304]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403994:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403998:	601a      	str	r2, [r3, #0]
    break;
  40399a:	e06f      	b.n	403a7c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40399c:	4b49      	ldr	r3, [pc, #292]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  40399e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4039a2:	601a      	str	r2, [r3, #0]
    break;
  4039a4:	e06a      	b.n	403a7c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4039a6:	4b45      	ldr	r3, [pc, #276]	; (403abc <SystemCoreClockUpdate+0x150>)
  4039a8:	6a1b      	ldr	r3, [r3, #32]
  4039aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4039ae:	2b00      	cmp	r3, #0
  4039b0:	d003      	beq.n	4039ba <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4039b2:	4b44      	ldr	r3, [pc, #272]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039b4:	4a44      	ldr	r2, [pc, #272]	; (403ac8 <SystemCoreClockUpdate+0x15c>)
  4039b6:	601a      	str	r2, [r3, #0]
    break;
  4039b8:	e060      	b.n	403a7c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4039ba:	4b42      	ldr	r3, [pc, #264]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039bc:	4a43      	ldr	r2, [pc, #268]	; (403acc <SystemCoreClockUpdate+0x160>)
  4039be:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4039c0:	4b3e      	ldr	r3, [pc, #248]	; (403abc <SystemCoreClockUpdate+0x150>)
  4039c2:	6a1b      	ldr	r3, [r3, #32]
  4039c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4039c8:	2b10      	cmp	r3, #16
  4039ca:	d004      	beq.n	4039d6 <SystemCoreClockUpdate+0x6a>
  4039cc:	2b20      	cmp	r3, #32
  4039ce:	d008      	beq.n	4039e2 <SystemCoreClockUpdate+0x76>
  4039d0:	2b00      	cmp	r3, #0
  4039d2:	d00e      	beq.n	4039f2 <SystemCoreClockUpdate+0x86>
          break;
  4039d4:	e00e      	b.n	4039f4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  4039d6:	4b3b      	ldr	r3, [pc, #236]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039d8:	681b      	ldr	r3, [r3, #0]
  4039da:	005b      	lsls	r3, r3, #1
  4039dc:	4a39      	ldr	r2, [pc, #228]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039de:	6013      	str	r3, [r2, #0]
          break;
  4039e0:	e008      	b.n	4039f4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4039e2:	4b38      	ldr	r3, [pc, #224]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039e4:	681a      	ldr	r2, [r3, #0]
  4039e6:	4613      	mov	r3, r2
  4039e8:	005b      	lsls	r3, r3, #1
  4039ea:	4413      	add	r3, r2
  4039ec:	4a35      	ldr	r2, [pc, #212]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  4039ee:	6013      	str	r3, [r2, #0]
          break;
  4039f0:	e000      	b.n	4039f4 <SystemCoreClockUpdate+0x88>
          break;
  4039f2:	bf00      	nop
    break;
  4039f4:	e042      	b.n	403a7c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4039f6:	4b31      	ldr	r3, [pc, #196]	; (403abc <SystemCoreClockUpdate+0x150>)
  4039f8:	6a1b      	ldr	r3, [r3, #32]
  4039fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4039fe:	2b00      	cmp	r3, #0
  403a00:	d003      	beq.n	403a0a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  403a02:	4b30      	ldr	r3, [pc, #192]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a04:	4a30      	ldr	r2, [pc, #192]	; (403ac8 <SystemCoreClockUpdate+0x15c>)
  403a06:	601a      	str	r2, [r3, #0]
  403a08:	e01c      	b.n	403a44 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403a0a:	4b2e      	ldr	r3, [pc, #184]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a0c:	4a2f      	ldr	r2, [pc, #188]	; (403acc <SystemCoreClockUpdate+0x160>)
  403a0e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  403a10:	4b2a      	ldr	r3, [pc, #168]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a12:	6a1b      	ldr	r3, [r3, #32]
  403a14:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a18:	2b10      	cmp	r3, #16
  403a1a:	d004      	beq.n	403a26 <SystemCoreClockUpdate+0xba>
  403a1c:	2b20      	cmp	r3, #32
  403a1e:	d008      	beq.n	403a32 <SystemCoreClockUpdate+0xc6>
  403a20:	2b00      	cmp	r3, #0
  403a22:	d00e      	beq.n	403a42 <SystemCoreClockUpdate+0xd6>
          break;
  403a24:	e00e      	b.n	403a44 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  403a26:	4b27      	ldr	r3, [pc, #156]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a28:	681b      	ldr	r3, [r3, #0]
  403a2a:	005b      	lsls	r3, r3, #1
  403a2c:	4a25      	ldr	r2, [pc, #148]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a2e:	6013      	str	r3, [r2, #0]
          break;
  403a30:	e008      	b.n	403a44 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  403a32:	4b24      	ldr	r3, [pc, #144]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a34:	681a      	ldr	r2, [r3, #0]
  403a36:	4613      	mov	r3, r2
  403a38:	005b      	lsls	r3, r3, #1
  403a3a:	4413      	add	r3, r2
  403a3c:	4a21      	ldr	r2, [pc, #132]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a3e:	6013      	str	r3, [r2, #0]
          break;
  403a40:	e000      	b.n	403a44 <SystemCoreClockUpdate+0xd8>
          break;
  403a42:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  403a44:	4b1d      	ldr	r3, [pc, #116]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a48:	f003 0303 	and.w	r3, r3, #3
  403a4c:	2b02      	cmp	r3, #2
  403a4e:	d114      	bne.n	403a7a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403a50:	4b1a      	ldr	r3, [pc, #104]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  403a54:	0c1b      	lsrs	r3, r3, #16
  403a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
  403a5a:	3301      	adds	r3, #1
  403a5c:	4a19      	ldr	r2, [pc, #100]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a5e:	6812      	ldr	r2, [r2, #0]
  403a60:	fb02 f303 	mul.w	r3, r2, r3
  403a64:	4a17      	ldr	r2, [pc, #92]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a66:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403a68:	4b14      	ldr	r3, [pc, #80]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  403a6c:	b2db      	uxtb	r3, r3
  403a6e:	4a15      	ldr	r2, [pc, #84]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a70:	6812      	ldr	r2, [r2, #0]
  403a72:	fbb2 f3f3 	udiv	r3, r2, r3
  403a76:	4a13      	ldr	r2, [pc, #76]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a78:	6013      	str	r3, [r2, #0]
    break;
  403a7a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  403a7c:	4b0f      	ldr	r3, [pc, #60]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403a84:	2b70      	cmp	r3, #112	; 0x70
  403a86:	d108      	bne.n	403a9a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  403a88:	4b0e      	ldr	r3, [pc, #56]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a8a:	681b      	ldr	r3, [r3, #0]
  403a8c:	4a10      	ldr	r2, [pc, #64]	; (403ad0 <SystemCoreClockUpdate+0x164>)
  403a8e:	fba2 2303 	umull	r2, r3, r2, r3
  403a92:	085b      	lsrs	r3, r3, #1
  403a94:	4a0b      	ldr	r2, [pc, #44]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403a96:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  403a98:	e00a      	b.n	403ab0 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403a9a:	4b08      	ldr	r3, [pc, #32]	; (403abc <SystemCoreClockUpdate+0x150>)
  403a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403a9e:	091b      	lsrs	r3, r3, #4
  403aa0:	f003 0307 	and.w	r3, r3, #7
  403aa4:	4a07      	ldr	r2, [pc, #28]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403aa6:	6812      	ldr	r2, [r2, #0]
  403aa8:	fa22 f303 	lsr.w	r3, r2, r3
  403aac:	4a05      	ldr	r2, [pc, #20]	; (403ac4 <SystemCoreClockUpdate+0x158>)
  403aae:	6013      	str	r3, [r2, #0]
}
  403ab0:	bf00      	nop
  403ab2:	46bd      	mov	sp, r7
  403ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ab8:	4770      	bx	lr
  403aba:	bf00      	nop
  403abc:	400e0600 	.word	0x400e0600
  403ac0:	400e1810 	.word	0x400e1810
  403ac4:	20400008 	.word	0x20400008
  403ac8:	00b71b00 	.word	0x00b71b00
  403acc:	003d0900 	.word	0x003d0900
  403ad0:	aaaaaaab 	.word	0xaaaaaaab

00403ad4 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  403ad4:	b480      	push	{r7}
  403ad6:	b083      	sub	sp, #12
  403ad8:	af00      	add	r7, sp, #0
  403ada:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  403adc:	687b      	ldr	r3, [r7, #4]
  403ade:	4a1d      	ldr	r2, [pc, #116]	; (403b54 <system_init_flash+0x80>)
  403ae0:	4293      	cmp	r3, r2
  403ae2:	d804      	bhi.n	403aee <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403ae4:	4b1c      	ldr	r3, [pc, #112]	; (403b58 <system_init_flash+0x84>)
  403ae6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403aea:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  403aec:	e02b      	b.n	403b46 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  403aee:	687b      	ldr	r3, [r7, #4]
  403af0:	4a1a      	ldr	r2, [pc, #104]	; (403b5c <system_init_flash+0x88>)
  403af2:	4293      	cmp	r3, r2
  403af4:	d803      	bhi.n	403afe <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403af6:	4b18      	ldr	r3, [pc, #96]	; (403b58 <system_init_flash+0x84>)
  403af8:	4a19      	ldr	r2, [pc, #100]	; (403b60 <system_init_flash+0x8c>)
  403afa:	601a      	str	r2, [r3, #0]
}
  403afc:	e023      	b.n	403b46 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  403afe:	687b      	ldr	r3, [r7, #4]
  403b00:	4a18      	ldr	r2, [pc, #96]	; (403b64 <system_init_flash+0x90>)
  403b02:	4293      	cmp	r3, r2
  403b04:	d803      	bhi.n	403b0e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403b06:	4b14      	ldr	r3, [pc, #80]	; (403b58 <system_init_flash+0x84>)
  403b08:	4a17      	ldr	r2, [pc, #92]	; (403b68 <system_init_flash+0x94>)
  403b0a:	601a      	str	r2, [r3, #0]
}
  403b0c:	e01b      	b.n	403b46 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  403b0e:	687b      	ldr	r3, [r7, #4]
  403b10:	4a16      	ldr	r2, [pc, #88]	; (403b6c <system_init_flash+0x98>)
  403b12:	4293      	cmp	r3, r2
  403b14:	d803      	bhi.n	403b1e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403b16:	4b10      	ldr	r3, [pc, #64]	; (403b58 <system_init_flash+0x84>)
  403b18:	4a15      	ldr	r2, [pc, #84]	; (403b70 <system_init_flash+0x9c>)
  403b1a:	601a      	str	r2, [r3, #0]
}
  403b1c:	e013      	b.n	403b46 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  403b1e:	687b      	ldr	r3, [r7, #4]
  403b20:	4a14      	ldr	r2, [pc, #80]	; (403b74 <system_init_flash+0xa0>)
  403b22:	4293      	cmp	r3, r2
  403b24:	d804      	bhi.n	403b30 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403b26:	4b0c      	ldr	r3, [pc, #48]	; (403b58 <system_init_flash+0x84>)
  403b28:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  403b2c:	601a      	str	r2, [r3, #0]
}
  403b2e:	e00a      	b.n	403b46 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  403b30:	687b      	ldr	r3, [r7, #4]
  403b32:	4a11      	ldr	r2, [pc, #68]	; (403b78 <system_init_flash+0xa4>)
  403b34:	4293      	cmp	r3, r2
  403b36:	d803      	bhi.n	403b40 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403b38:	4b07      	ldr	r3, [pc, #28]	; (403b58 <system_init_flash+0x84>)
  403b3a:	4a10      	ldr	r2, [pc, #64]	; (403b7c <system_init_flash+0xa8>)
  403b3c:	601a      	str	r2, [r3, #0]
}
  403b3e:	e002      	b.n	403b46 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  403b40:	4b05      	ldr	r3, [pc, #20]	; (403b58 <system_init_flash+0x84>)
  403b42:	4a0f      	ldr	r2, [pc, #60]	; (403b80 <system_init_flash+0xac>)
  403b44:	601a      	str	r2, [r3, #0]
}
  403b46:	bf00      	nop
  403b48:	370c      	adds	r7, #12
  403b4a:	46bd      	mov	sp, r7
  403b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b50:	4770      	bx	lr
  403b52:	bf00      	nop
  403b54:	015ef3bf 	.word	0x015ef3bf
  403b58:	400e0c00 	.word	0x400e0c00
  403b5c:	02bde77f 	.word	0x02bde77f
  403b60:	04000100 	.word	0x04000100
  403b64:	041cdb3f 	.word	0x041cdb3f
  403b68:	04000200 	.word	0x04000200
  403b6c:	057bceff 	.word	0x057bceff
  403b70:	04000300 	.word	0x04000300
  403b74:	06dac2bf 	.word	0x06dac2bf
  403b78:	0839b67f 	.word	0x0839b67f
  403b7c:	04000500 	.word	0x04000500
  403b80:	04000600 	.word	0x04000600

00403b84 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  403b84:	b480      	push	{r7}
  403b86:	b085      	sub	sp, #20
  403b88:	af00      	add	r7, sp, #0
  403b8a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  403b8c:	4b10      	ldr	r3, [pc, #64]	; (403bd0 <_sbrk+0x4c>)
  403b8e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  403b90:	4b10      	ldr	r3, [pc, #64]	; (403bd4 <_sbrk+0x50>)
  403b92:	681b      	ldr	r3, [r3, #0]
  403b94:	2b00      	cmp	r3, #0
  403b96:	d102      	bne.n	403b9e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  403b98:	4b0e      	ldr	r3, [pc, #56]	; (403bd4 <_sbrk+0x50>)
  403b9a:	4a0f      	ldr	r2, [pc, #60]	; (403bd8 <_sbrk+0x54>)
  403b9c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403b9e:	4b0d      	ldr	r3, [pc, #52]	; (403bd4 <_sbrk+0x50>)
  403ba0:	681b      	ldr	r3, [r3, #0]
  403ba2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  403ba4:	68ba      	ldr	r2, [r7, #8]
  403ba6:	687b      	ldr	r3, [r7, #4]
  403ba8:	441a      	add	r2, r3
  403baa:	68fb      	ldr	r3, [r7, #12]
  403bac:	429a      	cmp	r2, r3
  403bae:	dd02      	ble.n	403bb6 <_sbrk+0x32>
		return (caddr_t) -1;	
  403bb0:	f04f 33ff 	mov.w	r3, #4294967295
  403bb4:	e006      	b.n	403bc4 <_sbrk+0x40>
	}

	heap += incr;
  403bb6:	4b07      	ldr	r3, [pc, #28]	; (403bd4 <_sbrk+0x50>)
  403bb8:	681a      	ldr	r2, [r3, #0]
  403bba:	687b      	ldr	r3, [r7, #4]
  403bbc:	4413      	add	r3, r2
  403bbe:	4a05      	ldr	r2, [pc, #20]	; (403bd4 <_sbrk+0x50>)
  403bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  403bc2:	68bb      	ldr	r3, [r7, #8]
}
  403bc4:	4618      	mov	r0, r3
  403bc6:	3714      	adds	r7, #20
  403bc8:	46bd      	mov	sp, r7
  403bca:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bce:	4770      	bx	lr
  403bd0:	2045fffc 	.word	0x2045fffc
  403bd4:	20400e18 	.word	0x20400e18
  403bd8:	204030a0 	.word	0x204030a0

00403bdc <__aeabi_drsub>:
  403bdc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403be0:	e002      	b.n	403be8 <__adddf3>
  403be2:	bf00      	nop

00403be4 <__aeabi_dsub>:
  403be4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403be8 <__adddf3>:
  403be8:	b530      	push	{r4, r5, lr}
  403bea:	ea4f 0441 	mov.w	r4, r1, lsl #1
  403bee:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403bf2:	ea94 0f05 	teq	r4, r5
  403bf6:	bf08      	it	eq
  403bf8:	ea90 0f02 	teqeq	r0, r2
  403bfc:	bf1f      	itttt	ne
  403bfe:	ea54 0c00 	orrsne.w	ip, r4, r0
  403c02:	ea55 0c02 	orrsne.w	ip, r5, r2
  403c06:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403c0a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403c0e:	f000 80e2 	beq.w	403dd6 <__adddf3+0x1ee>
  403c12:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403c16:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403c1a:	bfb8      	it	lt
  403c1c:	426d      	neglt	r5, r5
  403c1e:	dd0c      	ble.n	403c3a <__adddf3+0x52>
  403c20:	442c      	add	r4, r5
  403c22:	ea80 0202 	eor.w	r2, r0, r2
  403c26:	ea81 0303 	eor.w	r3, r1, r3
  403c2a:	ea82 0000 	eor.w	r0, r2, r0
  403c2e:	ea83 0101 	eor.w	r1, r3, r1
  403c32:	ea80 0202 	eor.w	r2, r0, r2
  403c36:	ea81 0303 	eor.w	r3, r1, r3
  403c3a:	2d36      	cmp	r5, #54	; 0x36
  403c3c:	bf88      	it	hi
  403c3e:	bd30      	pophi	{r4, r5, pc}
  403c40:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403c44:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403c48:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403c4c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403c50:	d002      	beq.n	403c58 <__adddf3+0x70>
  403c52:	4240      	negs	r0, r0
  403c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403c58:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403c5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403c60:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403c64:	d002      	beq.n	403c6c <__adddf3+0x84>
  403c66:	4252      	negs	r2, r2
  403c68:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403c6c:	ea94 0f05 	teq	r4, r5
  403c70:	f000 80a7 	beq.w	403dc2 <__adddf3+0x1da>
  403c74:	f1a4 0401 	sub.w	r4, r4, #1
  403c78:	f1d5 0e20 	rsbs	lr, r5, #32
  403c7c:	db0d      	blt.n	403c9a <__adddf3+0xb2>
  403c7e:	fa02 fc0e 	lsl.w	ip, r2, lr
  403c82:	fa22 f205 	lsr.w	r2, r2, r5
  403c86:	1880      	adds	r0, r0, r2
  403c88:	f141 0100 	adc.w	r1, r1, #0
  403c8c:	fa03 f20e 	lsl.w	r2, r3, lr
  403c90:	1880      	adds	r0, r0, r2
  403c92:	fa43 f305 	asr.w	r3, r3, r5
  403c96:	4159      	adcs	r1, r3
  403c98:	e00e      	b.n	403cb8 <__adddf3+0xd0>
  403c9a:	f1a5 0520 	sub.w	r5, r5, #32
  403c9e:	f10e 0e20 	add.w	lr, lr, #32
  403ca2:	2a01      	cmp	r2, #1
  403ca4:	fa03 fc0e 	lsl.w	ip, r3, lr
  403ca8:	bf28      	it	cs
  403caa:	f04c 0c02 	orrcs.w	ip, ip, #2
  403cae:	fa43 f305 	asr.w	r3, r3, r5
  403cb2:	18c0      	adds	r0, r0, r3
  403cb4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403cb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403cbc:	d507      	bpl.n	403cce <__adddf3+0xe6>
  403cbe:	f04f 0e00 	mov.w	lr, #0
  403cc2:	f1dc 0c00 	rsbs	ip, ip, #0
  403cc6:	eb7e 0000 	sbcs.w	r0, lr, r0
  403cca:	eb6e 0101 	sbc.w	r1, lr, r1
  403cce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403cd2:	d31b      	bcc.n	403d0c <__adddf3+0x124>
  403cd4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403cd8:	d30c      	bcc.n	403cf4 <__adddf3+0x10c>
  403cda:	0849      	lsrs	r1, r1, #1
  403cdc:	ea5f 0030 	movs.w	r0, r0, rrx
  403ce0:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403ce4:	f104 0401 	add.w	r4, r4, #1
  403ce8:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403cec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403cf0:	f080 809a 	bcs.w	403e28 <__adddf3+0x240>
  403cf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403cf8:	bf08      	it	eq
  403cfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403cfe:	f150 0000 	adcs.w	r0, r0, #0
  403d02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403d06:	ea41 0105 	orr.w	r1, r1, r5
  403d0a:	bd30      	pop	{r4, r5, pc}
  403d0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403d10:	4140      	adcs	r0, r0
  403d12:	eb41 0101 	adc.w	r1, r1, r1
  403d16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403d1a:	f1a4 0401 	sub.w	r4, r4, #1
  403d1e:	d1e9      	bne.n	403cf4 <__adddf3+0x10c>
  403d20:	f091 0f00 	teq	r1, #0
  403d24:	bf04      	itt	eq
  403d26:	4601      	moveq	r1, r0
  403d28:	2000      	moveq	r0, #0
  403d2a:	fab1 f381 	clz	r3, r1
  403d2e:	bf08      	it	eq
  403d30:	3320      	addeq	r3, #32
  403d32:	f1a3 030b 	sub.w	r3, r3, #11
  403d36:	f1b3 0220 	subs.w	r2, r3, #32
  403d3a:	da0c      	bge.n	403d56 <__adddf3+0x16e>
  403d3c:	320c      	adds	r2, #12
  403d3e:	dd08      	ble.n	403d52 <__adddf3+0x16a>
  403d40:	f102 0c14 	add.w	ip, r2, #20
  403d44:	f1c2 020c 	rsb	r2, r2, #12
  403d48:	fa01 f00c 	lsl.w	r0, r1, ip
  403d4c:	fa21 f102 	lsr.w	r1, r1, r2
  403d50:	e00c      	b.n	403d6c <__adddf3+0x184>
  403d52:	f102 0214 	add.w	r2, r2, #20
  403d56:	bfd8      	it	le
  403d58:	f1c2 0c20 	rsble	ip, r2, #32
  403d5c:	fa01 f102 	lsl.w	r1, r1, r2
  403d60:	fa20 fc0c 	lsr.w	ip, r0, ip
  403d64:	bfdc      	itt	le
  403d66:	ea41 010c 	orrle.w	r1, r1, ip
  403d6a:	4090      	lslle	r0, r2
  403d6c:	1ae4      	subs	r4, r4, r3
  403d6e:	bfa2      	ittt	ge
  403d70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403d74:	4329      	orrge	r1, r5
  403d76:	bd30      	popge	{r4, r5, pc}
  403d78:	ea6f 0404 	mvn.w	r4, r4
  403d7c:	3c1f      	subs	r4, #31
  403d7e:	da1c      	bge.n	403dba <__adddf3+0x1d2>
  403d80:	340c      	adds	r4, #12
  403d82:	dc0e      	bgt.n	403da2 <__adddf3+0x1ba>
  403d84:	f104 0414 	add.w	r4, r4, #20
  403d88:	f1c4 0220 	rsb	r2, r4, #32
  403d8c:	fa20 f004 	lsr.w	r0, r0, r4
  403d90:	fa01 f302 	lsl.w	r3, r1, r2
  403d94:	ea40 0003 	orr.w	r0, r0, r3
  403d98:	fa21 f304 	lsr.w	r3, r1, r4
  403d9c:	ea45 0103 	orr.w	r1, r5, r3
  403da0:	bd30      	pop	{r4, r5, pc}
  403da2:	f1c4 040c 	rsb	r4, r4, #12
  403da6:	f1c4 0220 	rsb	r2, r4, #32
  403daa:	fa20 f002 	lsr.w	r0, r0, r2
  403dae:	fa01 f304 	lsl.w	r3, r1, r4
  403db2:	ea40 0003 	orr.w	r0, r0, r3
  403db6:	4629      	mov	r1, r5
  403db8:	bd30      	pop	{r4, r5, pc}
  403dba:	fa21 f004 	lsr.w	r0, r1, r4
  403dbe:	4629      	mov	r1, r5
  403dc0:	bd30      	pop	{r4, r5, pc}
  403dc2:	f094 0f00 	teq	r4, #0
  403dc6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403dca:	bf06      	itte	eq
  403dcc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403dd0:	3401      	addeq	r4, #1
  403dd2:	3d01      	subne	r5, #1
  403dd4:	e74e      	b.n	403c74 <__adddf3+0x8c>
  403dd6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403dda:	bf18      	it	ne
  403ddc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403de0:	d029      	beq.n	403e36 <__adddf3+0x24e>
  403de2:	ea94 0f05 	teq	r4, r5
  403de6:	bf08      	it	eq
  403de8:	ea90 0f02 	teqeq	r0, r2
  403dec:	d005      	beq.n	403dfa <__adddf3+0x212>
  403dee:	ea54 0c00 	orrs.w	ip, r4, r0
  403df2:	bf04      	itt	eq
  403df4:	4619      	moveq	r1, r3
  403df6:	4610      	moveq	r0, r2
  403df8:	bd30      	pop	{r4, r5, pc}
  403dfa:	ea91 0f03 	teq	r1, r3
  403dfe:	bf1e      	ittt	ne
  403e00:	2100      	movne	r1, #0
  403e02:	2000      	movne	r0, #0
  403e04:	bd30      	popne	{r4, r5, pc}
  403e06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403e0a:	d105      	bne.n	403e18 <__adddf3+0x230>
  403e0c:	0040      	lsls	r0, r0, #1
  403e0e:	4149      	adcs	r1, r1
  403e10:	bf28      	it	cs
  403e12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403e16:	bd30      	pop	{r4, r5, pc}
  403e18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403e1c:	bf3c      	itt	cc
  403e1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403e22:	bd30      	popcc	{r4, r5, pc}
  403e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403e28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403e2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403e30:	f04f 0000 	mov.w	r0, #0
  403e34:	bd30      	pop	{r4, r5, pc}
  403e36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403e3a:	bf1a      	itte	ne
  403e3c:	4619      	movne	r1, r3
  403e3e:	4610      	movne	r0, r2
  403e40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403e44:	bf1c      	itt	ne
  403e46:	460b      	movne	r3, r1
  403e48:	4602      	movne	r2, r0
  403e4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403e4e:	bf06      	itte	eq
  403e50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403e54:	ea91 0f03 	teqeq	r1, r3
  403e58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403e5c:	bd30      	pop	{r4, r5, pc}
  403e5e:	bf00      	nop

00403e60 <__aeabi_ui2d>:
  403e60:	f090 0f00 	teq	r0, #0
  403e64:	bf04      	itt	eq
  403e66:	2100      	moveq	r1, #0
  403e68:	4770      	bxeq	lr
  403e6a:	b530      	push	{r4, r5, lr}
  403e6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403e70:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403e74:	f04f 0500 	mov.w	r5, #0
  403e78:	f04f 0100 	mov.w	r1, #0
  403e7c:	e750      	b.n	403d20 <__adddf3+0x138>
  403e7e:	bf00      	nop

00403e80 <__aeabi_i2d>:
  403e80:	f090 0f00 	teq	r0, #0
  403e84:	bf04      	itt	eq
  403e86:	2100      	moveq	r1, #0
  403e88:	4770      	bxeq	lr
  403e8a:	b530      	push	{r4, r5, lr}
  403e8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403e90:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403e94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403e98:	bf48      	it	mi
  403e9a:	4240      	negmi	r0, r0
  403e9c:	f04f 0100 	mov.w	r1, #0
  403ea0:	e73e      	b.n	403d20 <__adddf3+0x138>
  403ea2:	bf00      	nop

00403ea4 <__aeabi_f2d>:
  403ea4:	0042      	lsls	r2, r0, #1
  403ea6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403eaa:	ea4f 0131 	mov.w	r1, r1, rrx
  403eae:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403eb2:	bf1f      	itttt	ne
  403eb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403eb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403ebc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403ec0:	4770      	bxne	lr
  403ec2:	f092 0f00 	teq	r2, #0
  403ec6:	bf14      	ite	ne
  403ec8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403ecc:	4770      	bxeq	lr
  403ece:	b530      	push	{r4, r5, lr}
  403ed0:	f44f 7460 	mov.w	r4, #896	; 0x380
  403ed4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403ed8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403edc:	e720      	b.n	403d20 <__adddf3+0x138>
  403ede:	bf00      	nop

00403ee0 <__aeabi_ul2d>:
  403ee0:	ea50 0201 	orrs.w	r2, r0, r1
  403ee4:	bf08      	it	eq
  403ee6:	4770      	bxeq	lr
  403ee8:	b530      	push	{r4, r5, lr}
  403eea:	f04f 0500 	mov.w	r5, #0
  403eee:	e00a      	b.n	403f06 <__aeabi_l2d+0x16>

00403ef0 <__aeabi_l2d>:
  403ef0:	ea50 0201 	orrs.w	r2, r0, r1
  403ef4:	bf08      	it	eq
  403ef6:	4770      	bxeq	lr
  403ef8:	b530      	push	{r4, r5, lr}
  403efa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403efe:	d502      	bpl.n	403f06 <__aeabi_l2d+0x16>
  403f00:	4240      	negs	r0, r0
  403f02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403f06:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403f0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403f0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403f12:	f43f aedc 	beq.w	403cce <__adddf3+0xe6>
  403f16:	f04f 0203 	mov.w	r2, #3
  403f1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403f1e:	bf18      	it	ne
  403f20:	3203      	addne	r2, #3
  403f22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403f26:	bf18      	it	ne
  403f28:	3203      	addne	r2, #3
  403f2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403f2e:	f1c2 0320 	rsb	r3, r2, #32
  403f32:	fa00 fc03 	lsl.w	ip, r0, r3
  403f36:	fa20 f002 	lsr.w	r0, r0, r2
  403f3a:	fa01 fe03 	lsl.w	lr, r1, r3
  403f3e:	ea40 000e 	orr.w	r0, r0, lr
  403f42:	fa21 f102 	lsr.w	r1, r1, r2
  403f46:	4414      	add	r4, r2
  403f48:	e6c1      	b.n	403cce <__adddf3+0xe6>
  403f4a:	bf00      	nop

00403f4c <__aeabi_dmul>:
  403f4c:	b570      	push	{r4, r5, r6, lr}
  403f4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403f52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403f56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403f5a:	bf1d      	ittte	ne
  403f5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403f60:	ea94 0f0c 	teqne	r4, ip
  403f64:	ea95 0f0c 	teqne	r5, ip
  403f68:	f000 f8de 	bleq	404128 <__aeabi_dmul+0x1dc>
  403f6c:	442c      	add	r4, r5
  403f6e:	ea81 0603 	eor.w	r6, r1, r3
  403f72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403f76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403f7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  403f7e:	bf18      	it	ne
  403f80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403f84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403f8c:	d038      	beq.n	404000 <__aeabi_dmul+0xb4>
  403f8e:	fba0 ce02 	umull	ip, lr, r0, r2
  403f92:	f04f 0500 	mov.w	r5, #0
  403f96:	fbe1 e502 	umlal	lr, r5, r1, r2
  403f9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  403f9e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403fa2:	f04f 0600 	mov.w	r6, #0
  403fa6:	fbe1 5603 	umlal	r5, r6, r1, r3
  403faa:	f09c 0f00 	teq	ip, #0
  403fae:	bf18      	it	ne
  403fb0:	f04e 0e01 	orrne.w	lr, lr, #1
  403fb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403fb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403fbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403fc0:	d204      	bcs.n	403fcc <__aeabi_dmul+0x80>
  403fc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403fc6:	416d      	adcs	r5, r5
  403fc8:	eb46 0606 	adc.w	r6, r6, r6
  403fcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403fd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403fd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403fd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403fdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403fe0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403fe4:	bf88      	it	hi
  403fe6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403fea:	d81e      	bhi.n	40402a <__aeabi_dmul+0xde>
  403fec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403ff0:	bf08      	it	eq
  403ff2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403ff6:	f150 0000 	adcs.w	r0, r0, #0
  403ffa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403ffe:	bd70      	pop	{r4, r5, r6, pc}
  404000:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  404004:	ea46 0101 	orr.w	r1, r6, r1
  404008:	ea40 0002 	orr.w	r0, r0, r2
  40400c:	ea81 0103 	eor.w	r1, r1, r3
  404010:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  404014:	bfc2      	ittt	gt
  404016:	ebd4 050c 	rsbsgt	r5, r4, ip
  40401a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40401e:	bd70      	popgt	{r4, r5, r6, pc}
  404020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404024:	f04f 0e00 	mov.w	lr, #0
  404028:	3c01      	subs	r4, #1
  40402a:	f300 80ab 	bgt.w	404184 <__aeabi_dmul+0x238>
  40402e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  404032:	bfde      	ittt	le
  404034:	2000      	movle	r0, #0
  404036:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40403a:	bd70      	pople	{r4, r5, r6, pc}
  40403c:	f1c4 0400 	rsb	r4, r4, #0
  404040:	3c20      	subs	r4, #32
  404042:	da35      	bge.n	4040b0 <__aeabi_dmul+0x164>
  404044:	340c      	adds	r4, #12
  404046:	dc1b      	bgt.n	404080 <__aeabi_dmul+0x134>
  404048:	f104 0414 	add.w	r4, r4, #20
  40404c:	f1c4 0520 	rsb	r5, r4, #32
  404050:	fa00 f305 	lsl.w	r3, r0, r5
  404054:	fa20 f004 	lsr.w	r0, r0, r4
  404058:	fa01 f205 	lsl.w	r2, r1, r5
  40405c:	ea40 0002 	orr.w	r0, r0, r2
  404060:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  404064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404068:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40406c:	fa21 f604 	lsr.w	r6, r1, r4
  404070:	eb42 0106 	adc.w	r1, r2, r6
  404074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  404078:	bf08      	it	eq
  40407a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40407e:	bd70      	pop	{r4, r5, r6, pc}
  404080:	f1c4 040c 	rsb	r4, r4, #12
  404084:	f1c4 0520 	rsb	r5, r4, #32
  404088:	fa00 f304 	lsl.w	r3, r0, r4
  40408c:	fa20 f005 	lsr.w	r0, r0, r5
  404090:	fa01 f204 	lsl.w	r2, r1, r4
  404094:	ea40 0002 	orr.w	r0, r0, r2
  404098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40409c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4040a0:	f141 0100 	adc.w	r1, r1, #0
  4040a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4040a8:	bf08      	it	eq
  4040aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4040ae:	bd70      	pop	{r4, r5, r6, pc}
  4040b0:	f1c4 0520 	rsb	r5, r4, #32
  4040b4:	fa00 f205 	lsl.w	r2, r0, r5
  4040b8:	ea4e 0e02 	orr.w	lr, lr, r2
  4040bc:	fa20 f304 	lsr.w	r3, r0, r4
  4040c0:	fa01 f205 	lsl.w	r2, r1, r5
  4040c4:	ea43 0302 	orr.w	r3, r3, r2
  4040c8:	fa21 f004 	lsr.w	r0, r1, r4
  4040cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4040d0:	fa21 f204 	lsr.w	r2, r1, r4
  4040d4:	ea20 0002 	bic.w	r0, r0, r2
  4040d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4040dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4040e0:	bf08      	it	eq
  4040e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4040e6:	bd70      	pop	{r4, r5, r6, pc}
  4040e8:	f094 0f00 	teq	r4, #0
  4040ec:	d10f      	bne.n	40410e <__aeabi_dmul+0x1c2>
  4040ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4040f2:	0040      	lsls	r0, r0, #1
  4040f4:	eb41 0101 	adc.w	r1, r1, r1
  4040f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4040fc:	bf08      	it	eq
  4040fe:	3c01      	subeq	r4, #1
  404100:	d0f7      	beq.n	4040f2 <__aeabi_dmul+0x1a6>
  404102:	ea41 0106 	orr.w	r1, r1, r6
  404106:	f095 0f00 	teq	r5, #0
  40410a:	bf18      	it	ne
  40410c:	4770      	bxne	lr
  40410e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  404112:	0052      	lsls	r2, r2, #1
  404114:	eb43 0303 	adc.w	r3, r3, r3
  404118:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40411c:	bf08      	it	eq
  40411e:	3d01      	subeq	r5, #1
  404120:	d0f7      	beq.n	404112 <__aeabi_dmul+0x1c6>
  404122:	ea43 0306 	orr.w	r3, r3, r6
  404126:	4770      	bx	lr
  404128:	ea94 0f0c 	teq	r4, ip
  40412c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404130:	bf18      	it	ne
  404132:	ea95 0f0c 	teqne	r5, ip
  404136:	d00c      	beq.n	404152 <__aeabi_dmul+0x206>
  404138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40413c:	bf18      	it	ne
  40413e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404142:	d1d1      	bne.n	4040e8 <__aeabi_dmul+0x19c>
  404144:	ea81 0103 	eor.w	r1, r1, r3
  404148:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40414c:	f04f 0000 	mov.w	r0, #0
  404150:	bd70      	pop	{r4, r5, r6, pc}
  404152:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404156:	bf06      	itte	eq
  404158:	4610      	moveq	r0, r2
  40415a:	4619      	moveq	r1, r3
  40415c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  404160:	d019      	beq.n	404196 <__aeabi_dmul+0x24a>
  404162:	ea94 0f0c 	teq	r4, ip
  404166:	d102      	bne.n	40416e <__aeabi_dmul+0x222>
  404168:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40416c:	d113      	bne.n	404196 <__aeabi_dmul+0x24a>
  40416e:	ea95 0f0c 	teq	r5, ip
  404172:	d105      	bne.n	404180 <__aeabi_dmul+0x234>
  404174:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  404178:	bf1c      	itt	ne
  40417a:	4610      	movne	r0, r2
  40417c:	4619      	movne	r1, r3
  40417e:	d10a      	bne.n	404196 <__aeabi_dmul+0x24a>
  404180:	ea81 0103 	eor.w	r1, r1, r3
  404184:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  404188:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40418c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  404190:	f04f 0000 	mov.w	r0, #0
  404194:	bd70      	pop	{r4, r5, r6, pc}
  404196:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40419a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40419e:	bd70      	pop	{r4, r5, r6, pc}

004041a0 <__aeabi_ddiv>:
  4041a0:	b570      	push	{r4, r5, r6, lr}
  4041a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4041a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4041aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4041ae:	bf1d      	ittte	ne
  4041b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4041b4:	ea94 0f0c 	teqne	r4, ip
  4041b8:	ea95 0f0c 	teqne	r5, ip
  4041bc:	f000 f8a7 	bleq	40430e <__aeabi_ddiv+0x16e>
  4041c0:	eba4 0405 	sub.w	r4, r4, r5
  4041c4:	ea81 0e03 	eor.w	lr, r1, r3
  4041c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4041cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4041d0:	f000 8088 	beq.w	4042e4 <__aeabi_ddiv+0x144>
  4041d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4041d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4041dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4041e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4041e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4041e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4041ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4041f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4041f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4041f8:	429d      	cmp	r5, r3
  4041fa:	bf08      	it	eq
  4041fc:	4296      	cmpeq	r6, r2
  4041fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  404202:	f504 7440 	add.w	r4, r4, #768	; 0x300
  404206:	d202      	bcs.n	40420e <__aeabi_ddiv+0x6e>
  404208:	085b      	lsrs	r3, r3, #1
  40420a:	ea4f 0232 	mov.w	r2, r2, rrx
  40420e:	1ab6      	subs	r6, r6, r2
  404210:	eb65 0503 	sbc.w	r5, r5, r3
  404214:	085b      	lsrs	r3, r3, #1
  404216:	ea4f 0232 	mov.w	r2, r2, rrx
  40421a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40421e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  404222:	ebb6 0e02 	subs.w	lr, r6, r2
  404226:	eb75 0e03 	sbcs.w	lr, r5, r3
  40422a:	bf22      	ittt	cs
  40422c:	1ab6      	subcs	r6, r6, r2
  40422e:	4675      	movcs	r5, lr
  404230:	ea40 000c 	orrcs.w	r0, r0, ip
  404234:	085b      	lsrs	r3, r3, #1
  404236:	ea4f 0232 	mov.w	r2, r2, rrx
  40423a:	ebb6 0e02 	subs.w	lr, r6, r2
  40423e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404242:	bf22      	ittt	cs
  404244:	1ab6      	subcs	r6, r6, r2
  404246:	4675      	movcs	r5, lr
  404248:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40424c:	085b      	lsrs	r3, r3, #1
  40424e:	ea4f 0232 	mov.w	r2, r2, rrx
  404252:	ebb6 0e02 	subs.w	lr, r6, r2
  404256:	eb75 0e03 	sbcs.w	lr, r5, r3
  40425a:	bf22      	ittt	cs
  40425c:	1ab6      	subcs	r6, r6, r2
  40425e:	4675      	movcs	r5, lr
  404260:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404264:	085b      	lsrs	r3, r3, #1
  404266:	ea4f 0232 	mov.w	r2, r2, rrx
  40426a:	ebb6 0e02 	subs.w	lr, r6, r2
  40426e:	eb75 0e03 	sbcs.w	lr, r5, r3
  404272:	bf22      	ittt	cs
  404274:	1ab6      	subcs	r6, r6, r2
  404276:	4675      	movcs	r5, lr
  404278:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40427c:	ea55 0e06 	orrs.w	lr, r5, r6
  404280:	d018      	beq.n	4042b4 <__aeabi_ddiv+0x114>
  404282:	ea4f 1505 	mov.w	r5, r5, lsl #4
  404286:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40428a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40428e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  404292:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  404296:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40429a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40429e:	d1c0      	bne.n	404222 <__aeabi_ddiv+0x82>
  4042a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4042a4:	d10b      	bne.n	4042be <__aeabi_ddiv+0x11e>
  4042a6:	ea41 0100 	orr.w	r1, r1, r0
  4042aa:	f04f 0000 	mov.w	r0, #0
  4042ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4042b2:	e7b6      	b.n	404222 <__aeabi_ddiv+0x82>
  4042b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4042b8:	bf04      	itt	eq
  4042ba:	4301      	orreq	r1, r0
  4042bc:	2000      	moveq	r0, #0
  4042be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4042c2:	bf88      	it	hi
  4042c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4042c8:	f63f aeaf 	bhi.w	40402a <__aeabi_dmul+0xde>
  4042cc:	ebb5 0c03 	subs.w	ip, r5, r3
  4042d0:	bf04      	itt	eq
  4042d2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4042d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4042da:	f150 0000 	adcs.w	r0, r0, #0
  4042de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4042e2:	bd70      	pop	{r4, r5, r6, pc}
  4042e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4042e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4042ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4042f0:	bfc2      	ittt	gt
  4042f2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4042f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4042fa:	bd70      	popgt	{r4, r5, r6, pc}
  4042fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  404300:	f04f 0e00 	mov.w	lr, #0
  404304:	3c01      	subs	r4, #1
  404306:	e690      	b.n	40402a <__aeabi_dmul+0xde>
  404308:	ea45 0e06 	orr.w	lr, r5, r6
  40430c:	e68d      	b.n	40402a <__aeabi_dmul+0xde>
  40430e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  404312:	ea94 0f0c 	teq	r4, ip
  404316:	bf08      	it	eq
  404318:	ea95 0f0c 	teqeq	r5, ip
  40431c:	f43f af3b 	beq.w	404196 <__aeabi_dmul+0x24a>
  404320:	ea94 0f0c 	teq	r4, ip
  404324:	d10a      	bne.n	40433c <__aeabi_ddiv+0x19c>
  404326:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40432a:	f47f af34 	bne.w	404196 <__aeabi_dmul+0x24a>
  40432e:	ea95 0f0c 	teq	r5, ip
  404332:	f47f af25 	bne.w	404180 <__aeabi_dmul+0x234>
  404336:	4610      	mov	r0, r2
  404338:	4619      	mov	r1, r3
  40433a:	e72c      	b.n	404196 <__aeabi_dmul+0x24a>
  40433c:	ea95 0f0c 	teq	r5, ip
  404340:	d106      	bne.n	404350 <__aeabi_ddiv+0x1b0>
  404342:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  404346:	f43f aefd 	beq.w	404144 <__aeabi_dmul+0x1f8>
  40434a:	4610      	mov	r0, r2
  40434c:	4619      	mov	r1, r3
  40434e:	e722      	b.n	404196 <__aeabi_dmul+0x24a>
  404350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  404354:	bf18      	it	ne
  404356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40435a:	f47f aec5 	bne.w	4040e8 <__aeabi_dmul+0x19c>
  40435e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  404362:	f47f af0d 	bne.w	404180 <__aeabi_dmul+0x234>
  404366:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40436a:	f47f aeeb 	bne.w	404144 <__aeabi_dmul+0x1f8>
  40436e:	e712      	b.n	404196 <__aeabi_dmul+0x24a>

00404370 <__aeabi_d2iz>:
  404370:	ea4f 0241 	mov.w	r2, r1, lsl #1
  404374:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  404378:	d215      	bcs.n	4043a6 <__aeabi_d2iz+0x36>
  40437a:	d511      	bpl.n	4043a0 <__aeabi_d2iz+0x30>
  40437c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  404380:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  404384:	d912      	bls.n	4043ac <__aeabi_d2iz+0x3c>
  404386:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40438a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40438e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  404392:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404396:	fa23 f002 	lsr.w	r0, r3, r2
  40439a:	bf18      	it	ne
  40439c:	4240      	negne	r0, r0
  40439e:	4770      	bx	lr
  4043a0:	f04f 0000 	mov.w	r0, #0
  4043a4:	4770      	bx	lr
  4043a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4043aa:	d105      	bne.n	4043b8 <__aeabi_d2iz+0x48>
  4043ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  4043b0:	bf08      	it	eq
  4043b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4043b6:	4770      	bx	lr
  4043b8:	f04f 0000 	mov.w	r0, #0
  4043bc:	4770      	bx	lr
  4043be:	bf00      	nop

004043c0 <__libc_init_array>:
  4043c0:	b570      	push	{r4, r5, r6, lr}
  4043c2:	4e0f      	ldr	r6, [pc, #60]	; (404400 <__libc_init_array+0x40>)
  4043c4:	4d0f      	ldr	r5, [pc, #60]	; (404404 <__libc_init_array+0x44>)
  4043c6:	1b76      	subs	r6, r6, r5
  4043c8:	10b6      	asrs	r6, r6, #2
  4043ca:	bf18      	it	ne
  4043cc:	2400      	movne	r4, #0
  4043ce:	d005      	beq.n	4043dc <__libc_init_array+0x1c>
  4043d0:	3401      	adds	r4, #1
  4043d2:	f855 3b04 	ldr.w	r3, [r5], #4
  4043d6:	4798      	blx	r3
  4043d8:	42a6      	cmp	r6, r4
  4043da:	d1f9      	bne.n	4043d0 <__libc_init_array+0x10>
  4043dc:	4e0a      	ldr	r6, [pc, #40]	; (404408 <__libc_init_array+0x48>)
  4043de:	4d0b      	ldr	r5, [pc, #44]	; (40440c <__libc_init_array+0x4c>)
  4043e0:	1b76      	subs	r6, r6, r5
  4043e2:	f004 fda9 	bl	408f38 <_init>
  4043e6:	10b6      	asrs	r6, r6, #2
  4043e8:	bf18      	it	ne
  4043ea:	2400      	movne	r4, #0
  4043ec:	d006      	beq.n	4043fc <__libc_init_array+0x3c>
  4043ee:	3401      	adds	r4, #1
  4043f0:	f855 3b04 	ldr.w	r3, [r5], #4
  4043f4:	4798      	blx	r3
  4043f6:	42a6      	cmp	r6, r4
  4043f8:	d1f9      	bne.n	4043ee <__libc_init_array+0x2e>
  4043fa:	bd70      	pop	{r4, r5, r6, pc}
  4043fc:	bd70      	pop	{r4, r5, r6, pc}
  4043fe:	bf00      	nop
  404400:	00408f44 	.word	0x00408f44
  404404:	00408f44 	.word	0x00408f44
  404408:	00408f4c 	.word	0x00408f4c
  40440c:	00408f44 	.word	0x00408f44

00404410 <memset>:
  404410:	b470      	push	{r4, r5, r6}
  404412:	0786      	lsls	r6, r0, #30
  404414:	d046      	beq.n	4044a4 <memset+0x94>
  404416:	1e54      	subs	r4, r2, #1
  404418:	2a00      	cmp	r2, #0
  40441a:	d041      	beq.n	4044a0 <memset+0x90>
  40441c:	b2ca      	uxtb	r2, r1
  40441e:	4603      	mov	r3, r0
  404420:	e002      	b.n	404428 <memset+0x18>
  404422:	f114 34ff 	adds.w	r4, r4, #4294967295
  404426:	d33b      	bcc.n	4044a0 <memset+0x90>
  404428:	f803 2b01 	strb.w	r2, [r3], #1
  40442c:	079d      	lsls	r5, r3, #30
  40442e:	d1f8      	bne.n	404422 <memset+0x12>
  404430:	2c03      	cmp	r4, #3
  404432:	d92e      	bls.n	404492 <memset+0x82>
  404434:	b2cd      	uxtb	r5, r1
  404436:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40443a:	2c0f      	cmp	r4, #15
  40443c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404440:	d919      	bls.n	404476 <memset+0x66>
  404442:	f103 0210 	add.w	r2, r3, #16
  404446:	4626      	mov	r6, r4
  404448:	3e10      	subs	r6, #16
  40444a:	2e0f      	cmp	r6, #15
  40444c:	f842 5c10 	str.w	r5, [r2, #-16]
  404450:	f842 5c0c 	str.w	r5, [r2, #-12]
  404454:	f842 5c08 	str.w	r5, [r2, #-8]
  404458:	f842 5c04 	str.w	r5, [r2, #-4]
  40445c:	f102 0210 	add.w	r2, r2, #16
  404460:	d8f2      	bhi.n	404448 <memset+0x38>
  404462:	f1a4 0210 	sub.w	r2, r4, #16
  404466:	f022 020f 	bic.w	r2, r2, #15
  40446a:	f004 040f 	and.w	r4, r4, #15
  40446e:	3210      	adds	r2, #16
  404470:	2c03      	cmp	r4, #3
  404472:	4413      	add	r3, r2
  404474:	d90d      	bls.n	404492 <memset+0x82>
  404476:	461e      	mov	r6, r3
  404478:	4622      	mov	r2, r4
  40447a:	3a04      	subs	r2, #4
  40447c:	2a03      	cmp	r2, #3
  40447e:	f846 5b04 	str.w	r5, [r6], #4
  404482:	d8fa      	bhi.n	40447a <memset+0x6a>
  404484:	1f22      	subs	r2, r4, #4
  404486:	f022 0203 	bic.w	r2, r2, #3
  40448a:	3204      	adds	r2, #4
  40448c:	4413      	add	r3, r2
  40448e:	f004 0403 	and.w	r4, r4, #3
  404492:	b12c      	cbz	r4, 4044a0 <memset+0x90>
  404494:	b2c9      	uxtb	r1, r1
  404496:	441c      	add	r4, r3
  404498:	f803 1b01 	strb.w	r1, [r3], #1
  40449c:	429c      	cmp	r4, r3
  40449e:	d1fb      	bne.n	404498 <memset+0x88>
  4044a0:	bc70      	pop	{r4, r5, r6}
  4044a2:	4770      	bx	lr
  4044a4:	4614      	mov	r4, r2
  4044a6:	4603      	mov	r3, r0
  4044a8:	e7c2      	b.n	404430 <memset+0x20>
  4044aa:	bf00      	nop

004044ac <sprintf>:
  4044ac:	b40e      	push	{r1, r2, r3}
  4044ae:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044b0:	b09c      	sub	sp, #112	; 0x70
  4044b2:	ab21      	add	r3, sp, #132	; 0x84
  4044b4:	490f      	ldr	r1, [pc, #60]	; (4044f4 <sprintf+0x48>)
  4044b6:	f853 2b04 	ldr.w	r2, [r3], #4
  4044ba:	9301      	str	r3, [sp, #4]
  4044bc:	4605      	mov	r5, r0
  4044be:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4044c2:	6808      	ldr	r0, [r1, #0]
  4044c4:	9502      	str	r5, [sp, #8]
  4044c6:	f44f 7702 	mov.w	r7, #520	; 0x208
  4044ca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4044ce:	a902      	add	r1, sp, #8
  4044d0:	9506      	str	r5, [sp, #24]
  4044d2:	f8ad 7014 	strh.w	r7, [sp, #20]
  4044d6:	9404      	str	r4, [sp, #16]
  4044d8:	9407      	str	r4, [sp, #28]
  4044da:	f8ad 6016 	strh.w	r6, [sp, #22]
  4044de:	f000 f80b 	bl	4044f8 <_svfprintf_r>
  4044e2:	9b02      	ldr	r3, [sp, #8]
  4044e4:	2200      	movs	r2, #0
  4044e6:	701a      	strb	r2, [r3, #0]
  4044e8:	b01c      	add	sp, #112	; 0x70
  4044ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4044ee:	b003      	add	sp, #12
  4044f0:	4770      	bx	lr
  4044f2:	bf00      	nop
  4044f4:	2040000c 	.word	0x2040000c

004044f8 <_svfprintf_r>:
  4044f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044fc:	b0c3      	sub	sp, #268	; 0x10c
  4044fe:	460c      	mov	r4, r1
  404500:	910b      	str	r1, [sp, #44]	; 0x2c
  404502:	4692      	mov	sl, r2
  404504:	930f      	str	r3, [sp, #60]	; 0x3c
  404506:	900c      	str	r0, [sp, #48]	; 0x30
  404508:	f002 fa0e 	bl	406928 <_localeconv_r>
  40450c:	6803      	ldr	r3, [r0, #0]
  40450e:	931a      	str	r3, [sp, #104]	; 0x68
  404510:	4618      	mov	r0, r3
  404512:	f003 f8d5 	bl	4076c0 <strlen>
  404516:	89a3      	ldrh	r3, [r4, #12]
  404518:	9019      	str	r0, [sp, #100]	; 0x64
  40451a:	0619      	lsls	r1, r3, #24
  40451c:	d503      	bpl.n	404526 <_svfprintf_r+0x2e>
  40451e:	6923      	ldr	r3, [r4, #16]
  404520:	2b00      	cmp	r3, #0
  404522:	f001 8003 	beq.w	40552c <_svfprintf_r+0x1034>
  404526:	2300      	movs	r3, #0
  404528:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40452c:	9313      	str	r3, [sp, #76]	; 0x4c
  40452e:	9315      	str	r3, [sp, #84]	; 0x54
  404530:	9314      	str	r3, [sp, #80]	; 0x50
  404532:	9327      	str	r3, [sp, #156]	; 0x9c
  404534:	9326      	str	r3, [sp, #152]	; 0x98
  404536:	9318      	str	r3, [sp, #96]	; 0x60
  404538:	931b      	str	r3, [sp, #108]	; 0x6c
  40453a:	9309      	str	r3, [sp, #36]	; 0x24
  40453c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404540:	46c8      	mov	r8, r9
  404542:	9316      	str	r3, [sp, #88]	; 0x58
  404544:	9317      	str	r3, [sp, #92]	; 0x5c
  404546:	f89a 3000 	ldrb.w	r3, [sl]
  40454a:	4654      	mov	r4, sl
  40454c:	b1e3      	cbz	r3, 404588 <_svfprintf_r+0x90>
  40454e:	2b25      	cmp	r3, #37	; 0x25
  404550:	d102      	bne.n	404558 <_svfprintf_r+0x60>
  404552:	e019      	b.n	404588 <_svfprintf_r+0x90>
  404554:	2b25      	cmp	r3, #37	; 0x25
  404556:	d003      	beq.n	404560 <_svfprintf_r+0x68>
  404558:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40455c:	2b00      	cmp	r3, #0
  40455e:	d1f9      	bne.n	404554 <_svfprintf_r+0x5c>
  404560:	eba4 050a 	sub.w	r5, r4, sl
  404564:	b185      	cbz	r5, 404588 <_svfprintf_r+0x90>
  404566:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404568:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40456a:	f8c8 a000 	str.w	sl, [r8]
  40456e:	3301      	adds	r3, #1
  404570:	442a      	add	r2, r5
  404572:	2b07      	cmp	r3, #7
  404574:	f8c8 5004 	str.w	r5, [r8, #4]
  404578:	9227      	str	r2, [sp, #156]	; 0x9c
  40457a:	9326      	str	r3, [sp, #152]	; 0x98
  40457c:	dc7f      	bgt.n	40467e <_svfprintf_r+0x186>
  40457e:	f108 0808 	add.w	r8, r8, #8
  404582:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404584:	442b      	add	r3, r5
  404586:	9309      	str	r3, [sp, #36]	; 0x24
  404588:	7823      	ldrb	r3, [r4, #0]
  40458a:	2b00      	cmp	r3, #0
  40458c:	d07f      	beq.n	40468e <_svfprintf_r+0x196>
  40458e:	2300      	movs	r3, #0
  404590:	461a      	mov	r2, r3
  404592:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404596:	4619      	mov	r1, r3
  404598:	930d      	str	r3, [sp, #52]	; 0x34
  40459a:	469b      	mov	fp, r3
  40459c:	f04f 30ff 	mov.w	r0, #4294967295
  4045a0:	7863      	ldrb	r3, [r4, #1]
  4045a2:	900a      	str	r0, [sp, #40]	; 0x28
  4045a4:	f104 0a01 	add.w	sl, r4, #1
  4045a8:	f10a 0a01 	add.w	sl, sl, #1
  4045ac:	f1a3 0020 	sub.w	r0, r3, #32
  4045b0:	2858      	cmp	r0, #88	; 0x58
  4045b2:	f200 83c1 	bhi.w	404d38 <_svfprintf_r+0x840>
  4045b6:	e8df f010 	tbh	[pc, r0, lsl #1]
  4045ba:	0238      	.short	0x0238
  4045bc:	03bf03bf 	.word	0x03bf03bf
  4045c0:	03bf0240 	.word	0x03bf0240
  4045c4:	03bf03bf 	.word	0x03bf03bf
  4045c8:	03bf03bf 	.word	0x03bf03bf
  4045cc:	024503bf 	.word	0x024503bf
  4045d0:	03bf0203 	.word	0x03bf0203
  4045d4:	026b005d 	.word	0x026b005d
  4045d8:	028603bf 	.word	0x028603bf
  4045dc:	039d039d 	.word	0x039d039d
  4045e0:	039d039d 	.word	0x039d039d
  4045e4:	039d039d 	.word	0x039d039d
  4045e8:	039d039d 	.word	0x039d039d
  4045ec:	03bf039d 	.word	0x03bf039d
  4045f0:	03bf03bf 	.word	0x03bf03bf
  4045f4:	03bf03bf 	.word	0x03bf03bf
  4045f8:	03bf03bf 	.word	0x03bf03bf
  4045fc:	03bf03bf 	.word	0x03bf03bf
  404600:	033703bf 	.word	0x033703bf
  404604:	03bf0357 	.word	0x03bf0357
  404608:	03bf0357 	.word	0x03bf0357
  40460c:	03bf03bf 	.word	0x03bf03bf
  404610:	039803bf 	.word	0x039803bf
  404614:	03bf03bf 	.word	0x03bf03bf
  404618:	03bf03ad 	.word	0x03bf03ad
  40461c:	03bf03bf 	.word	0x03bf03bf
  404620:	03bf03bf 	.word	0x03bf03bf
  404624:	03bf0259 	.word	0x03bf0259
  404628:	031e03bf 	.word	0x031e03bf
  40462c:	03bf03bf 	.word	0x03bf03bf
  404630:	03bf03bf 	.word	0x03bf03bf
  404634:	03bf03bf 	.word	0x03bf03bf
  404638:	03bf03bf 	.word	0x03bf03bf
  40463c:	03bf03bf 	.word	0x03bf03bf
  404640:	02db02c6 	.word	0x02db02c6
  404644:	03570357 	.word	0x03570357
  404648:	028b0357 	.word	0x028b0357
  40464c:	03bf02db 	.word	0x03bf02db
  404650:	029003bf 	.word	0x029003bf
  404654:	029d03bf 	.word	0x029d03bf
  404658:	02b401cc 	.word	0x02b401cc
  40465c:	03bf0208 	.word	0x03bf0208
  404660:	03bf01e1 	.word	0x03bf01e1
  404664:	03bf007e 	.word	0x03bf007e
  404668:	020d03bf 	.word	0x020d03bf
  40466c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40466e:	930f      	str	r3, [sp, #60]	; 0x3c
  404670:	4240      	negs	r0, r0
  404672:	900d      	str	r0, [sp, #52]	; 0x34
  404674:	f04b 0b04 	orr.w	fp, fp, #4
  404678:	f89a 3000 	ldrb.w	r3, [sl]
  40467c:	e794      	b.n	4045a8 <_svfprintf_r+0xb0>
  40467e:	aa25      	add	r2, sp, #148	; 0x94
  404680:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404682:	980c      	ldr	r0, [sp, #48]	; 0x30
  404684:	f003 f88a 	bl	40779c <__ssprint_r>
  404688:	b940      	cbnz	r0, 40469c <_svfprintf_r+0x1a4>
  40468a:	46c8      	mov	r8, r9
  40468c:	e779      	b.n	404582 <_svfprintf_r+0x8a>
  40468e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404690:	b123      	cbz	r3, 40469c <_svfprintf_r+0x1a4>
  404692:	980c      	ldr	r0, [sp, #48]	; 0x30
  404694:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404696:	aa25      	add	r2, sp, #148	; 0x94
  404698:	f003 f880 	bl	40779c <__ssprint_r>
  40469c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40469e:	899b      	ldrh	r3, [r3, #12]
  4046a0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4046a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4046a6:	bf18      	it	ne
  4046a8:	f04f 33ff 	movne.w	r3, #4294967295
  4046ac:	9309      	str	r3, [sp, #36]	; 0x24
  4046ae:	9809      	ldr	r0, [sp, #36]	; 0x24
  4046b0:	b043      	add	sp, #268	; 0x10c
  4046b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046b6:	f01b 0f20 	tst.w	fp, #32
  4046ba:	9311      	str	r3, [sp, #68]	; 0x44
  4046bc:	f040 81dd 	bne.w	404a7a <_svfprintf_r+0x582>
  4046c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4046c2:	f01b 0f10 	tst.w	fp, #16
  4046c6:	4613      	mov	r3, r2
  4046c8:	f040 856e 	bne.w	4051a8 <_svfprintf_r+0xcb0>
  4046cc:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4046d0:	f000 856a 	beq.w	4051a8 <_svfprintf_r+0xcb0>
  4046d4:	8814      	ldrh	r4, [r2, #0]
  4046d6:	3204      	adds	r2, #4
  4046d8:	2500      	movs	r5, #0
  4046da:	2301      	movs	r3, #1
  4046dc:	920f      	str	r2, [sp, #60]	; 0x3c
  4046de:	2700      	movs	r7, #0
  4046e0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4046e4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4046e6:	1c4a      	adds	r2, r1, #1
  4046e8:	f000 8265 	beq.w	404bb6 <_svfprintf_r+0x6be>
  4046ec:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4046f0:	9207      	str	r2, [sp, #28]
  4046f2:	ea54 0205 	orrs.w	r2, r4, r5
  4046f6:	f040 8264 	bne.w	404bc2 <_svfprintf_r+0x6ca>
  4046fa:	2900      	cmp	r1, #0
  4046fc:	f040 843c 	bne.w	404f78 <_svfprintf_r+0xa80>
  404700:	2b00      	cmp	r3, #0
  404702:	f040 84d7 	bne.w	4050b4 <_svfprintf_r+0xbbc>
  404706:	f01b 0301 	ands.w	r3, fp, #1
  40470a:	930e      	str	r3, [sp, #56]	; 0x38
  40470c:	f000 8604 	beq.w	405318 <_svfprintf_r+0xe20>
  404710:	ae42      	add	r6, sp, #264	; 0x108
  404712:	2330      	movs	r3, #48	; 0x30
  404714:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40471a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40471c:	4293      	cmp	r3, r2
  40471e:	bfb8      	it	lt
  404720:	4613      	movlt	r3, r2
  404722:	9308      	str	r3, [sp, #32]
  404724:	2300      	movs	r3, #0
  404726:	9312      	str	r3, [sp, #72]	; 0x48
  404728:	b117      	cbz	r7, 404730 <_svfprintf_r+0x238>
  40472a:	9b08      	ldr	r3, [sp, #32]
  40472c:	3301      	adds	r3, #1
  40472e:	9308      	str	r3, [sp, #32]
  404730:	9b07      	ldr	r3, [sp, #28]
  404732:	f013 0302 	ands.w	r3, r3, #2
  404736:	9310      	str	r3, [sp, #64]	; 0x40
  404738:	d002      	beq.n	404740 <_svfprintf_r+0x248>
  40473a:	9b08      	ldr	r3, [sp, #32]
  40473c:	3302      	adds	r3, #2
  40473e:	9308      	str	r3, [sp, #32]
  404740:	9b07      	ldr	r3, [sp, #28]
  404742:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404746:	f040 830e 	bne.w	404d66 <_svfprintf_r+0x86e>
  40474a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40474c:	9a08      	ldr	r2, [sp, #32]
  40474e:	eba3 0b02 	sub.w	fp, r3, r2
  404752:	f1bb 0f00 	cmp.w	fp, #0
  404756:	f340 8306 	ble.w	404d66 <_svfprintf_r+0x86e>
  40475a:	f1bb 0f10 	cmp.w	fp, #16
  40475e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404760:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404762:	dd29      	ble.n	4047b8 <_svfprintf_r+0x2c0>
  404764:	4643      	mov	r3, r8
  404766:	4621      	mov	r1, r4
  404768:	46a8      	mov	r8, r5
  40476a:	2710      	movs	r7, #16
  40476c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40476e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404770:	e006      	b.n	404780 <_svfprintf_r+0x288>
  404772:	f1ab 0b10 	sub.w	fp, fp, #16
  404776:	f1bb 0f10 	cmp.w	fp, #16
  40477a:	f103 0308 	add.w	r3, r3, #8
  40477e:	dd18      	ble.n	4047b2 <_svfprintf_r+0x2ba>
  404780:	3201      	adds	r2, #1
  404782:	48b7      	ldr	r0, [pc, #732]	; (404a60 <_svfprintf_r+0x568>)
  404784:	9226      	str	r2, [sp, #152]	; 0x98
  404786:	3110      	adds	r1, #16
  404788:	2a07      	cmp	r2, #7
  40478a:	9127      	str	r1, [sp, #156]	; 0x9c
  40478c:	e883 0081 	stmia.w	r3, {r0, r7}
  404790:	ddef      	ble.n	404772 <_svfprintf_r+0x27a>
  404792:	aa25      	add	r2, sp, #148	; 0x94
  404794:	4629      	mov	r1, r5
  404796:	4620      	mov	r0, r4
  404798:	f003 f800 	bl	40779c <__ssprint_r>
  40479c:	2800      	cmp	r0, #0
  40479e:	f47f af7d 	bne.w	40469c <_svfprintf_r+0x1a4>
  4047a2:	f1ab 0b10 	sub.w	fp, fp, #16
  4047a6:	f1bb 0f10 	cmp.w	fp, #16
  4047aa:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4047ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4047ae:	464b      	mov	r3, r9
  4047b0:	dce6      	bgt.n	404780 <_svfprintf_r+0x288>
  4047b2:	4645      	mov	r5, r8
  4047b4:	460c      	mov	r4, r1
  4047b6:	4698      	mov	r8, r3
  4047b8:	3201      	adds	r2, #1
  4047ba:	4ba9      	ldr	r3, [pc, #676]	; (404a60 <_svfprintf_r+0x568>)
  4047bc:	9226      	str	r2, [sp, #152]	; 0x98
  4047be:	445c      	add	r4, fp
  4047c0:	2a07      	cmp	r2, #7
  4047c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4047c4:	e888 0808 	stmia.w	r8, {r3, fp}
  4047c8:	f300 8498 	bgt.w	4050fc <_svfprintf_r+0xc04>
  4047cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047d0:	f108 0808 	add.w	r8, r8, #8
  4047d4:	b177      	cbz	r7, 4047f4 <_svfprintf_r+0x2fc>
  4047d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047d8:	3301      	adds	r3, #1
  4047da:	3401      	adds	r4, #1
  4047dc:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4047e0:	2201      	movs	r2, #1
  4047e2:	2b07      	cmp	r3, #7
  4047e4:	9427      	str	r4, [sp, #156]	; 0x9c
  4047e6:	9326      	str	r3, [sp, #152]	; 0x98
  4047e8:	e888 0006 	stmia.w	r8, {r1, r2}
  4047ec:	f300 83db 	bgt.w	404fa6 <_svfprintf_r+0xaae>
  4047f0:	f108 0808 	add.w	r8, r8, #8
  4047f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4047f6:	b16b      	cbz	r3, 404814 <_svfprintf_r+0x31c>
  4047f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4047fa:	3301      	adds	r3, #1
  4047fc:	3402      	adds	r4, #2
  4047fe:	a91e      	add	r1, sp, #120	; 0x78
  404800:	2202      	movs	r2, #2
  404802:	2b07      	cmp	r3, #7
  404804:	9427      	str	r4, [sp, #156]	; 0x9c
  404806:	9326      	str	r3, [sp, #152]	; 0x98
  404808:	e888 0006 	stmia.w	r8, {r1, r2}
  40480c:	f300 83d6 	bgt.w	404fbc <_svfprintf_r+0xac4>
  404810:	f108 0808 	add.w	r8, r8, #8
  404814:	2d80      	cmp	r5, #128	; 0x80
  404816:	f000 8315 	beq.w	404e44 <_svfprintf_r+0x94c>
  40481a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40481c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40481e:	1a9f      	subs	r7, r3, r2
  404820:	2f00      	cmp	r7, #0
  404822:	dd36      	ble.n	404892 <_svfprintf_r+0x39a>
  404824:	2f10      	cmp	r7, #16
  404826:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404828:	4d8e      	ldr	r5, [pc, #568]	; (404a64 <_svfprintf_r+0x56c>)
  40482a:	dd27      	ble.n	40487c <_svfprintf_r+0x384>
  40482c:	4642      	mov	r2, r8
  40482e:	4621      	mov	r1, r4
  404830:	46b0      	mov	r8, r6
  404832:	f04f 0b10 	mov.w	fp, #16
  404836:	462e      	mov	r6, r5
  404838:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40483a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40483c:	e004      	b.n	404848 <_svfprintf_r+0x350>
  40483e:	3f10      	subs	r7, #16
  404840:	2f10      	cmp	r7, #16
  404842:	f102 0208 	add.w	r2, r2, #8
  404846:	dd15      	ble.n	404874 <_svfprintf_r+0x37c>
  404848:	3301      	adds	r3, #1
  40484a:	3110      	adds	r1, #16
  40484c:	2b07      	cmp	r3, #7
  40484e:	9127      	str	r1, [sp, #156]	; 0x9c
  404850:	9326      	str	r3, [sp, #152]	; 0x98
  404852:	e882 0840 	stmia.w	r2, {r6, fp}
  404856:	ddf2      	ble.n	40483e <_svfprintf_r+0x346>
  404858:	aa25      	add	r2, sp, #148	; 0x94
  40485a:	4629      	mov	r1, r5
  40485c:	4620      	mov	r0, r4
  40485e:	f002 ff9d 	bl	40779c <__ssprint_r>
  404862:	2800      	cmp	r0, #0
  404864:	f47f af1a 	bne.w	40469c <_svfprintf_r+0x1a4>
  404868:	3f10      	subs	r7, #16
  40486a:	2f10      	cmp	r7, #16
  40486c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40486e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404870:	464a      	mov	r2, r9
  404872:	dce9      	bgt.n	404848 <_svfprintf_r+0x350>
  404874:	4635      	mov	r5, r6
  404876:	460c      	mov	r4, r1
  404878:	4646      	mov	r6, r8
  40487a:	4690      	mov	r8, r2
  40487c:	3301      	adds	r3, #1
  40487e:	443c      	add	r4, r7
  404880:	2b07      	cmp	r3, #7
  404882:	9427      	str	r4, [sp, #156]	; 0x9c
  404884:	9326      	str	r3, [sp, #152]	; 0x98
  404886:	e888 00a0 	stmia.w	r8, {r5, r7}
  40488a:	f300 8381 	bgt.w	404f90 <_svfprintf_r+0xa98>
  40488e:	f108 0808 	add.w	r8, r8, #8
  404892:	9b07      	ldr	r3, [sp, #28]
  404894:	05df      	lsls	r7, r3, #23
  404896:	f100 8268 	bmi.w	404d6a <_svfprintf_r+0x872>
  40489a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40489c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40489e:	f8c8 6000 	str.w	r6, [r8]
  4048a2:	3301      	adds	r3, #1
  4048a4:	440c      	add	r4, r1
  4048a6:	2b07      	cmp	r3, #7
  4048a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4048aa:	f8c8 1004 	str.w	r1, [r8, #4]
  4048ae:	9326      	str	r3, [sp, #152]	; 0x98
  4048b0:	f300 834d 	bgt.w	404f4e <_svfprintf_r+0xa56>
  4048b4:	f108 0808 	add.w	r8, r8, #8
  4048b8:	9b07      	ldr	r3, [sp, #28]
  4048ba:	075b      	lsls	r3, r3, #29
  4048bc:	d53a      	bpl.n	404934 <_svfprintf_r+0x43c>
  4048be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4048c0:	9a08      	ldr	r2, [sp, #32]
  4048c2:	1a9d      	subs	r5, r3, r2
  4048c4:	2d00      	cmp	r5, #0
  4048c6:	dd35      	ble.n	404934 <_svfprintf_r+0x43c>
  4048c8:	2d10      	cmp	r5, #16
  4048ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4048cc:	dd20      	ble.n	404910 <_svfprintf_r+0x418>
  4048ce:	2610      	movs	r6, #16
  4048d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4048d2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4048d6:	e004      	b.n	4048e2 <_svfprintf_r+0x3ea>
  4048d8:	3d10      	subs	r5, #16
  4048da:	2d10      	cmp	r5, #16
  4048dc:	f108 0808 	add.w	r8, r8, #8
  4048e0:	dd16      	ble.n	404910 <_svfprintf_r+0x418>
  4048e2:	3301      	adds	r3, #1
  4048e4:	4a5e      	ldr	r2, [pc, #376]	; (404a60 <_svfprintf_r+0x568>)
  4048e6:	9326      	str	r3, [sp, #152]	; 0x98
  4048e8:	3410      	adds	r4, #16
  4048ea:	2b07      	cmp	r3, #7
  4048ec:	9427      	str	r4, [sp, #156]	; 0x9c
  4048ee:	e888 0044 	stmia.w	r8, {r2, r6}
  4048f2:	ddf1      	ble.n	4048d8 <_svfprintf_r+0x3e0>
  4048f4:	aa25      	add	r2, sp, #148	; 0x94
  4048f6:	4659      	mov	r1, fp
  4048f8:	4638      	mov	r0, r7
  4048fa:	f002 ff4f 	bl	40779c <__ssprint_r>
  4048fe:	2800      	cmp	r0, #0
  404900:	f47f aecc 	bne.w	40469c <_svfprintf_r+0x1a4>
  404904:	3d10      	subs	r5, #16
  404906:	2d10      	cmp	r5, #16
  404908:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40490a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40490c:	46c8      	mov	r8, r9
  40490e:	dce8      	bgt.n	4048e2 <_svfprintf_r+0x3ea>
  404910:	3301      	adds	r3, #1
  404912:	4a53      	ldr	r2, [pc, #332]	; (404a60 <_svfprintf_r+0x568>)
  404914:	9326      	str	r3, [sp, #152]	; 0x98
  404916:	442c      	add	r4, r5
  404918:	2b07      	cmp	r3, #7
  40491a:	9427      	str	r4, [sp, #156]	; 0x9c
  40491c:	e888 0024 	stmia.w	r8, {r2, r5}
  404920:	dd08      	ble.n	404934 <_svfprintf_r+0x43c>
  404922:	aa25      	add	r2, sp, #148	; 0x94
  404924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404926:	980c      	ldr	r0, [sp, #48]	; 0x30
  404928:	f002 ff38 	bl	40779c <__ssprint_r>
  40492c:	2800      	cmp	r0, #0
  40492e:	f47f aeb5 	bne.w	40469c <_svfprintf_r+0x1a4>
  404932:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404934:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404938:	9908      	ldr	r1, [sp, #32]
  40493a:	428a      	cmp	r2, r1
  40493c:	bfac      	ite	ge
  40493e:	189b      	addge	r3, r3, r2
  404940:	185b      	addlt	r3, r3, r1
  404942:	9309      	str	r3, [sp, #36]	; 0x24
  404944:	2c00      	cmp	r4, #0
  404946:	f040 830d 	bne.w	404f64 <_svfprintf_r+0xa6c>
  40494a:	2300      	movs	r3, #0
  40494c:	9326      	str	r3, [sp, #152]	; 0x98
  40494e:	46c8      	mov	r8, r9
  404950:	e5f9      	b.n	404546 <_svfprintf_r+0x4e>
  404952:	9311      	str	r3, [sp, #68]	; 0x44
  404954:	f01b 0320 	ands.w	r3, fp, #32
  404958:	f040 81e3 	bne.w	404d22 <_svfprintf_r+0x82a>
  40495c:	f01b 0210 	ands.w	r2, fp, #16
  404960:	f040 842e 	bne.w	4051c0 <_svfprintf_r+0xcc8>
  404964:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404968:	f000 842a 	beq.w	4051c0 <_svfprintf_r+0xcc8>
  40496c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40496e:	4613      	mov	r3, r2
  404970:	460a      	mov	r2, r1
  404972:	3204      	adds	r2, #4
  404974:	880c      	ldrh	r4, [r1, #0]
  404976:	920f      	str	r2, [sp, #60]	; 0x3c
  404978:	2500      	movs	r5, #0
  40497a:	e6b0      	b.n	4046de <_svfprintf_r+0x1e6>
  40497c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40497e:	9311      	str	r3, [sp, #68]	; 0x44
  404980:	6816      	ldr	r6, [r2, #0]
  404982:	2400      	movs	r4, #0
  404984:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404988:	1d15      	adds	r5, r2, #4
  40498a:	2e00      	cmp	r6, #0
  40498c:	f000 86a7 	beq.w	4056de <_svfprintf_r+0x11e6>
  404990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404992:	1c53      	adds	r3, r2, #1
  404994:	f000 8609 	beq.w	4055aa <_svfprintf_r+0x10b2>
  404998:	4621      	mov	r1, r4
  40499a:	4630      	mov	r0, r6
  40499c:	f002 fa88 	bl	406eb0 <memchr>
  4049a0:	2800      	cmp	r0, #0
  4049a2:	f000 86e1 	beq.w	405768 <_svfprintf_r+0x1270>
  4049a6:	1b83      	subs	r3, r0, r6
  4049a8:	930e      	str	r3, [sp, #56]	; 0x38
  4049aa:	940a      	str	r4, [sp, #40]	; 0x28
  4049ac:	950f      	str	r5, [sp, #60]	; 0x3c
  4049ae:	f8cd b01c 	str.w	fp, [sp, #28]
  4049b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4049b6:	9308      	str	r3, [sp, #32]
  4049b8:	9412      	str	r4, [sp, #72]	; 0x48
  4049ba:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049be:	e6b3      	b.n	404728 <_svfprintf_r+0x230>
  4049c0:	f89a 3000 	ldrb.w	r3, [sl]
  4049c4:	2201      	movs	r2, #1
  4049c6:	212b      	movs	r1, #43	; 0x2b
  4049c8:	e5ee      	b.n	4045a8 <_svfprintf_r+0xb0>
  4049ca:	f04b 0b20 	orr.w	fp, fp, #32
  4049ce:	f89a 3000 	ldrb.w	r3, [sl]
  4049d2:	e5e9      	b.n	4045a8 <_svfprintf_r+0xb0>
  4049d4:	9311      	str	r3, [sp, #68]	; 0x44
  4049d6:	2a00      	cmp	r2, #0
  4049d8:	f040 8795 	bne.w	405906 <_svfprintf_r+0x140e>
  4049dc:	4b22      	ldr	r3, [pc, #136]	; (404a68 <_svfprintf_r+0x570>)
  4049de:	9318      	str	r3, [sp, #96]	; 0x60
  4049e0:	f01b 0f20 	tst.w	fp, #32
  4049e4:	f040 8111 	bne.w	404c0a <_svfprintf_r+0x712>
  4049e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4049ea:	f01b 0f10 	tst.w	fp, #16
  4049ee:	4613      	mov	r3, r2
  4049f0:	f040 83e1 	bne.w	4051b6 <_svfprintf_r+0xcbe>
  4049f4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4049f8:	f000 83dd 	beq.w	4051b6 <_svfprintf_r+0xcbe>
  4049fc:	3304      	adds	r3, #4
  4049fe:	8814      	ldrh	r4, [r2, #0]
  404a00:	930f      	str	r3, [sp, #60]	; 0x3c
  404a02:	2500      	movs	r5, #0
  404a04:	f01b 0f01 	tst.w	fp, #1
  404a08:	f000 810c 	beq.w	404c24 <_svfprintf_r+0x72c>
  404a0c:	ea54 0305 	orrs.w	r3, r4, r5
  404a10:	f000 8108 	beq.w	404c24 <_svfprintf_r+0x72c>
  404a14:	2330      	movs	r3, #48	; 0x30
  404a16:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404a1a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404a1e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404a22:	f04b 0b02 	orr.w	fp, fp, #2
  404a26:	2302      	movs	r3, #2
  404a28:	e659      	b.n	4046de <_svfprintf_r+0x1e6>
  404a2a:	f89a 3000 	ldrb.w	r3, [sl]
  404a2e:	2900      	cmp	r1, #0
  404a30:	f47f adba 	bne.w	4045a8 <_svfprintf_r+0xb0>
  404a34:	2201      	movs	r2, #1
  404a36:	2120      	movs	r1, #32
  404a38:	e5b6      	b.n	4045a8 <_svfprintf_r+0xb0>
  404a3a:	f04b 0b01 	orr.w	fp, fp, #1
  404a3e:	f89a 3000 	ldrb.w	r3, [sl]
  404a42:	e5b1      	b.n	4045a8 <_svfprintf_r+0xb0>
  404a44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404a46:	6823      	ldr	r3, [r4, #0]
  404a48:	930d      	str	r3, [sp, #52]	; 0x34
  404a4a:	4618      	mov	r0, r3
  404a4c:	2800      	cmp	r0, #0
  404a4e:	4623      	mov	r3, r4
  404a50:	f103 0304 	add.w	r3, r3, #4
  404a54:	f6ff ae0a 	blt.w	40466c <_svfprintf_r+0x174>
  404a58:	930f      	str	r3, [sp, #60]	; 0x3c
  404a5a:	f89a 3000 	ldrb.w	r3, [sl]
  404a5e:	e5a3      	b.n	4045a8 <_svfprintf_r+0xb0>
  404a60:	00408cf4 	.word	0x00408cf4
  404a64:	00408d04 	.word	0x00408d04
  404a68:	00408cd4 	.word	0x00408cd4
  404a6c:	f04b 0b10 	orr.w	fp, fp, #16
  404a70:	f01b 0f20 	tst.w	fp, #32
  404a74:	9311      	str	r3, [sp, #68]	; 0x44
  404a76:	f43f ae23 	beq.w	4046c0 <_svfprintf_r+0x1c8>
  404a7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a7c:	3507      	adds	r5, #7
  404a7e:	f025 0307 	bic.w	r3, r5, #7
  404a82:	f103 0208 	add.w	r2, r3, #8
  404a86:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a8a:	920f      	str	r2, [sp, #60]	; 0x3c
  404a8c:	2301      	movs	r3, #1
  404a8e:	e626      	b.n	4046de <_svfprintf_r+0x1e6>
  404a90:	f89a 3000 	ldrb.w	r3, [sl]
  404a94:	2b2a      	cmp	r3, #42	; 0x2a
  404a96:	f10a 0401 	add.w	r4, sl, #1
  404a9a:	f000 8727 	beq.w	4058ec <_svfprintf_r+0x13f4>
  404a9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404aa2:	2809      	cmp	r0, #9
  404aa4:	46a2      	mov	sl, r4
  404aa6:	f200 86ad 	bhi.w	405804 <_svfprintf_r+0x130c>
  404aaa:	2300      	movs	r3, #0
  404aac:	461c      	mov	r4, r3
  404aae:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404ab2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ab6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404aba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404abe:	2809      	cmp	r0, #9
  404ac0:	d9f5      	bls.n	404aae <_svfprintf_r+0x5b6>
  404ac2:	940a      	str	r4, [sp, #40]	; 0x28
  404ac4:	e572      	b.n	4045ac <_svfprintf_r+0xb4>
  404ac6:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404aca:	f89a 3000 	ldrb.w	r3, [sl]
  404ace:	e56b      	b.n	4045a8 <_svfprintf_r+0xb0>
  404ad0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404ad4:	f89a 3000 	ldrb.w	r3, [sl]
  404ad8:	e566      	b.n	4045a8 <_svfprintf_r+0xb0>
  404ada:	f89a 3000 	ldrb.w	r3, [sl]
  404ade:	2b6c      	cmp	r3, #108	; 0x6c
  404ae0:	bf03      	ittte	eq
  404ae2:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404ae6:	f04b 0b20 	orreq.w	fp, fp, #32
  404aea:	f10a 0a01 	addeq.w	sl, sl, #1
  404aee:	f04b 0b10 	orrne.w	fp, fp, #16
  404af2:	e559      	b.n	4045a8 <_svfprintf_r+0xb0>
  404af4:	2a00      	cmp	r2, #0
  404af6:	f040 8711 	bne.w	40591c <_svfprintf_r+0x1424>
  404afa:	f01b 0f20 	tst.w	fp, #32
  404afe:	f040 84f9 	bne.w	4054f4 <_svfprintf_r+0xffc>
  404b02:	f01b 0f10 	tst.w	fp, #16
  404b06:	f040 84ac 	bne.w	405462 <_svfprintf_r+0xf6a>
  404b0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404b0e:	f000 84a8 	beq.w	405462 <_svfprintf_r+0xf6a>
  404b12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b14:	6813      	ldr	r3, [r2, #0]
  404b16:	3204      	adds	r2, #4
  404b18:	920f      	str	r2, [sp, #60]	; 0x3c
  404b1a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404b1e:	801a      	strh	r2, [r3, #0]
  404b20:	e511      	b.n	404546 <_svfprintf_r+0x4e>
  404b22:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b24:	4bb3      	ldr	r3, [pc, #716]	; (404df4 <_svfprintf_r+0x8fc>)
  404b26:	680c      	ldr	r4, [r1, #0]
  404b28:	9318      	str	r3, [sp, #96]	; 0x60
  404b2a:	2230      	movs	r2, #48	; 0x30
  404b2c:	2378      	movs	r3, #120	; 0x78
  404b2e:	3104      	adds	r1, #4
  404b30:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404b34:	9311      	str	r3, [sp, #68]	; 0x44
  404b36:	f04b 0b02 	orr.w	fp, fp, #2
  404b3a:	910f      	str	r1, [sp, #60]	; 0x3c
  404b3c:	2500      	movs	r5, #0
  404b3e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404b42:	2302      	movs	r3, #2
  404b44:	e5cb      	b.n	4046de <_svfprintf_r+0x1e6>
  404b46:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b48:	9311      	str	r3, [sp, #68]	; 0x44
  404b4a:	680a      	ldr	r2, [r1, #0]
  404b4c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404b50:	2300      	movs	r3, #0
  404b52:	460a      	mov	r2, r1
  404b54:	461f      	mov	r7, r3
  404b56:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404b5a:	3204      	adds	r2, #4
  404b5c:	2301      	movs	r3, #1
  404b5e:	9308      	str	r3, [sp, #32]
  404b60:	f8cd b01c 	str.w	fp, [sp, #28]
  404b64:	970a      	str	r7, [sp, #40]	; 0x28
  404b66:	9712      	str	r7, [sp, #72]	; 0x48
  404b68:	920f      	str	r2, [sp, #60]	; 0x3c
  404b6a:	930e      	str	r3, [sp, #56]	; 0x38
  404b6c:	ae28      	add	r6, sp, #160	; 0xa0
  404b6e:	e5df      	b.n	404730 <_svfprintf_r+0x238>
  404b70:	9311      	str	r3, [sp, #68]	; 0x44
  404b72:	2a00      	cmp	r2, #0
  404b74:	f040 86ea 	bne.w	40594c <_svfprintf_r+0x1454>
  404b78:	f01b 0f20 	tst.w	fp, #32
  404b7c:	d15d      	bne.n	404c3a <_svfprintf_r+0x742>
  404b7e:	f01b 0f10 	tst.w	fp, #16
  404b82:	f040 8308 	bne.w	405196 <_svfprintf_r+0xc9e>
  404b86:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404b8a:	f000 8304 	beq.w	405196 <_svfprintf_r+0xc9e>
  404b8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b90:	f9b1 4000 	ldrsh.w	r4, [r1]
  404b94:	3104      	adds	r1, #4
  404b96:	17e5      	asrs	r5, r4, #31
  404b98:	4622      	mov	r2, r4
  404b9a:	462b      	mov	r3, r5
  404b9c:	910f      	str	r1, [sp, #60]	; 0x3c
  404b9e:	2a00      	cmp	r2, #0
  404ba0:	f173 0300 	sbcs.w	r3, r3, #0
  404ba4:	db58      	blt.n	404c58 <_svfprintf_r+0x760>
  404ba6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ba8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404bac:	1c4a      	adds	r2, r1, #1
  404bae:	f04f 0301 	mov.w	r3, #1
  404bb2:	f47f ad9b 	bne.w	4046ec <_svfprintf_r+0x1f4>
  404bb6:	ea54 0205 	orrs.w	r2, r4, r5
  404bba:	f000 81df 	beq.w	404f7c <_svfprintf_r+0xa84>
  404bbe:	f8cd b01c 	str.w	fp, [sp, #28]
  404bc2:	2b01      	cmp	r3, #1
  404bc4:	f000 827b 	beq.w	4050be <_svfprintf_r+0xbc6>
  404bc8:	2b02      	cmp	r3, #2
  404bca:	f040 8206 	bne.w	404fda <_svfprintf_r+0xae2>
  404bce:	9818      	ldr	r0, [sp, #96]	; 0x60
  404bd0:	464e      	mov	r6, r9
  404bd2:	0923      	lsrs	r3, r4, #4
  404bd4:	f004 010f 	and.w	r1, r4, #15
  404bd8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404bdc:	092a      	lsrs	r2, r5, #4
  404bde:	461c      	mov	r4, r3
  404be0:	4615      	mov	r5, r2
  404be2:	5c43      	ldrb	r3, [r0, r1]
  404be4:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404be8:	ea54 0305 	orrs.w	r3, r4, r5
  404bec:	d1f1      	bne.n	404bd2 <_svfprintf_r+0x6da>
  404bee:	eba9 0306 	sub.w	r3, r9, r6
  404bf2:	930e      	str	r3, [sp, #56]	; 0x38
  404bf4:	e590      	b.n	404718 <_svfprintf_r+0x220>
  404bf6:	9311      	str	r3, [sp, #68]	; 0x44
  404bf8:	2a00      	cmp	r2, #0
  404bfa:	f040 86a3 	bne.w	405944 <_svfprintf_r+0x144c>
  404bfe:	4b7e      	ldr	r3, [pc, #504]	; (404df8 <_svfprintf_r+0x900>)
  404c00:	9318      	str	r3, [sp, #96]	; 0x60
  404c02:	f01b 0f20 	tst.w	fp, #32
  404c06:	f43f aeef 	beq.w	4049e8 <_svfprintf_r+0x4f0>
  404c0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c0c:	3507      	adds	r5, #7
  404c0e:	f025 0307 	bic.w	r3, r5, #7
  404c12:	f103 0208 	add.w	r2, r3, #8
  404c16:	f01b 0f01 	tst.w	fp, #1
  404c1a:	920f      	str	r2, [sp, #60]	; 0x3c
  404c1c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c20:	f47f aef4 	bne.w	404a0c <_svfprintf_r+0x514>
  404c24:	2302      	movs	r3, #2
  404c26:	e55a      	b.n	4046de <_svfprintf_r+0x1e6>
  404c28:	9311      	str	r3, [sp, #68]	; 0x44
  404c2a:	2a00      	cmp	r2, #0
  404c2c:	f040 8686 	bne.w	40593c <_svfprintf_r+0x1444>
  404c30:	f04b 0b10 	orr.w	fp, fp, #16
  404c34:	f01b 0f20 	tst.w	fp, #32
  404c38:	d0a1      	beq.n	404b7e <_svfprintf_r+0x686>
  404c3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c3c:	3507      	adds	r5, #7
  404c3e:	f025 0507 	bic.w	r5, r5, #7
  404c42:	e9d5 2300 	ldrd	r2, r3, [r5]
  404c46:	2a00      	cmp	r2, #0
  404c48:	f105 0108 	add.w	r1, r5, #8
  404c4c:	461d      	mov	r5, r3
  404c4e:	f173 0300 	sbcs.w	r3, r3, #0
  404c52:	910f      	str	r1, [sp, #60]	; 0x3c
  404c54:	4614      	mov	r4, r2
  404c56:	daa6      	bge.n	404ba6 <_svfprintf_r+0x6ae>
  404c58:	272d      	movs	r7, #45	; 0x2d
  404c5a:	4264      	negs	r4, r4
  404c5c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404c60:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404c64:	2301      	movs	r3, #1
  404c66:	e53d      	b.n	4046e4 <_svfprintf_r+0x1ec>
  404c68:	9311      	str	r3, [sp, #68]	; 0x44
  404c6a:	2a00      	cmp	r2, #0
  404c6c:	f040 8662 	bne.w	405934 <_svfprintf_r+0x143c>
  404c70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c72:	3507      	adds	r5, #7
  404c74:	f025 0307 	bic.w	r3, r5, #7
  404c78:	f103 0208 	add.w	r2, r3, #8
  404c7c:	920f      	str	r2, [sp, #60]	; 0x3c
  404c7e:	681a      	ldr	r2, [r3, #0]
  404c80:	9215      	str	r2, [sp, #84]	; 0x54
  404c82:	685b      	ldr	r3, [r3, #4]
  404c84:	9314      	str	r3, [sp, #80]	; 0x50
  404c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404c88:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404c8a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404c8e:	4628      	mov	r0, r5
  404c90:	4621      	mov	r1, r4
  404c92:	f04f 32ff 	mov.w	r2, #4294967295
  404c96:	4b59      	ldr	r3, [pc, #356]	; (404dfc <_svfprintf_r+0x904>)
  404c98:	f003 fa7c 	bl	408194 <__aeabi_dcmpun>
  404c9c:	2800      	cmp	r0, #0
  404c9e:	f040 834a 	bne.w	405336 <_svfprintf_r+0xe3e>
  404ca2:	4628      	mov	r0, r5
  404ca4:	4621      	mov	r1, r4
  404ca6:	f04f 32ff 	mov.w	r2, #4294967295
  404caa:	4b54      	ldr	r3, [pc, #336]	; (404dfc <_svfprintf_r+0x904>)
  404cac:	f003 fa54 	bl	408158 <__aeabi_dcmple>
  404cb0:	2800      	cmp	r0, #0
  404cb2:	f040 8340 	bne.w	405336 <_svfprintf_r+0xe3e>
  404cb6:	a815      	add	r0, sp, #84	; 0x54
  404cb8:	c80d      	ldmia	r0, {r0, r2, r3}
  404cba:	9914      	ldr	r1, [sp, #80]	; 0x50
  404cbc:	f003 fa42 	bl	408144 <__aeabi_dcmplt>
  404cc0:	2800      	cmp	r0, #0
  404cc2:	f040 8530 	bne.w	405726 <_svfprintf_r+0x122e>
  404cc6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404cca:	4e4d      	ldr	r6, [pc, #308]	; (404e00 <_svfprintf_r+0x908>)
  404ccc:	4b4d      	ldr	r3, [pc, #308]	; (404e04 <_svfprintf_r+0x90c>)
  404cce:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404cd2:	9007      	str	r0, [sp, #28]
  404cd4:	9811      	ldr	r0, [sp, #68]	; 0x44
  404cd6:	2203      	movs	r2, #3
  404cd8:	2100      	movs	r1, #0
  404cda:	9208      	str	r2, [sp, #32]
  404cdc:	910a      	str	r1, [sp, #40]	; 0x28
  404cde:	2847      	cmp	r0, #71	; 0x47
  404ce0:	bfd8      	it	le
  404ce2:	461e      	movle	r6, r3
  404ce4:	920e      	str	r2, [sp, #56]	; 0x38
  404ce6:	9112      	str	r1, [sp, #72]	; 0x48
  404ce8:	e51e      	b.n	404728 <_svfprintf_r+0x230>
  404cea:	f04b 0b08 	orr.w	fp, fp, #8
  404cee:	f89a 3000 	ldrb.w	r3, [sl]
  404cf2:	e459      	b.n	4045a8 <_svfprintf_r+0xb0>
  404cf4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404cf8:	2300      	movs	r3, #0
  404cfa:	461c      	mov	r4, r3
  404cfc:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404d00:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404d04:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404d08:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404d0c:	2809      	cmp	r0, #9
  404d0e:	d9f5      	bls.n	404cfc <_svfprintf_r+0x804>
  404d10:	940d      	str	r4, [sp, #52]	; 0x34
  404d12:	e44b      	b.n	4045ac <_svfprintf_r+0xb4>
  404d14:	f04b 0b10 	orr.w	fp, fp, #16
  404d18:	9311      	str	r3, [sp, #68]	; 0x44
  404d1a:	f01b 0320 	ands.w	r3, fp, #32
  404d1e:	f43f ae1d 	beq.w	40495c <_svfprintf_r+0x464>
  404d22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404d24:	3507      	adds	r5, #7
  404d26:	f025 0307 	bic.w	r3, r5, #7
  404d2a:	f103 0208 	add.w	r2, r3, #8
  404d2e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404d32:	920f      	str	r2, [sp, #60]	; 0x3c
  404d34:	2300      	movs	r3, #0
  404d36:	e4d2      	b.n	4046de <_svfprintf_r+0x1e6>
  404d38:	9311      	str	r3, [sp, #68]	; 0x44
  404d3a:	2a00      	cmp	r2, #0
  404d3c:	f040 85e7 	bne.w	40590e <_svfprintf_r+0x1416>
  404d40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d42:	2a00      	cmp	r2, #0
  404d44:	f43f aca3 	beq.w	40468e <_svfprintf_r+0x196>
  404d48:	2300      	movs	r3, #0
  404d4a:	2101      	movs	r1, #1
  404d4c:	461f      	mov	r7, r3
  404d4e:	9108      	str	r1, [sp, #32]
  404d50:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404d54:	f8cd b01c 	str.w	fp, [sp, #28]
  404d58:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404d5c:	930a      	str	r3, [sp, #40]	; 0x28
  404d5e:	9312      	str	r3, [sp, #72]	; 0x48
  404d60:	910e      	str	r1, [sp, #56]	; 0x38
  404d62:	ae28      	add	r6, sp, #160	; 0xa0
  404d64:	e4e4      	b.n	404730 <_svfprintf_r+0x238>
  404d66:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d68:	e534      	b.n	4047d4 <_svfprintf_r+0x2dc>
  404d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d6c:	2b65      	cmp	r3, #101	; 0x65
  404d6e:	f340 80a7 	ble.w	404ec0 <_svfprintf_r+0x9c8>
  404d72:	a815      	add	r0, sp, #84	; 0x54
  404d74:	c80d      	ldmia	r0, {r0, r2, r3}
  404d76:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d78:	f003 f9da 	bl	408130 <__aeabi_dcmpeq>
  404d7c:	2800      	cmp	r0, #0
  404d7e:	f000 8150 	beq.w	405022 <_svfprintf_r+0xb2a>
  404d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404d84:	4a20      	ldr	r2, [pc, #128]	; (404e08 <_svfprintf_r+0x910>)
  404d86:	f8c8 2000 	str.w	r2, [r8]
  404d8a:	3301      	adds	r3, #1
  404d8c:	3401      	adds	r4, #1
  404d8e:	2201      	movs	r2, #1
  404d90:	2b07      	cmp	r3, #7
  404d92:	9427      	str	r4, [sp, #156]	; 0x9c
  404d94:	9326      	str	r3, [sp, #152]	; 0x98
  404d96:	f8c8 2004 	str.w	r2, [r8, #4]
  404d9a:	f300 836a 	bgt.w	405472 <_svfprintf_r+0xf7a>
  404d9e:	f108 0808 	add.w	r8, r8, #8
  404da2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404da4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404da6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404da8:	4293      	cmp	r3, r2
  404daa:	db03      	blt.n	404db4 <_svfprintf_r+0x8bc>
  404dac:	9b07      	ldr	r3, [sp, #28]
  404dae:	07dd      	lsls	r5, r3, #31
  404db0:	f57f ad82 	bpl.w	4048b8 <_svfprintf_r+0x3c0>
  404db4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404db6:	9919      	ldr	r1, [sp, #100]	; 0x64
  404db8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404dba:	f8c8 2000 	str.w	r2, [r8]
  404dbe:	3301      	adds	r3, #1
  404dc0:	440c      	add	r4, r1
  404dc2:	2b07      	cmp	r3, #7
  404dc4:	f8c8 1004 	str.w	r1, [r8, #4]
  404dc8:	9427      	str	r4, [sp, #156]	; 0x9c
  404dca:	9326      	str	r3, [sp, #152]	; 0x98
  404dcc:	f300 839e 	bgt.w	40550c <_svfprintf_r+0x1014>
  404dd0:	f108 0808 	add.w	r8, r8, #8
  404dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404dd6:	1e5e      	subs	r6, r3, #1
  404dd8:	2e00      	cmp	r6, #0
  404dda:	f77f ad6d 	ble.w	4048b8 <_svfprintf_r+0x3c0>
  404dde:	2e10      	cmp	r6, #16
  404de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404de2:	4d0a      	ldr	r5, [pc, #40]	; (404e0c <_svfprintf_r+0x914>)
  404de4:	f340 81f5 	ble.w	4051d2 <_svfprintf_r+0xcda>
  404de8:	4622      	mov	r2, r4
  404dea:	2710      	movs	r7, #16
  404dec:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404df0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404df2:	e013      	b.n	404e1c <_svfprintf_r+0x924>
  404df4:	00408cd4 	.word	0x00408cd4
  404df8:	00408cc0 	.word	0x00408cc0
  404dfc:	7fefffff 	.word	0x7fefffff
  404e00:	00408cb4 	.word	0x00408cb4
  404e04:	00408cb0 	.word	0x00408cb0
  404e08:	00408cf0 	.word	0x00408cf0
  404e0c:	00408d04 	.word	0x00408d04
  404e10:	f108 0808 	add.w	r8, r8, #8
  404e14:	3e10      	subs	r6, #16
  404e16:	2e10      	cmp	r6, #16
  404e18:	f340 81da 	ble.w	4051d0 <_svfprintf_r+0xcd8>
  404e1c:	3301      	adds	r3, #1
  404e1e:	3210      	adds	r2, #16
  404e20:	2b07      	cmp	r3, #7
  404e22:	9227      	str	r2, [sp, #156]	; 0x9c
  404e24:	9326      	str	r3, [sp, #152]	; 0x98
  404e26:	e888 00a0 	stmia.w	r8, {r5, r7}
  404e2a:	ddf1      	ble.n	404e10 <_svfprintf_r+0x918>
  404e2c:	aa25      	add	r2, sp, #148	; 0x94
  404e2e:	4621      	mov	r1, r4
  404e30:	4658      	mov	r0, fp
  404e32:	f002 fcb3 	bl	40779c <__ssprint_r>
  404e36:	2800      	cmp	r0, #0
  404e38:	f47f ac30 	bne.w	40469c <_svfprintf_r+0x1a4>
  404e3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404e3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e40:	46c8      	mov	r8, r9
  404e42:	e7e7      	b.n	404e14 <_svfprintf_r+0x91c>
  404e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404e46:	9a08      	ldr	r2, [sp, #32]
  404e48:	1a9f      	subs	r7, r3, r2
  404e4a:	2f00      	cmp	r7, #0
  404e4c:	f77f ace5 	ble.w	40481a <_svfprintf_r+0x322>
  404e50:	2f10      	cmp	r7, #16
  404e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e54:	4db6      	ldr	r5, [pc, #728]	; (405130 <_svfprintf_r+0xc38>)
  404e56:	dd27      	ble.n	404ea8 <_svfprintf_r+0x9b0>
  404e58:	4642      	mov	r2, r8
  404e5a:	4621      	mov	r1, r4
  404e5c:	46b0      	mov	r8, r6
  404e5e:	f04f 0b10 	mov.w	fp, #16
  404e62:	462e      	mov	r6, r5
  404e64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404e66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404e68:	e004      	b.n	404e74 <_svfprintf_r+0x97c>
  404e6a:	3f10      	subs	r7, #16
  404e6c:	2f10      	cmp	r7, #16
  404e6e:	f102 0208 	add.w	r2, r2, #8
  404e72:	dd15      	ble.n	404ea0 <_svfprintf_r+0x9a8>
  404e74:	3301      	adds	r3, #1
  404e76:	3110      	adds	r1, #16
  404e78:	2b07      	cmp	r3, #7
  404e7a:	9127      	str	r1, [sp, #156]	; 0x9c
  404e7c:	9326      	str	r3, [sp, #152]	; 0x98
  404e7e:	e882 0840 	stmia.w	r2, {r6, fp}
  404e82:	ddf2      	ble.n	404e6a <_svfprintf_r+0x972>
  404e84:	aa25      	add	r2, sp, #148	; 0x94
  404e86:	4629      	mov	r1, r5
  404e88:	4620      	mov	r0, r4
  404e8a:	f002 fc87 	bl	40779c <__ssprint_r>
  404e8e:	2800      	cmp	r0, #0
  404e90:	f47f ac04 	bne.w	40469c <_svfprintf_r+0x1a4>
  404e94:	3f10      	subs	r7, #16
  404e96:	2f10      	cmp	r7, #16
  404e98:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404e9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e9c:	464a      	mov	r2, r9
  404e9e:	dce9      	bgt.n	404e74 <_svfprintf_r+0x97c>
  404ea0:	4635      	mov	r5, r6
  404ea2:	460c      	mov	r4, r1
  404ea4:	4646      	mov	r6, r8
  404ea6:	4690      	mov	r8, r2
  404ea8:	3301      	adds	r3, #1
  404eaa:	443c      	add	r4, r7
  404eac:	2b07      	cmp	r3, #7
  404eae:	9427      	str	r4, [sp, #156]	; 0x9c
  404eb0:	9326      	str	r3, [sp, #152]	; 0x98
  404eb2:	e888 00a0 	stmia.w	r8, {r5, r7}
  404eb6:	f300 8232 	bgt.w	40531e <_svfprintf_r+0xe26>
  404eba:	f108 0808 	add.w	r8, r8, #8
  404ebe:	e4ac      	b.n	40481a <_svfprintf_r+0x322>
  404ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ec2:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404ec4:	2b01      	cmp	r3, #1
  404ec6:	f340 81fe 	ble.w	4052c6 <_svfprintf_r+0xdce>
  404eca:	3701      	adds	r7, #1
  404ecc:	3401      	adds	r4, #1
  404ece:	2301      	movs	r3, #1
  404ed0:	2f07      	cmp	r7, #7
  404ed2:	9427      	str	r4, [sp, #156]	; 0x9c
  404ed4:	9726      	str	r7, [sp, #152]	; 0x98
  404ed6:	f8c8 6000 	str.w	r6, [r8]
  404eda:	f8c8 3004 	str.w	r3, [r8, #4]
  404ede:	f300 8203 	bgt.w	4052e8 <_svfprintf_r+0xdf0>
  404ee2:	f108 0808 	add.w	r8, r8, #8
  404ee6:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404ee8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404eea:	f8c8 3000 	str.w	r3, [r8]
  404eee:	3701      	adds	r7, #1
  404ef0:	4414      	add	r4, r2
  404ef2:	2f07      	cmp	r7, #7
  404ef4:	9427      	str	r4, [sp, #156]	; 0x9c
  404ef6:	9726      	str	r7, [sp, #152]	; 0x98
  404ef8:	f8c8 2004 	str.w	r2, [r8, #4]
  404efc:	f300 8200 	bgt.w	405300 <_svfprintf_r+0xe08>
  404f00:	f108 0808 	add.w	r8, r8, #8
  404f04:	a815      	add	r0, sp, #84	; 0x54
  404f06:	c80d      	ldmia	r0, {r0, r2, r3}
  404f08:	9914      	ldr	r1, [sp, #80]	; 0x50
  404f0a:	f003 f911 	bl	408130 <__aeabi_dcmpeq>
  404f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404f10:	2800      	cmp	r0, #0
  404f12:	f040 8101 	bne.w	405118 <_svfprintf_r+0xc20>
  404f16:	3b01      	subs	r3, #1
  404f18:	3701      	adds	r7, #1
  404f1a:	3601      	adds	r6, #1
  404f1c:	441c      	add	r4, r3
  404f1e:	2f07      	cmp	r7, #7
  404f20:	9726      	str	r7, [sp, #152]	; 0x98
  404f22:	9427      	str	r4, [sp, #156]	; 0x9c
  404f24:	f8c8 6000 	str.w	r6, [r8]
  404f28:	f8c8 3004 	str.w	r3, [r8, #4]
  404f2c:	f300 8127 	bgt.w	40517e <_svfprintf_r+0xc86>
  404f30:	f108 0808 	add.w	r8, r8, #8
  404f34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404f36:	f8c8 2004 	str.w	r2, [r8, #4]
  404f3a:	3701      	adds	r7, #1
  404f3c:	4414      	add	r4, r2
  404f3e:	ab21      	add	r3, sp, #132	; 0x84
  404f40:	2f07      	cmp	r7, #7
  404f42:	9427      	str	r4, [sp, #156]	; 0x9c
  404f44:	9726      	str	r7, [sp, #152]	; 0x98
  404f46:	f8c8 3000 	str.w	r3, [r8]
  404f4a:	f77f acb3 	ble.w	4048b4 <_svfprintf_r+0x3bc>
  404f4e:	aa25      	add	r2, sp, #148	; 0x94
  404f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f52:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f54:	f002 fc22 	bl	40779c <__ssprint_r>
  404f58:	2800      	cmp	r0, #0
  404f5a:	f47f ab9f 	bne.w	40469c <_svfprintf_r+0x1a4>
  404f5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f60:	46c8      	mov	r8, r9
  404f62:	e4a9      	b.n	4048b8 <_svfprintf_r+0x3c0>
  404f64:	aa25      	add	r2, sp, #148	; 0x94
  404f66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f68:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f6a:	f002 fc17 	bl	40779c <__ssprint_r>
  404f6e:	2800      	cmp	r0, #0
  404f70:	f43f aceb 	beq.w	40494a <_svfprintf_r+0x452>
  404f74:	f7ff bb92 	b.w	40469c <_svfprintf_r+0x1a4>
  404f78:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404f7c:	2b01      	cmp	r3, #1
  404f7e:	f000 8134 	beq.w	4051ea <_svfprintf_r+0xcf2>
  404f82:	2b02      	cmp	r3, #2
  404f84:	d125      	bne.n	404fd2 <_svfprintf_r+0xada>
  404f86:	f8cd b01c 	str.w	fp, [sp, #28]
  404f8a:	2400      	movs	r4, #0
  404f8c:	2500      	movs	r5, #0
  404f8e:	e61e      	b.n	404bce <_svfprintf_r+0x6d6>
  404f90:	aa25      	add	r2, sp, #148	; 0x94
  404f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f94:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f96:	f002 fc01 	bl	40779c <__ssprint_r>
  404f9a:	2800      	cmp	r0, #0
  404f9c:	f47f ab7e 	bne.w	40469c <_svfprintf_r+0x1a4>
  404fa0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fa2:	46c8      	mov	r8, r9
  404fa4:	e475      	b.n	404892 <_svfprintf_r+0x39a>
  404fa6:	aa25      	add	r2, sp, #148	; 0x94
  404fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404faa:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fac:	f002 fbf6 	bl	40779c <__ssprint_r>
  404fb0:	2800      	cmp	r0, #0
  404fb2:	f47f ab73 	bne.w	40469c <_svfprintf_r+0x1a4>
  404fb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fb8:	46c8      	mov	r8, r9
  404fba:	e41b      	b.n	4047f4 <_svfprintf_r+0x2fc>
  404fbc:	aa25      	add	r2, sp, #148	; 0x94
  404fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fc0:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fc2:	f002 fbeb 	bl	40779c <__ssprint_r>
  404fc6:	2800      	cmp	r0, #0
  404fc8:	f47f ab68 	bne.w	40469c <_svfprintf_r+0x1a4>
  404fcc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fce:	46c8      	mov	r8, r9
  404fd0:	e420      	b.n	404814 <_svfprintf_r+0x31c>
  404fd2:	f8cd b01c 	str.w	fp, [sp, #28]
  404fd6:	2400      	movs	r4, #0
  404fd8:	2500      	movs	r5, #0
  404fda:	4649      	mov	r1, r9
  404fdc:	e000      	b.n	404fe0 <_svfprintf_r+0xae8>
  404fde:	4631      	mov	r1, r6
  404fe0:	08e2      	lsrs	r2, r4, #3
  404fe2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404fe6:	08e8      	lsrs	r0, r5, #3
  404fe8:	f004 0307 	and.w	r3, r4, #7
  404fec:	4605      	mov	r5, r0
  404fee:	4614      	mov	r4, r2
  404ff0:	3330      	adds	r3, #48	; 0x30
  404ff2:	ea54 0205 	orrs.w	r2, r4, r5
  404ff6:	f801 3c01 	strb.w	r3, [r1, #-1]
  404ffa:	f101 36ff 	add.w	r6, r1, #4294967295
  404ffe:	d1ee      	bne.n	404fde <_svfprintf_r+0xae6>
  405000:	9a07      	ldr	r2, [sp, #28]
  405002:	07d2      	lsls	r2, r2, #31
  405004:	f57f adf3 	bpl.w	404bee <_svfprintf_r+0x6f6>
  405008:	2b30      	cmp	r3, #48	; 0x30
  40500a:	f43f adf0 	beq.w	404bee <_svfprintf_r+0x6f6>
  40500e:	3902      	subs	r1, #2
  405010:	2330      	movs	r3, #48	; 0x30
  405012:	f806 3c01 	strb.w	r3, [r6, #-1]
  405016:	eba9 0301 	sub.w	r3, r9, r1
  40501a:	930e      	str	r3, [sp, #56]	; 0x38
  40501c:	460e      	mov	r6, r1
  40501e:	f7ff bb7b 	b.w	404718 <_svfprintf_r+0x220>
  405022:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405024:	2900      	cmp	r1, #0
  405026:	f340 822e 	ble.w	405486 <_svfprintf_r+0xf8e>
  40502a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40502c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40502e:	4293      	cmp	r3, r2
  405030:	bfa8      	it	ge
  405032:	4613      	movge	r3, r2
  405034:	2b00      	cmp	r3, #0
  405036:	461f      	mov	r7, r3
  405038:	dd0d      	ble.n	405056 <_svfprintf_r+0xb5e>
  40503a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40503c:	f8c8 6000 	str.w	r6, [r8]
  405040:	3301      	adds	r3, #1
  405042:	443c      	add	r4, r7
  405044:	2b07      	cmp	r3, #7
  405046:	9427      	str	r4, [sp, #156]	; 0x9c
  405048:	f8c8 7004 	str.w	r7, [r8, #4]
  40504c:	9326      	str	r3, [sp, #152]	; 0x98
  40504e:	f300 831f 	bgt.w	405690 <_svfprintf_r+0x1198>
  405052:	f108 0808 	add.w	r8, r8, #8
  405056:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405058:	2f00      	cmp	r7, #0
  40505a:	bfa8      	it	ge
  40505c:	1bdb      	subge	r3, r3, r7
  40505e:	2b00      	cmp	r3, #0
  405060:	461f      	mov	r7, r3
  405062:	f340 80d6 	ble.w	405212 <_svfprintf_r+0xd1a>
  405066:	2f10      	cmp	r7, #16
  405068:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40506a:	4d31      	ldr	r5, [pc, #196]	; (405130 <_svfprintf_r+0xc38>)
  40506c:	f340 81ed 	ble.w	40544a <_svfprintf_r+0xf52>
  405070:	4642      	mov	r2, r8
  405072:	4621      	mov	r1, r4
  405074:	46b0      	mov	r8, r6
  405076:	f04f 0b10 	mov.w	fp, #16
  40507a:	462e      	mov	r6, r5
  40507c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40507e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405080:	e004      	b.n	40508c <_svfprintf_r+0xb94>
  405082:	3208      	adds	r2, #8
  405084:	3f10      	subs	r7, #16
  405086:	2f10      	cmp	r7, #16
  405088:	f340 81db 	ble.w	405442 <_svfprintf_r+0xf4a>
  40508c:	3301      	adds	r3, #1
  40508e:	3110      	adds	r1, #16
  405090:	2b07      	cmp	r3, #7
  405092:	9127      	str	r1, [sp, #156]	; 0x9c
  405094:	9326      	str	r3, [sp, #152]	; 0x98
  405096:	e882 0840 	stmia.w	r2, {r6, fp}
  40509a:	ddf2      	ble.n	405082 <_svfprintf_r+0xb8a>
  40509c:	aa25      	add	r2, sp, #148	; 0x94
  40509e:	4629      	mov	r1, r5
  4050a0:	4620      	mov	r0, r4
  4050a2:	f002 fb7b 	bl	40779c <__ssprint_r>
  4050a6:	2800      	cmp	r0, #0
  4050a8:	f47f aaf8 	bne.w	40469c <_svfprintf_r+0x1a4>
  4050ac:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4050ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050b0:	464a      	mov	r2, r9
  4050b2:	e7e7      	b.n	405084 <_svfprintf_r+0xb8c>
  4050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050b6:	930e      	str	r3, [sp, #56]	; 0x38
  4050b8:	464e      	mov	r6, r9
  4050ba:	f7ff bb2d 	b.w	404718 <_svfprintf_r+0x220>
  4050be:	2d00      	cmp	r5, #0
  4050c0:	bf08      	it	eq
  4050c2:	2c0a      	cmpeq	r4, #10
  4050c4:	f0c0 808f 	bcc.w	4051e6 <_svfprintf_r+0xcee>
  4050c8:	464e      	mov	r6, r9
  4050ca:	4620      	mov	r0, r4
  4050cc:	4629      	mov	r1, r5
  4050ce:	220a      	movs	r2, #10
  4050d0:	2300      	movs	r3, #0
  4050d2:	f003 f875 	bl	4081c0 <__aeabi_uldivmod>
  4050d6:	3230      	adds	r2, #48	; 0x30
  4050d8:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4050dc:	4620      	mov	r0, r4
  4050de:	4629      	mov	r1, r5
  4050e0:	2300      	movs	r3, #0
  4050e2:	220a      	movs	r2, #10
  4050e4:	f003 f86c 	bl	4081c0 <__aeabi_uldivmod>
  4050e8:	4604      	mov	r4, r0
  4050ea:	460d      	mov	r5, r1
  4050ec:	ea54 0305 	orrs.w	r3, r4, r5
  4050f0:	d1eb      	bne.n	4050ca <_svfprintf_r+0xbd2>
  4050f2:	eba9 0306 	sub.w	r3, r9, r6
  4050f6:	930e      	str	r3, [sp, #56]	; 0x38
  4050f8:	f7ff bb0e 	b.w	404718 <_svfprintf_r+0x220>
  4050fc:	aa25      	add	r2, sp, #148	; 0x94
  4050fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405100:	980c      	ldr	r0, [sp, #48]	; 0x30
  405102:	f002 fb4b 	bl	40779c <__ssprint_r>
  405106:	2800      	cmp	r0, #0
  405108:	f47f aac8 	bne.w	40469c <_svfprintf_r+0x1a4>
  40510c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405110:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405112:	46c8      	mov	r8, r9
  405114:	f7ff bb5e 	b.w	4047d4 <_svfprintf_r+0x2dc>
  405118:	1e5e      	subs	r6, r3, #1
  40511a:	2e00      	cmp	r6, #0
  40511c:	f77f af0a 	ble.w	404f34 <_svfprintf_r+0xa3c>
  405120:	2e10      	cmp	r6, #16
  405122:	4d03      	ldr	r5, [pc, #12]	; (405130 <_svfprintf_r+0xc38>)
  405124:	dd22      	ble.n	40516c <_svfprintf_r+0xc74>
  405126:	4622      	mov	r2, r4
  405128:	f04f 0b10 	mov.w	fp, #16
  40512c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40512e:	e006      	b.n	40513e <_svfprintf_r+0xc46>
  405130:	00408d04 	.word	0x00408d04
  405134:	3e10      	subs	r6, #16
  405136:	2e10      	cmp	r6, #16
  405138:	f108 0808 	add.w	r8, r8, #8
  40513c:	dd15      	ble.n	40516a <_svfprintf_r+0xc72>
  40513e:	3701      	adds	r7, #1
  405140:	3210      	adds	r2, #16
  405142:	2f07      	cmp	r7, #7
  405144:	9227      	str	r2, [sp, #156]	; 0x9c
  405146:	9726      	str	r7, [sp, #152]	; 0x98
  405148:	e888 0820 	stmia.w	r8, {r5, fp}
  40514c:	ddf2      	ble.n	405134 <_svfprintf_r+0xc3c>
  40514e:	aa25      	add	r2, sp, #148	; 0x94
  405150:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405152:	4620      	mov	r0, r4
  405154:	f002 fb22 	bl	40779c <__ssprint_r>
  405158:	2800      	cmp	r0, #0
  40515a:	f47f aa9f 	bne.w	40469c <_svfprintf_r+0x1a4>
  40515e:	3e10      	subs	r6, #16
  405160:	2e10      	cmp	r6, #16
  405162:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405164:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405166:	46c8      	mov	r8, r9
  405168:	dce9      	bgt.n	40513e <_svfprintf_r+0xc46>
  40516a:	4614      	mov	r4, r2
  40516c:	3701      	adds	r7, #1
  40516e:	4434      	add	r4, r6
  405170:	2f07      	cmp	r7, #7
  405172:	9427      	str	r4, [sp, #156]	; 0x9c
  405174:	9726      	str	r7, [sp, #152]	; 0x98
  405176:	e888 0060 	stmia.w	r8, {r5, r6}
  40517a:	f77f aed9 	ble.w	404f30 <_svfprintf_r+0xa38>
  40517e:	aa25      	add	r2, sp, #148	; 0x94
  405180:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405182:	980c      	ldr	r0, [sp, #48]	; 0x30
  405184:	f002 fb0a 	bl	40779c <__ssprint_r>
  405188:	2800      	cmp	r0, #0
  40518a:	f47f aa87 	bne.w	40469c <_svfprintf_r+0x1a4>
  40518e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405190:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405192:	46c8      	mov	r8, r9
  405194:	e6ce      	b.n	404f34 <_svfprintf_r+0xa3c>
  405196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405198:	6814      	ldr	r4, [r2, #0]
  40519a:	4613      	mov	r3, r2
  40519c:	3304      	adds	r3, #4
  40519e:	17e5      	asrs	r5, r4, #31
  4051a0:	930f      	str	r3, [sp, #60]	; 0x3c
  4051a2:	4622      	mov	r2, r4
  4051a4:	462b      	mov	r3, r5
  4051a6:	e4fa      	b.n	404b9e <_svfprintf_r+0x6a6>
  4051a8:	3204      	adds	r2, #4
  4051aa:	681c      	ldr	r4, [r3, #0]
  4051ac:	920f      	str	r2, [sp, #60]	; 0x3c
  4051ae:	2301      	movs	r3, #1
  4051b0:	2500      	movs	r5, #0
  4051b2:	f7ff ba94 	b.w	4046de <_svfprintf_r+0x1e6>
  4051b6:	681c      	ldr	r4, [r3, #0]
  4051b8:	3304      	adds	r3, #4
  4051ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4051bc:	2500      	movs	r5, #0
  4051be:	e421      	b.n	404a04 <_svfprintf_r+0x50c>
  4051c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4051c2:	460a      	mov	r2, r1
  4051c4:	3204      	adds	r2, #4
  4051c6:	680c      	ldr	r4, [r1, #0]
  4051c8:	920f      	str	r2, [sp, #60]	; 0x3c
  4051ca:	2500      	movs	r5, #0
  4051cc:	f7ff ba87 	b.w	4046de <_svfprintf_r+0x1e6>
  4051d0:	4614      	mov	r4, r2
  4051d2:	3301      	adds	r3, #1
  4051d4:	4434      	add	r4, r6
  4051d6:	2b07      	cmp	r3, #7
  4051d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4051da:	9326      	str	r3, [sp, #152]	; 0x98
  4051dc:	e888 0060 	stmia.w	r8, {r5, r6}
  4051e0:	f77f ab68 	ble.w	4048b4 <_svfprintf_r+0x3bc>
  4051e4:	e6b3      	b.n	404f4e <_svfprintf_r+0xa56>
  4051e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4051ea:	f8cd b01c 	str.w	fp, [sp, #28]
  4051ee:	ae42      	add	r6, sp, #264	; 0x108
  4051f0:	3430      	adds	r4, #48	; 0x30
  4051f2:	2301      	movs	r3, #1
  4051f4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4051f8:	930e      	str	r3, [sp, #56]	; 0x38
  4051fa:	f7ff ba8d 	b.w	404718 <_svfprintf_r+0x220>
  4051fe:	aa25      	add	r2, sp, #148	; 0x94
  405200:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405202:	980c      	ldr	r0, [sp, #48]	; 0x30
  405204:	f002 faca 	bl	40779c <__ssprint_r>
  405208:	2800      	cmp	r0, #0
  40520a:	f47f aa47 	bne.w	40469c <_svfprintf_r+0x1a4>
  40520e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405210:	46c8      	mov	r8, r9
  405212:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405216:	429a      	cmp	r2, r3
  405218:	db44      	blt.n	4052a4 <_svfprintf_r+0xdac>
  40521a:	9b07      	ldr	r3, [sp, #28]
  40521c:	07d9      	lsls	r1, r3, #31
  40521e:	d441      	bmi.n	4052a4 <_svfprintf_r+0xdac>
  405220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405222:	9812      	ldr	r0, [sp, #72]	; 0x48
  405224:	1a9a      	subs	r2, r3, r2
  405226:	1a1d      	subs	r5, r3, r0
  405228:	4295      	cmp	r5, r2
  40522a:	bfa8      	it	ge
  40522c:	4615      	movge	r5, r2
  40522e:	2d00      	cmp	r5, #0
  405230:	dd0e      	ble.n	405250 <_svfprintf_r+0xd58>
  405232:	9926      	ldr	r1, [sp, #152]	; 0x98
  405234:	f8c8 5004 	str.w	r5, [r8, #4]
  405238:	3101      	adds	r1, #1
  40523a:	4406      	add	r6, r0
  40523c:	442c      	add	r4, r5
  40523e:	2907      	cmp	r1, #7
  405240:	f8c8 6000 	str.w	r6, [r8]
  405244:	9427      	str	r4, [sp, #156]	; 0x9c
  405246:	9126      	str	r1, [sp, #152]	; 0x98
  405248:	f300 823b 	bgt.w	4056c2 <_svfprintf_r+0x11ca>
  40524c:	f108 0808 	add.w	r8, r8, #8
  405250:	2d00      	cmp	r5, #0
  405252:	bfac      	ite	ge
  405254:	1b56      	subge	r6, r2, r5
  405256:	4616      	movlt	r6, r2
  405258:	2e00      	cmp	r6, #0
  40525a:	f77f ab2d 	ble.w	4048b8 <_svfprintf_r+0x3c0>
  40525e:	2e10      	cmp	r6, #16
  405260:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405262:	4db0      	ldr	r5, [pc, #704]	; (405524 <_svfprintf_r+0x102c>)
  405264:	ddb5      	ble.n	4051d2 <_svfprintf_r+0xcda>
  405266:	4622      	mov	r2, r4
  405268:	2710      	movs	r7, #16
  40526a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40526e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405270:	e004      	b.n	40527c <_svfprintf_r+0xd84>
  405272:	f108 0808 	add.w	r8, r8, #8
  405276:	3e10      	subs	r6, #16
  405278:	2e10      	cmp	r6, #16
  40527a:	dda9      	ble.n	4051d0 <_svfprintf_r+0xcd8>
  40527c:	3301      	adds	r3, #1
  40527e:	3210      	adds	r2, #16
  405280:	2b07      	cmp	r3, #7
  405282:	9227      	str	r2, [sp, #156]	; 0x9c
  405284:	9326      	str	r3, [sp, #152]	; 0x98
  405286:	e888 00a0 	stmia.w	r8, {r5, r7}
  40528a:	ddf2      	ble.n	405272 <_svfprintf_r+0xd7a>
  40528c:	aa25      	add	r2, sp, #148	; 0x94
  40528e:	4621      	mov	r1, r4
  405290:	4658      	mov	r0, fp
  405292:	f002 fa83 	bl	40779c <__ssprint_r>
  405296:	2800      	cmp	r0, #0
  405298:	f47f aa00 	bne.w	40469c <_svfprintf_r+0x1a4>
  40529c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40529e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052a0:	46c8      	mov	r8, r9
  4052a2:	e7e8      	b.n	405276 <_svfprintf_r+0xd7e>
  4052a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052a6:	9819      	ldr	r0, [sp, #100]	; 0x64
  4052a8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4052aa:	f8c8 1000 	str.w	r1, [r8]
  4052ae:	3301      	adds	r3, #1
  4052b0:	4404      	add	r4, r0
  4052b2:	2b07      	cmp	r3, #7
  4052b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4052b6:	f8c8 0004 	str.w	r0, [r8, #4]
  4052ba:	9326      	str	r3, [sp, #152]	; 0x98
  4052bc:	f300 81f5 	bgt.w	4056aa <_svfprintf_r+0x11b2>
  4052c0:	f108 0808 	add.w	r8, r8, #8
  4052c4:	e7ac      	b.n	405220 <_svfprintf_r+0xd28>
  4052c6:	9b07      	ldr	r3, [sp, #28]
  4052c8:	07da      	lsls	r2, r3, #31
  4052ca:	f53f adfe 	bmi.w	404eca <_svfprintf_r+0x9d2>
  4052ce:	3701      	adds	r7, #1
  4052d0:	3401      	adds	r4, #1
  4052d2:	2301      	movs	r3, #1
  4052d4:	2f07      	cmp	r7, #7
  4052d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4052d8:	9726      	str	r7, [sp, #152]	; 0x98
  4052da:	f8c8 6000 	str.w	r6, [r8]
  4052de:	f8c8 3004 	str.w	r3, [r8, #4]
  4052e2:	f77f ae25 	ble.w	404f30 <_svfprintf_r+0xa38>
  4052e6:	e74a      	b.n	40517e <_svfprintf_r+0xc86>
  4052e8:	aa25      	add	r2, sp, #148	; 0x94
  4052ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052ec:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052ee:	f002 fa55 	bl	40779c <__ssprint_r>
  4052f2:	2800      	cmp	r0, #0
  4052f4:	f47f a9d2 	bne.w	40469c <_svfprintf_r+0x1a4>
  4052f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4052fc:	46c8      	mov	r8, r9
  4052fe:	e5f2      	b.n	404ee6 <_svfprintf_r+0x9ee>
  405300:	aa25      	add	r2, sp, #148	; 0x94
  405302:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405304:	980c      	ldr	r0, [sp, #48]	; 0x30
  405306:	f002 fa49 	bl	40779c <__ssprint_r>
  40530a:	2800      	cmp	r0, #0
  40530c:	f47f a9c6 	bne.w	40469c <_svfprintf_r+0x1a4>
  405310:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405312:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405314:	46c8      	mov	r8, r9
  405316:	e5f5      	b.n	404f04 <_svfprintf_r+0xa0c>
  405318:	464e      	mov	r6, r9
  40531a:	f7ff b9fd 	b.w	404718 <_svfprintf_r+0x220>
  40531e:	aa25      	add	r2, sp, #148	; 0x94
  405320:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405322:	980c      	ldr	r0, [sp, #48]	; 0x30
  405324:	f002 fa3a 	bl	40779c <__ssprint_r>
  405328:	2800      	cmp	r0, #0
  40532a:	f47f a9b7 	bne.w	40469c <_svfprintf_r+0x1a4>
  40532e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405330:	46c8      	mov	r8, r9
  405332:	f7ff ba72 	b.w	40481a <_svfprintf_r+0x322>
  405336:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405338:	4622      	mov	r2, r4
  40533a:	4620      	mov	r0, r4
  40533c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40533e:	4623      	mov	r3, r4
  405340:	4621      	mov	r1, r4
  405342:	f002 ff27 	bl	408194 <__aeabi_dcmpun>
  405346:	2800      	cmp	r0, #0
  405348:	f040 8286 	bne.w	405858 <_svfprintf_r+0x1360>
  40534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40534e:	3301      	adds	r3, #1
  405350:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405352:	f023 0320 	bic.w	r3, r3, #32
  405356:	930e      	str	r3, [sp, #56]	; 0x38
  405358:	f000 81e2 	beq.w	405720 <_svfprintf_r+0x1228>
  40535c:	2b47      	cmp	r3, #71	; 0x47
  40535e:	f000 811e 	beq.w	40559e <_svfprintf_r+0x10a6>
  405362:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405366:	9307      	str	r3, [sp, #28]
  405368:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40536a:	1e1f      	subs	r7, r3, #0
  40536c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40536e:	9308      	str	r3, [sp, #32]
  405370:	bfbb      	ittet	lt
  405372:	463b      	movlt	r3, r7
  405374:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  405378:	2300      	movge	r3, #0
  40537a:	232d      	movlt	r3, #45	; 0x2d
  40537c:	9310      	str	r3, [sp, #64]	; 0x40
  40537e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405380:	2b66      	cmp	r3, #102	; 0x66
  405382:	f000 81bb 	beq.w	4056fc <_svfprintf_r+0x1204>
  405386:	2b46      	cmp	r3, #70	; 0x46
  405388:	f000 80df 	beq.w	40554a <_svfprintf_r+0x1052>
  40538c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40538e:	9a08      	ldr	r2, [sp, #32]
  405390:	2b45      	cmp	r3, #69	; 0x45
  405392:	bf0c      	ite	eq
  405394:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  405396:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  405398:	a823      	add	r0, sp, #140	; 0x8c
  40539a:	a920      	add	r1, sp, #128	; 0x80
  40539c:	bf08      	it	eq
  40539e:	1c5d      	addeq	r5, r3, #1
  4053a0:	9004      	str	r0, [sp, #16]
  4053a2:	9103      	str	r1, [sp, #12]
  4053a4:	a81f      	add	r0, sp, #124	; 0x7c
  4053a6:	2102      	movs	r1, #2
  4053a8:	463b      	mov	r3, r7
  4053aa:	9002      	str	r0, [sp, #8]
  4053ac:	9501      	str	r5, [sp, #4]
  4053ae:	9100      	str	r1, [sp, #0]
  4053b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053b2:	f000 fb75 	bl	405aa0 <_dtoa_r>
  4053b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053b8:	2b67      	cmp	r3, #103	; 0x67
  4053ba:	4606      	mov	r6, r0
  4053bc:	f040 81e0 	bne.w	405780 <_svfprintf_r+0x1288>
  4053c0:	f01b 0f01 	tst.w	fp, #1
  4053c4:	f000 8246 	beq.w	405854 <_svfprintf_r+0x135c>
  4053c8:	1974      	adds	r4, r6, r5
  4053ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4053cc:	9808      	ldr	r0, [sp, #32]
  4053ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4053d0:	4639      	mov	r1, r7
  4053d2:	f002 fead 	bl	408130 <__aeabi_dcmpeq>
  4053d6:	2800      	cmp	r0, #0
  4053d8:	f040 8165 	bne.w	4056a6 <_svfprintf_r+0x11ae>
  4053dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4053de:	42a3      	cmp	r3, r4
  4053e0:	d206      	bcs.n	4053f0 <_svfprintf_r+0xef8>
  4053e2:	2130      	movs	r1, #48	; 0x30
  4053e4:	1c5a      	adds	r2, r3, #1
  4053e6:	9223      	str	r2, [sp, #140]	; 0x8c
  4053e8:	7019      	strb	r1, [r3, #0]
  4053ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4053ec:	429c      	cmp	r4, r3
  4053ee:	d8f9      	bhi.n	4053e4 <_svfprintf_r+0xeec>
  4053f0:	1b9b      	subs	r3, r3, r6
  4053f2:	9313      	str	r3, [sp, #76]	; 0x4c
  4053f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053f6:	2b47      	cmp	r3, #71	; 0x47
  4053f8:	f000 80e9 	beq.w	4055ce <_svfprintf_r+0x10d6>
  4053fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4053fe:	2b65      	cmp	r3, #101	; 0x65
  405400:	f340 81cd 	ble.w	40579e <_svfprintf_r+0x12a6>
  405404:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405406:	2b66      	cmp	r3, #102	; 0x66
  405408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40540a:	9312      	str	r3, [sp, #72]	; 0x48
  40540c:	f000 819e 	beq.w	40574c <_svfprintf_r+0x1254>
  405410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405412:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405414:	4619      	mov	r1, r3
  405416:	4291      	cmp	r1, r2
  405418:	f300 818a 	bgt.w	405730 <_svfprintf_r+0x1238>
  40541c:	f01b 0f01 	tst.w	fp, #1
  405420:	f040 8213 	bne.w	40584a <_svfprintf_r+0x1352>
  405424:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405428:	9308      	str	r3, [sp, #32]
  40542a:	2367      	movs	r3, #103	; 0x67
  40542c:	920e      	str	r2, [sp, #56]	; 0x38
  40542e:	9311      	str	r3, [sp, #68]	; 0x44
  405430:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405432:	2b00      	cmp	r3, #0
  405434:	f040 80c4 	bne.w	4055c0 <_svfprintf_r+0x10c8>
  405438:	930a      	str	r3, [sp, #40]	; 0x28
  40543a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40543e:	f7ff b973 	b.w	404728 <_svfprintf_r+0x230>
  405442:	4635      	mov	r5, r6
  405444:	460c      	mov	r4, r1
  405446:	4646      	mov	r6, r8
  405448:	4690      	mov	r8, r2
  40544a:	3301      	adds	r3, #1
  40544c:	443c      	add	r4, r7
  40544e:	2b07      	cmp	r3, #7
  405450:	9427      	str	r4, [sp, #156]	; 0x9c
  405452:	9326      	str	r3, [sp, #152]	; 0x98
  405454:	e888 00a0 	stmia.w	r8, {r5, r7}
  405458:	f73f aed1 	bgt.w	4051fe <_svfprintf_r+0xd06>
  40545c:	f108 0808 	add.w	r8, r8, #8
  405460:	e6d7      	b.n	405212 <_svfprintf_r+0xd1a>
  405462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405464:	6813      	ldr	r3, [r2, #0]
  405466:	3204      	adds	r2, #4
  405468:	920f      	str	r2, [sp, #60]	; 0x3c
  40546a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40546c:	601a      	str	r2, [r3, #0]
  40546e:	f7ff b86a 	b.w	404546 <_svfprintf_r+0x4e>
  405472:	aa25      	add	r2, sp, #148	; 0x94
  405474:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405476:	980c      	ldr	r0, [sp, #48]	; 0x30
  405478:	f002 f990 	bl	40779c <__ssprint_r>
  40547c:	2800      	cmp	r0, #0
  40547e:	f47f a90d 	bne.w	40469c <_svfprintf_r+0x1a4>
  405482:	46c8      	mov	r8, r9
  405484:	e48d      	b.n	404da2 <_svfprintf_r+0x8aa>
  405486:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405488:	4a27      	ldr	r2, [pc, #156]	; (405528 <_svfprintf_r+0x1030>)
  40548a:	f8c8 2000 	str.w	r2, [r8]
  40548e:	3301      	adds	r3, #1
  405490:	3401      	adds	r4, #1
  405492:	2201      	movs	r2, #1
  405494:	2b07      	cmp	r3, #7
  405496:	9427      	str	r4, [sp, #156]	; 0x9c
  405498:	9326      	str	r3, [sp, #152]	; 0x98
  40549a:	f8c8 2004 	str.w	r2, [r8, #4]
  40549e:	dc72      	bgt.n	405586 <_svfprintf_r+0x108e>
  4054a0:	f108 0808 	add.w	r8, r8, #8
  4054a4:	b929      	cbnz	r1, 4054b2 <_svfprintf_r+0xfba>
  4054a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4054a8:	b91b      	cbnz	r3, 4054b2 <_svfprintf_r+0xfba>
  4054aa:	9b07      	ldr	r3, [sp, #28]
  4054ac:	07d8      	lsls	r0, r3, #31
  4054ae:	f57f aa03 	bpl.w	4048b8 <_svfprintf_r+0x3c0>
  4054b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4054b4:	9819      	ldr	r0, [sp, #100]	; 0x64
  4054b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4054b8:	f8c8 2000 	str.w	r2, [r8]
  4054bc:	3301      	adds	r3, #1
  4054be:	4602      	mov	r2, r0
  4054c0:	4422      	add	r2, r4
  4054c2:	2b07      	cmp	r3, #7
  4054c4:	9227      	str	r2, [sp, #156]	; 0x9c
  4054c6:	f8c8 0004 	str.w	r0, [r8, #4]
  4054ca:	9326      	str	r3, [sp, #152]	; 0x98
  4054cc:	f300 818d 	bgt.w	4057ea <_svfprintf_r+0x12f2>
  4054d0:	f108 0808 	add.w	r8, r8, #8
  4054d4:	2900      	cmp	r1, #0
  4054d6:	f2c0 8165 	blt.w	4057a4 <_svfprintf_r+0x12ac>
  4054da:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4054dc:	f8c8 6000 	str.w	r6, [r8]
  4054e0:	3301      	adds	r3, #1
  4054e2:	188c      	adds	r4, r1, r2
  4054e4:	2b07      	cmp	r3, #7
  4054e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4054e8:	9326      	str	r3, [sp, #152]	; 0x98
  4054ea:	f8c8 1004 	str.w	r1, [r8, #4]
  4054ee:	f77f a9e1 	ble.w	4048b4 <_svfprintf_r+0x3bc>
  4054f2:	e52c      	b.n	404f4e <_svfprintf_r+0xa56>
  4054f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4054f6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4054f8:	6813      	ldr	r3, [r2, #0]
  4054fa:	17cd      	asrs	r5, r1, #31
  4054fc:	4608      	mov	r0, r1
  4054fe:	3204      	adds	r2, #4
  405500:	4629      	mov	r1, r5
  405502:	920f      	str	r2, [sp, #60]	; 0x3c
  405504:	e9c3 0100 	strd	r0, r1, [r3]
  405508:	f7ff b81d 	b.w	404546 <_svfprintf_r+0x4e>
  40550c:	aa25      	add	r2, sp, #148	; 0x94
  40550e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405510:	980c      	ldr	r0, [sp, #48]	; 0x30
  405512:	f002 f943 	bl	40779c <__ssprint_r>
  405516:	2800      	cmp	r0, #0
  405518:	f47f a8c0 	bne.w	40469c <_svfprintf_r+0x1a4>
  40551c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40551e:	46c8      	mov	r8, r9
  405520:	e458      	b.n	404dd4 <_svfprintf_r+0x8dc>
  405522:	bf00      	nop
  405524:	00408d04 	.word	0x00408d04
  405528:	00408cf0 	.word	0x00408cf0
  40552c:	2140      	movs	r1, #64	; 0x40
  40552e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405530:	f001 fa0c 	bl	40694c <_malloc_r>
  405534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405536:	6010      	str	r0, [r2, #0]
  405538:	6110      	str	r0, [r2, #16]
  40553a:	2800      	cmp	r0, #0
  40553c:	f000 81f2 	beq.w	405924 <_svfprintf_r+0x142c>
  405540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405542:	2340      	movs	r3, #64	; 0x40
  405544:	6153      	str	r3, [r2, #20]
  405546:	f7fe bfee 	b.w	404526 <_svfprintf_r+0x2e>
  40554a:	a823      	add	r0, sp, #140	; 0x8c
  40554c:	a920      	add	r1, sp, #128	; 0x80
  40554e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405550:	9004      	str	r0, [sp, #16]
  405552:	9103      	str	r1, [sp, #12]
  405554:	a81f      	add	r0, sp, #124	; 0x7c
  405556:	2103      	movs	r1, #3
  405558:	9002      	str	r0, [sp, #8]
  40555a:	9a08      	ldr	r2, [sp, #32]
  40555c:	9401      	str	r4, [sp, #4]
  40555e:	463b      	mov	r3, r7
  405560:	9100      	str	r1, [sp, #0]
  405562:	980c      	ldr	r0, [sp, #48]	; 0x30
  405564:	f000 fa9c 	bl	405aa0 <_dtoa_r>
  405568:	4625      	mov	r5, r4
  40556a:	4606      	mov	r6, r0
  40556c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40556e:	2b46      	cmp	r3, #70	; 0x46
  405570:	eb06 0405 	add.w	r4, r6, r5
  405574:	f47f af29 	bne.w	4053ca <_svfprintf_r+0xed2>
  405578:	7833      	ldrb	r3, [r6, #0]
  40557a:	2b30      	cmp	r3, #48	; 0x30
  40557c:	f000 8178 	beq.w	405870 <_svfprintf_r+0x1378>
  405580:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405582:	442c      	add	r4, r5
  405584:	e721      	b.n	4053ca <_svfprintf_r+0xed2>
  405586:	aa25      	add	r2, sp, #148	; 0x94
  405588:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40558a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40558c:	f002 f906 	bl	40779c <__ssprint_r>
  405590:	2800      	cmp	r0, #0
  405592:	f47f a883 	bne.w	40469c <_svfprintf_r+0x1a4>
  405596:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405598:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40559a:	46c8      	mov	r8, r9
  40559c:	e782      	b.n	4054a4 <_svfprintf_r+0xfac>
  40559e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055a0:	2b00      	cmp	r3, #0
  4055a2:	bf08      	it	eq
  4055a4:	2301      	moveq	r3, #1
  4055a6:	930a      	str	r3, [sp, #40]	; 0x28
  4055a8:	e6db      	b.n	405362 <_svfprintf_r+0xe6a>
  4055aa:	4630      	mov	r0, r6
  4055ac:	940a      	str	r4, [sp, #40]	; 0x28
  4055ae:	f002 f887 	bl	4076c0 <strlen>
  4055b2:	950f      	str	r5, [sp, #60]	; 0x3c
  4055b4:	900e      	str	r0, [sp, #56]	; 0x38
  4055b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4055ba:	4603      	mov	r3, r0
  4055bc:	f7ff b9f9 	b.w	4049b2 <_svfprintf_r+0x4ba>
  4055c0:	272d      	movs	r7, #45	; 0x2d
  4055c2:	2300      	movs	r3, #0
  4055c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4055c8:	930a      	str	r3, [sp, #40]	; 0x28
  4055ca:	f7ff b8ae 	b.w	40472a <_svfprintf_r+0x232>
  4055ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4055d0:	9312      	str	r3, [sp, #72]	; 0x48
  4055d2:	461a      	mov	r2, r3
  4055d4:	3303      	adds	r3, #3
  4055d6:	db04      	blt.n	4055e2 <_svfprintf_r+0x10ea>
  4055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4055da:	4619      	mov	r1, r3
  4055dc:	4291      	cmp	r1, r2
  4055de:	f6bf af17 	bge.w	405410 <_svfprintf_r+0xf18>
  4055e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055e4:	3b02      	subs	r3, #2
  4055e6:	9311      	str	r3, [sp, #68]	; 0x44
  4055e8:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4055ec:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4055f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4055f2:	3b01      	subs	r3, #1
  4055f4:	2b00      	cmp	r3, #0
  4055f6:	931f      	str	r3, [sp, #124]	; 0x7c
  4055f8:	bfbd      	ittte	lt
  4055fa:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4055fc:	f1c3 0301 	rsblt	r3, r3, #1
  405600:	222d      	movlt	r2, #45	; 0x2d
  405602:	222b      	movge	r2, #43	; 0x2b
  405604:	2b09      	cmp	r3, #9
  405606:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40560a:	f340 8116 	ble.w	40583a <_svfprintf_r+0x1342>
  40560e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405612:	4620      	mov	r0, r4
  405614:	4dab      	ldr	r5, [pc, #684]	; (4058c4 <_svfprintf_r+0x13cc>)
  405616:	e000      	b.n	40561a <_svfprintf_r+0x1122>
  405618:	4610      	mov	r0, r2
  40561a:	fb85 1203 	smull	r1, r2, r5, r3
  40561e:	17d9      	asrs	r1, r3, #31
  405620:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405624:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405628:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40562c:	3230      	adds	r2, #48	; 0x30
  40562e:	2909      	cmp	r1, #9
  405630:	f800 2c01 	strb.w	r2, [r0, #-1]
  405634:	460b      	mov	r3, r1
  405636:	f100 32ff 	add.w	r2, r0, #4294967295
  40563a:	dced      	bgt.n	405618 <_svfprintf_r+0x1120>
  40563c:	3330      	adds	r3, #48	; 0x30
  40563e:	3802      	subs	r0, #2
  405640:	b2d9      	uxtb	r1, r3
  405642:	4284      	cmp	r4, r0
  405644:	f802 1c01 	strb.w	r1, [r2, #-1]
  405648:	f240 8165 	bls.w	405916 <_svfprintf_r+0x141e>
  40564c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405650:	4613      	mov	r3, r2
  405652:	e001      	b.n	405658 <_svfprintf_r+0x1160>
  405654:	f813 1b01 	ldrb.w	r1, [r3], #1
  405658:	f800 1b01 	strb.w	r1, [r0], #1
  40565c:	42a3      	cmp	r3, r4
  40565e:	d1f9      	bne.n	405654 <_svfprintf_r+0x115c>
  405660:	3301      	adds	r3, #1
  405662:	1a9b      	subs	r3, r3, r2
  405664:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  405668:	4413      	add	r3, r2
  40566a:	aa21      	add	r2, sp, #132	; 0x84
  40566c:	1a9b      	subs	r3, r3, r2
  40566e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405670:	931b      	str	r3, [sp, #108]	; 0x6c
  405672:	2a01      	cmp	r2, #1
  405674:	4413      	add	r3, r2
  405676:	930e      	str	r3, [sp, #56]	; 0x38
  405678:	f340 8119 	ble.w	4058ae <_svfprintf_r+0x13b6>
  40567c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40567e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405680:	4413      	add	r3, r2
  405682:	930e      	str	r3, [sp, #56]	; 0x38
  405684:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405688:	9308      	str	r3, [sp, #32]
  40568a:	2300      	movs	r3, #0
  40568c:	9312      	str	r3, [sp, #72]	; 0x48
  40568e:	e6cf      	b.n	405430 <_svfprintf_r+0xf38>
  405690:	aa25      	add	r2, sp, #148	; 0x94
  405692:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405694:	980c      	ldr	r0, [sp, #48]	; 0x30
  405696:	f002 f881 	bl	40779c <__ssprint_r>
  40569a:	2800      	cmp	r0, #0
  40569c:	f47e affe 	bne.w	40469c <_svfprintf_r+0x1a4>
  4056a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056a2:	46c8      	mov	r8, r9
  4056a4:	e4d7      	b.n	405056 <_svfprintf_r+0xb5e>
  4056a6:	4623      	mov	r3, r4
  4056a8:	e6a2      	b.n	4053f0 <_svfprintf_r+0xef8>
  4056aa:	aa25      	add	r2, sp, #148	; 0x94
  4056ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056b0:	f002 f874 	bl	40779c <__ssprint_r>
  4056b4:	2800      	cmp	r0, #0
  4056b6:	f47e aff1 	bne.w	40469c <_svfprintf_r+0x1a4>
  4056ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056be:	46c8      	mov	r8, r9
  4056c0:	e5ae      	b.n	405220 <_svfprintf_r+0xd28>
  4056c2:	aa25      	add	r2, sp, #148	; 0x94
  4056c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056c8:	f002 f868 	bl	40779c <__ssprint_r>
  4056cc:	2800      	cmp	r0, #0
  4056ce:	f47e afe5 	bne.w	40469c <_svfprintf_r+0x1a4>
  4056d2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4056d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4056d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4056d8:	1a9a      	subs	r2, r3, r2
  4056da:	46c8      	mov	r8, r9
  4056dc:	e5b8      	b.n	405250 <_svfprintf_r+0xd58>
  4056de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056e0:	9612      	str	r6, [sp, #72]	; 0x48
  4056e2:	2b06      	cmp	r3, #6
  4056e4:	bf28      	it	cs
  4056e6:	2306      	movcs	r3, #6
  4056e8:	960a      	str	r6, [sp, #40]	; 0x28
  4056ea:	4637      	mov	r7, r6
  4056ec:	9308      	str	r3, [sp, #32]
  4056ee:	950f      	str	r5, [sp, #60]	; 0x3c
  4056f0:	f8cd b01c 	str.w	fp, [sp, #28]
  4056f4:	930e      	str	r3, [sp, #56]	; 0x38
  4056f6:	4e74      	ldr	r6, [pc, #464]	; (4058c8 <_svfprintf_r+0x13d0>)
  4056f8:	f7ff b816 	b.w	404728 <_svfprintf_r+0x230>
  4056fc:	a823      	add	r0, sp, #140	; 0x8c
  4056fe:	a920      	add	r1, sp, #128	; 0x80
  405700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405702:	9004      	str	r0, [sp, #16]
  405704:	9103      	str	r1, [sp, #12]
  405706:	a81f      	add	r0, sp, #124	; 0x7c
  405708:	2103      	movs	r1, #3
  40570a:	9002      	str	r0, [sp, #8]
  40570c:	9a08      	ldr	r2, [sp, #32]
  40570e:	9501      	str	r5, [sp, #4]
  405710:	463b      	mov	r3, r7
  405712:	9100      	str	r1, [sp, #0]
  405714:	980c      	ldr	r0, [sp, #48]	; 0x30
  405716:	f000 f9c3 	bl	405aa0 <_dtoa_r>
  40571a:	4606      	mov	r6, r0
  40571c:	1944      	adds	r4, r0, r5
  40571e:	e72b      	b.n	405578 <_svfprintf_r+0x1080>
  405720:	2306      	movs	r3, #6
  405722:	930a      	str	r3, [sp, #40]	; 0x28
  405724:	e61d      	b.n	405362 <_svfprintf_r+0xe6a>
  405726:	272d      	movs	r7, #45	; 0x2d
  405728:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40572c:	f7ff bacd 	b.w	404cca <_svfprintf_r+0x7d2>
  405730:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405734:	4413      	add	r3, r2
  405736:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405738:	930e      	str	r3, [sp, #56]	; 0x38
  40573a:	2a00      	cmp	r2, #0
  40573c:	f340 80b0 	ble.w	4058a0 <_svfprintf_r+0x13a8>
  405740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405744:	9308      	str	r3, [sp, #32]
  405746:	2367      	movs	r3, #103	; 0x67
  405748:	9311      	str	r3, [sp, #68]	; 0x44
  40574a:	e671      	b.n	405430 <_svfprintf_r+0xf38>
  40574c:	2b00      	cmp	r3, #0
  40574e:	f340 80c3 	ble.w	4058d8 <_svfprintf_r+0x13e0>
  405752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405754:	2a00      	cmp	r2, #0
  405756:	f040 8099 	bne.w	40588c <_svfprintf_r+0x1394>
  40575a:	f01b 0f01 	tst.w	fp, #1
  40575e:	f040 8095 	bne.w	40588c <_svfprintf_r+0x1394>
  405762:	9308      	str	r3, [sp, #32]
  405764:	930e      	str	r3, [sp, #56]	; 0x38
  405766:	e663      	b.n	405430 <_svfprintf_r+0xf38>
  405768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40576a:	9308      	str	r3, [sp, #32]
  40576c:	930e      	str	r3, [sp, #56]	; 0x38
  40576e:	900a      	str	r0, [sp, #40]	; 0x28
  405770:	950f      	str	r5, [sp, #60]	; 0x3c
  405772:	f8cd b01c 	str.w	fp, [sp, #28]
  405776:	9012      	str	r0, [sp, #72]	; 0x48
  405778:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40577c:	f7fe bfd4 	b.w	404728 <_svfprintf_r+0x230>
  405780:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405782:	2b47      	cmp	r3, #71	; 0x47
  405784:	f47f ae20 	bne.w	4053c8 <_svfprintf_r+0xed0>
  405788:	f01b 0f01 	tst.w	fp, #1
  40578c:	f47f aeee 	bne.w	40556c <_svfprintf_r+0x1074>
  405790:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405792:	1b9b      	subs	r3, r3, r6
  405794:	9313      	str	r3, [sp, #76]	; 0x4c
  405796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405798:	2b47      	cmp	r3, #71	; 0x47
  40579a:	f43f af18 	beq.w	4055ce <_svfprintf_r+0x10d6>
  40579e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4057a0:	9312      	str	r3, [sp, #72]	; 0x48
  4057a2:	e721      	b.n	4055e8 <_svfprintf_r+0x10f0>
  4057a4:	424f      	negs	r7, r1
  4057a6:	3110      	adds	r1, #16
  4057a8:	4d48      	ldr	r5, [pc, #288]	; (4058cc <_svfprintf_r+0x13d4>)
  4057aa:	da2f      	bge.n	40580c <_svfprintf_r+0x1314>
  4057ac:	2410      	movs	r4, #16
  4057ae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4057b2:	e004      	b.n	4057be <_svfprintf_r+0x12c6>
  4057b4:	f108 0808 	add.w	r8, r8, #8
  4057b8:	3f10      	subs	r7, #16
  4057ba:	2f10      	cmp	r7, #16
  4057bc:	dd26      	ble.n	40580c <_svfprintf_r+0x1314>
  4057be:	3301      	adds	r3, #1
  4057c0:	3210      	adds	r2, #16
  4057c2:	2b07      	cmp	r3, #7
  4057c4:	9227      	str	r2, [sp, #156]	; 0x9c
  4057c6:	9326      	str	r3, [sp, #152]	; 0x98
  4057c8:	f8c8 5000 	str.w	r5, [r8]
  4057cc:	f8c8 4004 	str.w	r4, [r8, #4]
  4057d0:	ddf0      	ble.n	4057b4 <_svfprintf_r+0x12bc>
  4057d2:	aa25      	add	r2, sp, #148	; 0x94
  4057d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057d6:	4658      	mov	r0, fp
  4057d8:	f001 ffe0 	bl	40779c <__ssprint_r>
  4057dc:	2800      	cmp	r0, #0
  4057de:	f47e af5d 	bne.w	40469c <_svfprintf_r+0x1a4>
  4057e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4057e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4057e6:	46c8      	mov	r8, r9
  4057e8:	e7e6      	b.n	4057b8 <_svfprintf_r+0x12c0>
  4057ea:	aa25      	add	r2, sp, #148	; 0x94
  4057ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4057ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4057f0:	f001 ffd4 	bl	40779c <__ssprint_r>
  4057f4:	2800      	cmp	r0, #0
  4057f6:	f47e af51 	bne.w	40469c <_svfprintf_r+0x1a4>
  4057fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4057fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4057fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405800:	46c8      	mov	r8, r9
  405802:	e667      	b.n	4054d4 <_svfprintf_r+0xfdc>
  405804:	2000      	movs	r0, #0
  405806:	900a      	str	r0, [sp, #40]	; 0x28
  405808:	f7fe bed0 	b.w	4045ac <_svfprintf_r+0xb4>
  40580c:	3301      	adds	r3, #1
  40580e:	443a      	add	r2, r7
  405810:	2b07      	cmp	r3, #7
  405812:	e888 00a0 	stmia.w	r8, {r5, r7}
  405816:	9227      	str	r2, [sp, #156]	; 0x9c
  405818:	9326      	str	r3, [sp, #152]	; 0x98
  40581a:	f108 0808 	add.w	r8, r8, #8
  40581e:	f77f ae5c 	ble.w	4054da <_svfprintf_r+0xfe2>
  405822:	aa25      	add	r2, sp, #148	; 0x94
  405824:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405826:	980c      	ldr	r0, [sp, #48]	; 0x30
  405828:	f001 ffb8 	bl	40779c <__ssprint_r>
  40582c:	2800      	cmp	r0, #0
  40582e:	f47e af35 	bne.w	40469c <_svfprintf_r+0x1a4>
  405832:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405834:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405836:	46c8      	mov	r8, r9
  405838:	e64f      	b.n	4054da <_svfprintf_r+0xfe2>
  40583a:	3330      	adds	r3, #48	; 0x30
  40583c:	2230      	movs	r2, #48	; 0x30
  40583e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405842:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405846:	ab22      	add	r3, sp, #136	; 0x88
  405848:	e70f      	b.n	40566a <_svfprintf_r+0x1172>
  40584a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40584c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40584e:	4413      	add	r3, r2
  405850:	930e      	str	r3, [sp, #56]	; 0x38
  405852:	e775      	b.n	405740 <_svfprintf_r+0x1248>
  405854:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405856:	e5cb      	b.n	4053f0 <_svfprintf_r+0xef8>
  405858:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40585a:	4e1d      	ldr	r6, [pc, #116]	; (4058d0 <_svfprintf_r+0x13d8>)
  40585c:	2b00      	cmp	r3, #0
  40585e:	bfb6      	itet	lt
  405860:	272d      	movlt	r7, #45	; 0x2d
  405862:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405866:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40586a:	4b1a      	ldr	r3, [pc, #104]	; (4058d4 <_svfprintf_r+0x13dc>)
  40586c:	f7ff ba2f 	b.w	404cce <_svfprintf_r+0x7d6>
  405870:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405872:	9808      	ldr	r0, [sp, #32]
  405874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405876:	4639      	mov	r1, r7
  405878:	f002 fc5a 	bl	408130 <__aeabi_dcmpeq>
  40587c:	2800      	cmp	r0, #0
  40587e:	f47f ae7f 	bne.w	405580 <_svfprintf_r+0x1088>
  405882:	f1c5 0501 	rsb	r5, r5, #1
  405886:	951f      	str	r5, [sp, #124]	; 0x7c
  405888:	442c      	add	r4, r5
  40588a:	e59e      	b.n	4053ca <_svfprintf_r+0xed2>
  40588c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40588e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405890:	4413      	add	r3, r2
  405892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405894:	441a      	add	r2, r3
  405896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40589a:	920e      	str	r2, [sp, #56]	; 0x38
  40589c:	9308      	str	r3, [sp, #32]
  40589e:	e5c7      	b.n	405430 <_svfprintf_r+0xf38>
  4058a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4058a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4058a4:	f1c3 0301 	rsb	r3, r3, #1
  4058a8:	441a      	add	r2, r3
  4058aa:	4613      	mov	r3, r2
  4058ac:	e7d0      	b.n	405850 <_svfprintf_r+0x1358>
  4058ae:	f01b 0301 	ands.w	r3, fp, #1
  4058b2:	9312      	str	r3, [sp, #72]	; 0x48
  4058b4:	f47f aee2 	bne.w	40567c <_svfprintf_r+0x1184>
  4058b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4058ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4058be:	9308      	str	r3, [sp, #32]
  4058c0:	e5b6      	b.n	405430 <_svfprintf_r+0xf38>
  4058c2:	bf00      	nop
  4058c4:	66666667 	.word	0x66666667
  4058c8:	00408ce8 	.word	0x00408ce8
  4058cc:	00408d04 	.word	0x00408d04
  4058d0:	00408cbc 	.word	0x00408cbc
  4058d4:	00408cb8 	.word	0x00408cb8
  4058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058da:	b913      	cbnz	r3, 4058e2 <_svfprintf_r+0x13ea>
  4058dc:	f01b 0f01 	tst.w	fp, #1
  4058e0:	d002      	beq.n	4058e8 <_svfprintf_r+0x13f0>
  4058e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4058e4:	3301      	adds	r3, #1
  4058e6:	e7d4      	b.n	405892 <_svfprintf_r+0x139a>
  4058e8:	2301      	movs	r3, #1
  4058ea:	e73a      	b.n	405762 <_svfprintf_r+0x126a>
  4058ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4058ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4058f2:	6828      	ldr	r0, [r5, #0]
  4058f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4058f8:	900a      	str	r0, [sp, #40]	; 0x28
  4058fa:	4628      	mov	r0, r5
  4058fc:	3004      	adds	r0, #4
  4058fe:	46a2      	mov	sl, r4
  405900:	900f      	str	r0, [sp, #60]	; 0x3c
  405902:	f7fe be51 	b.w	4045a8 <_svfprintf_r+0xb0>
  405906:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40590a:	f7ff b867 	b.w	4049dc <_svfprintf_r+0x4e4>
  40590e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405912:	f7ff ba15 	b.w	404d40 <_svfprintf_r+0x848>
  405916:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40591a:	e6a6      	b.n	40566a <_svfprintf_r+0x1172>
  40591c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405920:	f7ff b8eb 	b.w	404afa <_svfprintf_r+0x602>
  405924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405926:	230c      	movs	r3, #12
  405928:	6013      	str	r3, [r2, #0]
  40592a:	f04f 33ff 	mov.w	r3, #4294967295
  40592e:	9309      	str	r3, [sp, #36]	; 0x24
  405930:	f7fe bebd 	b.w	4046ae <_svfprintf_r+0x1b6>
  405934:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405938:	f7ff b99a 	b.w	404c70 <_svfprintf_r+0x778>
  40593c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405940:	f7ff b976 	b.w	404c30 <_svfprintf_r+0x738>
  405944:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405948:	f7ff b959 	b.w	404bfe <_svfprintf_r+0x706>
  40594c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405950:	f7ff b912 	b.w	404b78 <_svfprintf_r+0x680>

00405954 <register_fini>:
  405954:	4b02      	ldr	r3, [pc, #8]	; (405960 <register_fini+0xc>)
  405956:	b113      	cbz	r3, 40595e <register_fini+0xa>
  405958:	4802      	ldr	r0, [pc, #8]	; (405964 <register_fini+0x10>)
  40595a:	f000 b805 	b.w	405968 <atexit>
  40595e:	4770      	bx	lr
  405960:	00000000 	.word	0x00000000
  405964:	004068f5 	.word	0x004068f5

00405968 <atexit>:
  405968:	2300      	movs	r3, #0
  40596a:	4601      	mov	r1, r0
  40596c:	461a      	mov	r2, r3
  40596e:	4618      	mov	r0, r3
  405970:	f001 bf92 	b.w	407898 <__register_exitproc>

00405974 <quorem>:
  405974:	6902      	ldr	r2, [r0, #16]
  405976:	690b      	ldr	r3, [r1, #16]
  405978:	4293      	cmp	r3, r2
  40597a:	f300 808d 	bgt.w	405a98 <quorem+0x124>
  40597e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405982:	f103 38ff 	add.w	r8, r3, #4294967295
  405986:	f101 0714 	add.w	r7, r1, #20
  40598a:	f100 0b14 	add.w	fp, r0, #20
  40598e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  405992:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  405996:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40599a:	b083      	sub	sp, #12
  40599c:	3201      	adds	r2, #1
  40599e:	fbb3 f9f2 	udiv	r9, r3, r2
  4059a2:	eb0b 0304 	add.w	r3, fp, r4
  4059a6:	9400      	str	r4, [sp, #0]
  4059a8:	eb07 0a04 	add.w	sl, r7, r4
  4059ac:	9301      	str	r3, [sp, #4]
  4059ae:	f1b9 0f00 	cmp.w	r9, #0
  4059b2:	d039      	beq.n	405a28 <quorem+0xb4>
  4059b4:	2500      	movs	r5, #0
  4059b6:	462e      	mov	r6, r5
  4059b8:	46bc      	mov	ip, r7
  4059ba:	46de      	mov	lr, fp
  4059bc:	f85c 4b04 	ldr.w	r4, [ip], #4
  4059c0:	f8de 3000 	ldr.w	r3, [lr]
  4059c4:	b2a2      	uxth	r2, r4
  4059c6:	fb09 5502 	mla	r5, r9, r2, r5
  4059ca:	0c22      	lsrs	r2, r4, #16
  4059cc:	0c2c      	lsrs	r4, r5, #16
  4059ce:	fb09 4202 	mla	r2, r9, r2, r4
  4059d2:	b2ad      	uxth	r5, r5
  4059d4:	1b75      	subs	r5, r6, r5
  4059d6:	b296      	uxth	r6, r2
  4059d8:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4059dc:	fa15 f383 	uxtah	r3, r5, r3
  4059e0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4059e4:	b29b      	uxth	r3, r3
  4059e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4059ea:	45e2      	cmp	sl, ip
  4059ec:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4059f0:	f84e 3b04 	str.w	r3, [lr], #4
  4059f4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4059f8:	d2e0      	bcs.n	4059bc <quorem+0x48>
  4059fa:	9b00      	ldr	r3, [sp, #0]
  4059fc:	f85b 3003 	ldr.w	r3, [fp, r3]
  405a00:	b993      	cbnz	r3, 405a28 <quorem+0xb4>
  405a02:	9c01      	ldr	r4, [sp, #4]
  405a04:	1f23      	subs	r3, r4, #4
  405a06:	459b      	cmp	fp, r3
  405a08:	d20c      	bcs.n	405a24 <quorem+0xb0>
  405a0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405a0e:	b94b      	cbnz	r3, 405a24 <quorem+0xb0>
  405a10:	f1a4 0308 	sub.w	r3, r4, #8
  405a14:	e002      	b.n	405a1c <quorem+0xa8>
  405a16:	681a      	ldr	r2, [r3, #0]
  405a18:	3b04      	subs	r3, #4
  405a1a:	b91a      	cbnz	r2, 405a24 <quorem+0xb0>
  405a1c:	459b      	cmp	fp, r3
  405a1e:	f108 38ff 	add.w	r8, r8, #4294967295
  405a22:	d3f8      	bcc.n	405a16 <quorem+0xa2>
  405a24:	f8c0 8010 	str.w	r8, [r0, #16]
  405a28:	4604      	mov	r4, r0
  405a2a:	f001 fd35 	bl	407498 <__mcmp>
  405a2e:	2800      	cmp	r0, #0
  405a30:	db2e      	blt.n	405a90 <quorem+0x11c>
  405a32:	f109 0901 	add.w	r9, r9, #1
  405a36:	465d      	mov	r5, fp
  405a38:	2300      	movs	r3, #0
  405a3a:	f857 1b04 	ldr.w	r1, [r7], #4
  405a3e:	6828      	ldr	r0, [r5, #0]
  405a40:	b28a      	uxth	r2, r1
  405a42:	1a9a      	subs	r2, r3, r2
  405a44:	0c0b      	lsrs	r3, r1, #16
  405a46:	fa12 f280 	uxtah	r2, r2, r0
  405a4a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  405a4e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405a52:	b292      	uxth	r2, r2
  405a54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  405a58:	45ba      	cmp	sl, r7
  405a5a:	f845 2b04 	str.w	r2, [r5], #4
  405a5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  405a62:	d2ea      	bcs.n	405a3a <quorem+0xc6>
  405a64:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  405a68:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405a6c:	b982      	cbnz	r2, 405a90 <quorem+0x11c>
  405a6e:	1f1a      	subs	r2, r3, #4
  405a70:	4593      	cmp	fp, r2
  405a72:	d20b      	bcs.n	405a8c <quorem+0x118>
  405a74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  405a78:	b942      	cbnz	r2, 405a8c <quorem+0x118>
  405a7a:	3b08      	subs	r3, #8
  405a7c:	e002      	b.n	405a84 <quorem+0x110>
  405a7e:	681a      	ldr	r2, [r3, #0]
  405a80:	3b04      	subs	r3, #4
  405a82:	b91a      	cbnz	r2, 405a8c <quorem+0x118>
  405a84:	459b      	cmp	fp, r3
  405a86:	f108 38ff 	add.w	r8, r8, #4294967295
  405a8a:	d3f8      	bcc.n	405a7e <quorem+0x10a>
  405a8c:	f8c4 8010 	str.w	r8, [r4, #16]
  405a90:	4648      	mov	r0, r9
  405a92:	b003      	add	sp, #12
  405a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a98:	2000      	movs	r0, #0
  405a9a:	4770      	bx	lr
  405a9c:	0000      	movs	r0, r0
	...

00405aa0 <_dtoa_r>:
  405aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  405aa6:	b09b      	sub	sp, #108	; 0x6c
  405aa8:	4604      	mov	r4, r0
  405aaa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  405aac:	4692      	mov	sl, r2
  405aae:	469b      	mov	fp, r3
  405ab0:	b141      	cbz	r1, 405ac4 <_dtoa_r+0x24>
  405ab2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  405ab4:	604a      	str	r2, [r1, #4]
  405ab6:	2301      	movs	r3, #1
  405ab8:	4093      	lsls	r3, r2
  405aba:	608b      	str	r3, [r1, #8]
  405abc:	f001 fb14 	bl	4070e8 <_Bfree>
  405ac0:	2300      	movs	r3, #0
  405ac2:	6423      	str	r3, [r4, #64]	; 0x40
  405ac4:	f1bb 0f00 	cmp.w	fp, #0
  405ac8:	465d      	mov	r5, fp
  405aca:	db35      	blt.n	405b38 <_dtoa_r+0x98>
  405acc:	2300      	movs	r3, #0
  405ace:	6033      	str	r3, [r6, #0]
  405ad0:	4b9d      	ldr	r3, [pc, #628]	; (405d48 <_dtoa_r+0x2a8>)
  405ad2:	43ab      	bics	r3, r5
  405ad4:	d015      	beq.n	405b02 <_dtoa_r+0x62>
  405ad6:	4650      	mov	r0, sl
  405ad8:	4659      	mov	r1, fp
  405ada:	2200      	movs	r2, #0
  405adc:	2300      	movs	r3, #0
  405ade:	f002 fb27 	bl	408130 <__aeabi_dcmpeq>
  405ae2:	4680      	mov	r8, r0
  405ae4:	2800      	cmp	r0, #0
  405ae6:	d02d      	beq.n	405b44 <_dtoa_r+0xa4>
  405ae8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405aea:	2301      	movs	r3, #1
  405aec:	6013      	str	r3, [r2, #0]
  405aee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405af0:	2b00      	cmp	r3, #0
  405af2:	f000 80bd 	beq.w	405c70 <_dtoa_r+0x1d0>
  405af6:	4895      	ldr	r0, [pc, #596]	; (405d4c <_dtoa_r+0x2ac>)
  405af8:	6018      	str	r0, [r3, #0]
  405afa:	3801      	subs	r0, #1
  405afc:	b01b      	add	sp, #108	; 0x6c
  405afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b02:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405b04:	f242 730f 	movw	r3, #9999	; 0x270f
  405b08:	6013      	str	r3, [r2, #0]
  405b0a:	f1ba 0f00 	cmp.w	sl, #0
  405b0e:	d10d      	bne.n	405b2c <_dtoa_r+0x8c>
  405b10:	f3c5 0513 	ubfx	r5, r5, #0, #20
  405b14:	b955      	cbnz	r5, 405b2c <_dtoa_r+0x8c>
  405b16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b18:	488d      	ldr	r0, [pc, #564]	; (405d50 <_dtoa_r+0x2b0>)
  405b1a:	2b00      	cmp	r3, #0
  405b1c:	d0ee      	beq.n	405afc <_dtoa_r+0x5c>
  405b1e:	f100 0308 	add.w	r3, r0, #8
  405b22:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  405b24:	6013      	str	r3, [r2, #0]
  405b26:	b01b      	add	sp, #108	; 0x6c
  405b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405b2e:	4889      	ldr	r0, [pc, #548]	; (405d54 <_dtoa_r+0x2b4>)
  405b30:	2b00      	cmp	r3, #0
  405b32:	d0e3      	beq.n	405afc <_dtoa_r+0x5c>
  405b34:	1cc3      	adds	r3, r0, #3
  405b36:	e7f4      	b.n	405b22 <_dtoa_r+0x82>
  405b38:	2301      	movs	r3, #1
  405b3a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  405b3e:	6033      	str	r3, [r6, #0]
  405b40:	46ab      	mov	fp, r5
  405b42:	e7c5      	b.n	405ad0 <_dtoa_r+0x30>
  405b44:	aa18      	add	r2, sp, #96	; 0x60
  405b46:	ab19      	add	r3, sp, #100	; 0x64
  405b48:	9201      	str	r2, [sp, #4]
  405b4a:	9300      	str	r3, [sp, #0]
  405b4c:	4652      	mov	r2, sl
  405b4e:	465b      	mov	r3, fp
  405b50:	4620      	mov	r0, r4
  405b52:	f001 fd41 	bl	4075d8 <__d2b>
  405b56:	0d2b      	lsrs	r3, r5, #20
  405b58:	4681      	mov	r9, r0
  405b5a:	d071      	beq.n	405c40 <_dtoa_r+0x1a0>
  405b5c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  405b60:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  405b64:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405b66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  405b6a:	4650      	mov	r0, sl
  405b6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  405b70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  405b74:	2200      	movs	r2, #0
  405b76:	4b78      	ldr	r3, [pc, #480]	; (405d58 <_dtoa_r+0x2b8>)
  405b78:	f7fe f834 	bl	403be4 <__aeabi_dsub>
  405b7c:	a36c      	add	r3, pc, #432	; (adr r3, 405d30 <_dtoa_r+0x290>)
  405b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b82:	f7fe f9e3 	bl	403f4c <__aeabi_dmul>
  405b86:	a36c      	add	r3, pc, #432	; (adr r3, 405d38 <_dtoa_r+0x298>)
  405b88:	e9d3 2300 	ldrd	r2, r3, [r3]
  405b8c:	f7fe f82c 	bl	403be8 <__adddf3>
  405b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405b94:	4630      	mov	r0, r6
  405b96:	f7fe f973 	bl	403e80 <__aeabi_i2d>
  405b9a:	a369      	add	r3, pc, #420	; (adr r3, 405d40 <_dtoa_r+0x2a0>)
  405b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ba0:	f7fe f9d4 	bl	403f4c <__aeabi_dmul>
  405ba4:	4602      	mov	r2, r0
  405ba6:	460b      	mov	r3, r1
  405ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405bac:	f7fe f81c 	bl	403be8 <__adddf3>
  405bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  405bb4:	f7fe fbdc 	bl	404370 <__aeabi_d2iz>
  405bb8:	2200      	movs	r2, #0
  405bba:	9002      	str	r0, [sp, #8]
  405bbc:	2300      	movs	r3, #0
  405bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405bc2:	f002 fabf 	bl	408144 <__aeabi_dcmplt>
  405bc6:	2800      	cmp	r0, #0
  405bc8:	f040 8173 	bne.w	405eb2 <_dtoa_r+0x412>
  405bcc:	9d02      	ldr	r5, [sp, #8]
  405bce:	2d16      	cmp	r5, #22
  405bd0:	f200 815d 	bhi.w	405e8e <_dtoa_r+0x3ee>
  405bd4:	4b61      	ldr	r3, [pc, #388]	; (405d5c <_dtoa_r+0x2bc>)
  405bd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  405bda:	e9d3 0100 	ldrd	r0, r1, [r3]
  405bde:	4652      	mov	r2, sl
  405be0:	465b      	mov	r3, fp
  405be2:	f002 facd 	bl	408180 <__aeabi_dcmpgt>
  405be6:	2800      	cmp	r0, #0
  405be8:	f000 81c5 	beq.w	405f76 <_dtoa_r+0x4d6>
  405bec:	1e6b      	subs	r3, r5, #1
  405bee:	9302      	str	r3, [sp, #8]
  405bf0:	2300      	movs	r3, #0
  405bf2:	930e      	str	r3, [sp, #56]	; 0x38
  405bf4:	1bbf      	subs	r7, r7, r6
  405bf6:	1e7b      	subs	r3, r7, #1
  405bf8:	9306      	str	r3, [sp, #24]
  405bfa:	f100 8154 	bmi.w	405ea6 <_dtoa_r+0x406>
  405bfe:	2300      	movs	r3, #0
  405c00:	9308      	str	r3, [sp, #32]
  405c02:	9b02      	ldr	r3, [sp, #8]
  405c04:	2b00      	cmp	r3, #0
  405c06:	f2c0 8145 	blt.w	405e94 <_dtoa_r+0x3f4>
  405c0a:	9a06      	ldr	r2, [sp, #24]
  405c0c:	930d      	str	r3, [sp, #52]	; 0x34
  405c0e:	4611      	mov	r1, r2
  405c10:	4419      	add	r1, r3
  405c12:	2300      	movs	r3, #0
  405c14:	9106      	str	r1, [sp, #24]
  405c16:	930c      	str	r3, [sp, #48]	; 0x30
  405c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c1a:	2b09      	cmp	r3, #9
  405c1c:	d82a      	bhi.n	405c74 <_dtoa_r+0x1d4>
  405c1e:	2b05      	cmp	r3, #5
  405c20:	f340 865b 	ble.w	4068da <_dtoa_r+0xe3a>
  405c24:	3b04      	subs	r3, #4
  405c26:	9324      	str	r3, [sp, #144]	; 0x90
  405c28:	2500      	movs	r5, #0
  405c2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c2c:	3b02      	subs	r3, #2
  405c2e:	2b03      	cmp	r3, #3
  405c30:	f200 8642 	bhi.w	4068b8 <_dtoa_r+0xe18>
  405c34:	e8df f013 	tbh	[pc, r3, lsl #1]
  405c38:	02c903d4 	.word	0x02c903d4
  405c3c:	046103df 	.word	0x046103df
  405c40:	9f18      	ldr	r7, [sp, #96]	; 0x60
  405c42:	9e19      	ldr	r6, [sp, #100]	; 0x64
  405c44:	443e      	add	r6, r7
  405c46:	f206 4332 	addw	r3, r6, #1074	; 0x432
  405c4a:	2b20      	cmp	r3, #32
  405c4c:	f340 818e 	ble.w	405f6c <_dtoa_r+0x4cc>
  405c50:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405c54:	f206 4012 	addw	r0, r6, #1042	; 0x412
  405c58:	409d      	lsls	r5, r3
  405c5a:	fa2a f000 	lsr.w	r0, sl, r0
  405c5e:	4328      	orrs	r0, r5
  405c60:	f7fe f8fe 	bl	403e60 <__aeabi_ui2d>
  405c64:	2301      	movs	r3, #1
  405c66:	3e01      	subs	r6, #1
  405c68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  405c6c:	9314      	str	r3, [sp, #80]	; 0x50
  405c6e:	e781      	b.n	405b74 <_dtoa_r+0xd4>
  405c70:	483b      	ldr	r0, [pc, #236]	; (405d60 <_dtoa_r+0x2c0>)
  405c72:	e743      	b.n	405afc <_dtoa_r+0x5c>
  405c74:	2100      	movs	r1, #0
  405c76:	6461      	str	r1, [r4, #68]	; 0x44
  405c78:	4620      	mov	r0, r4
  405c7a:	9125      	str	r1, [sp, #148]	; 0x94
  405c7c:	f001 fa0e 	bl	40709c <_Balloc>
  405c80:	f04f 33ff 	mov.w	r3, #4294967295
  405c84:	930a      	str	r3, [sp, #40]	; 0x28
  405c86:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405c88:	930f      	str	r3, [sp, #60]	; 0x3c
  405c8a:	2301      	movs	r3, #1
  405c8c:	9004      	str	r0, [sp, #16]
  405c8e:	6420      	str	r0, [r4, #64]	; 0x40
  405c90:	9224      	str	r2, [sp, #144]	; 0x90
  405c92:	930b      	str	r3, [sp, #44]	; 0x2c
  405c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405c96:	2b00      	cmp	r3, #0
  405c98:	f2c0 80d9 	blt.w	405e4e <_dtoa_r+0x3ae>
  405c9c:	9a02      	ldr	r2, [sp, #8]
  405c9e:	2a0e      	cmp	r2, #14
  405ca0:	f300 80d5 	bgt.w	405e4e <_dtoa_r+0x3ae>
  405ca4:	4b2d      	ldr	r3, [pc, #180]	; (405d5c <_dtoa_r+0x2bc>)
  405ca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405caa:	e9d3 2300 	ldrd	r2, r3, [r3]
  405cae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  405cb2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405cb4:	2b00      	cmp	r3, #0
  405cb6:	f2c0 83ba 	blt.w	40642e <_dtoa_r+0x98e>
  405cba:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  405cbe:	4650      	mov	r0, sl
  405cc0:	462a      	mov	r2, r5
  405cc2:	4633      	mov	r3, r6
  405cc4:	4659      	mov	r1, fp
  405cc6:	f7fe fa6b 	bl	4041a0 <__aeabi_ddiv>
  405cca:	f7fe fb51 	bl	404370 <__aeabi_d2iz>
  405cce:	4680      	mov	r8, r0
  405cd0:	f7fe f8d6 	bl	403e80 <__aeabi_i2d>
  405cd4:	462a      	mov	r2, r5
  405cd6:	4633      	mov	r3, r6
  405cd8:	f7fe f938 	bl	403f4c <__aeabi_dmul>
  405cdc:	460b      	mov	r3, r1
  405cde:	4602      	mov	r2, r0
  405ce0:	4659      	mov	r1, fp
  405ce2:	4650      	mov	r0, sl
  405ce4:	f7fd ff7e 	bl	403be4 <__aeabi_dsub>
  405ce8:	9d04      	ldr	r5, [sp, #16]
  405cea:	f108 0330 	add.w	r3, r8, #48	; 0x30
  405cee:	702b      	strb	r3, [r5, #0]
  405cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405cf2:	2b01      	cmp	r3, #1
  405cf4:	4606      	mov	r6, r0
  405cf6:	460f      	mov	r7, r1
  405cf8:	f105 0501 	add.w	r5, r5, #1
  405cfc:	d068      	beq.n	405dd0 <_dtoa_r+0x330>
  405cfe:	2200      	movs	r2, #0
  405d00:	4b18      	ldr	r3, [pc, #96]	; (405d64 <_dtoa_r+0x2c4>)
  405d02:	f7fe f923 	bl	403f4c <__aeabi_dmul>
  405d06:	2200      	movs	r2, #0
  405d08:	2300      	movs	r3, #0
  405d0a:	4606      	mov	r6, r0
  405d0c:	460f      	mov	r7, r1
  405d0e:	f002 fa0f 	bl	408130 <__aeabi_dcmpeq>
  405d12:	2800      	cmp	r0, #0
  405d14:	f040 8088 	bne.w	405e28 <_dtoa_r+0x388>
  405d18:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  405d1c:	f04f 0a00 	mov.w	sl, #0
  405d20:	f8df b040 	ldr.w	fp, [pc, #64]	; 405d64 <_dtoa_r+0x2c4>
  405d24:	940c      	str	r4, [sp, #48]	; 0x30
  405d26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  405d2a:	e028      	b.n	405d7e <_dtoa_r+0x2de>
  405d2c:	f3af 8000 	nop.w
  405d30:	636f4361 	.word	0x636f4361
  405d34:	3fd287a7 	.word	0x3fd287a7
  405d38:	8b60c8b3 	.word	0x8b60c8b3
  405d3c:	3fc68a28 	.word	0x3fc68a28
  405d40:	509f79fb 	.word	0x509f79fb
  405d44:	3fd34413 	.word	0x3fd34413
  405d48:	7ff00000 	.word	0x7ff00000
  405d4c:	00408cf1 	.word	0x00408cf1
  405d50:	00408d14 	.word	0x00408d14
  405d54:	00408d20 	.word	0x00408d20
  405d58:	3ff80000 	.word	0x3ff80000
  405d5c:	00408d50 	.word	0x00408d50
  405d60:	00408cf0 	.word	0x00408cf0
  405d64:	40240000 	.word	0x40240000
  405d68:	f7fe f8f0 	bl	403f4c <__aeabi_dmul>
  405d6c:	2200      	movs	r2, #0
  405d6e:	2300      	movs	r3, #0
  405d70:	4606      	mov	r6, r0
  405d72:	460f      	mov	r7, r1
  405d74:	f002 f9dc 	bl	408130 <__aeabi_dcmpeq>
  405d78:	2800      	cmp	r0, #0
  405d7a:	f040 83c1 	bne.w	406500 <_dtoa_r+0xa60>
  405d7e:	4642      	mov	r2, r8
  405d80:	464b      	mov	r3, r9
  405d82:	4630      	mov	r0, r6
  405d84:	4639      	mov	r1, r7
  405d86:	f7fe fa0b 	bl	4041a0 <__aeabi_ddiv>
  405d8a:	f7fe faf1 	bl	404370 <__aeabi_d2iz>
  405d8e:	4604      	mov	r4, r0
  405d90:	f7fe f876 	bl	403e80 <__aeabi_i2d>
  405d94:	4642      	mov	r2, r8
  405d96:	464b      	mov	r3, r9
  405d98:	f7fe f8d8 	bl	403f4c <__aeabi_dmul>
  405d9c:	4602      	mov	r2, r0
  405d9e:	460b      	mov	r3, r1
  405da0:	4630      	mov	r0, r6
  405da2:	4639      	mov	r1, r7
  405da4:	f7fd ff1e 	bl	403be4 <__aeabi_dsub>
  405da8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405dac:	9e04      	ldr	r6, [sp, #16]
  405dae:	f805 eb01 	strb.w	lr, [r5], #1
  405db2:	eba5 0e06 	sub.w	lr, r5, r6
  405db6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  405db8:	45b6      	cmp	lr, r6
  405dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405dbe:	4652      	mov	r2, sl
  405dc0:	465b      	mov	r3, fp
  405dc2:	d1d1      	bne.n	405d68 <_dtoa_r+0x2c8>
  405dc4:	46a0      	mov	r8, r4
  405dc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405dca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405dcc:	4606      	mov	r6, r0
  405dce:	460f      	mov	r7, r1
  405dd0:	4632      	mov	r2, r6
  405dd2:	463b      	mov	r3, r7
  405dd4:	4630      	mov	r0, r6
  405dd6:	4639      	mov	r1, r7
  405dd8:	f7fd ff06 	bl	403be8 <__adddf3>
  405ddc:	4606      	mov	r6, r0
  405dde:	460f      	mov	r7, r1
  405de0:	4602      	mov	r2, r0
  405de2:	460b      	mov	r3, r1
  405de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405de8:	f002 f9ac 	bl	408144 <__aeabi_dcmplt>
  405dec:	b948      	cbnz	r0, 405e02 <_dtoa_r+0x362>
  405dee:	4632      	mov	r2, r6
  405df0:	463b      	mov	r3, r7
  405df2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405df6:	f002 f99b 	bl	408130 <__aeabi_dcmpeq>
  405dfa:	b1a8      	cbz	r0, 405e28 <_dtoa_r+0x388>
  405dfc:	f018 0f01 	tst.w	r8, #1
  405e00:	d012      	beq.n	405e28 <_dtoa_r+0x388>
  405e02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405e06:	9a04      	ldr	r2, [sp, #16]
  405e08:	1e6b      	subs	r3, r5, #1
  405e0a:	e004      	b.n	405e16 <_dtoa_r+0x376>
  405e0c:	429a      	cmp	r2, r3
  405e0e:	f000 8401 	beq.w	406614 <_dtoa_r+0xb74>
  405e12:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  405e16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  405e1a:	f103 0501 	add.w	r5, r3, #1
  405e1e:	d0f5      	beq.n	405e0c <_dtoa_r+0x36c>
  405e20:	f108 0801 	add.w	r8, r8, #1
  405e24:	f883 8000 	strb.w	r8, [r3]
  405e28:	4649      	mov	r1, r9
  405e2a:	4620      	mov	r0, r4
  405e2c:	f001 f95c 	bl	4070e8 <_Bfree>
  405e30:	2200      	movs	r2, #0
  405e32:	9b02      	ldr	r3, [sp, #8]
  405e34:	702a      	strb	r2, [r5, #0]
  405e36:	9a26      	ldr	r2, [sp, #152]	; 0x98
  405e38:	3301      	adds	r3, #1
  405e3a:	6013      	str	r3, [r2, #0]
  405e3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  405e3e:	2b00      	cmp	r3, #0
  405e40:	f000 839e 	beq.w	406580 <_dtoa_r+0xae0>
  405e44:	9804      	ldr	r0, [sp, #16]
  405e46:	601d      	str	r5, [r3, #0]
  405e48:	b01b      	add	sp, #108	; 0x6c
  405e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405e50:	2a00      	cmp	r2, #0
  405e52:	d03e      	beq.n	405ed2 <_dtoa_r+0x432>
  405e54:	9a24      	ldr	r2, [sp, #144]	; 0x90
  405e56:	2a01      	cmp	r2, #1
  405e58:	f340 8311 	ble.w	40647e <_dtoa_r+0x9de>
  405e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405e60:	1e5f      	subs	r7, r3, #1
  405e62:	42ba      	cmp	r2, r7
  405e64:	f2c0 838f 	blt.w	406586 <_dtoa_r+0xae6>
  405e68:	1bd7      	subs	r7, r2, r7
  405e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e6c:	2b00      	cmp	r3, #0
  405e6e:	f2c0 848b 	blt.w	406788 <_dtoa_r+0xce8>
  405e72:	9d08      	ldr	r5, [sp, #32]
  405e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405e76:	9a08      	ldr	r2, [sp, #32]
  405e78:	441a      	add	r2, r3
  405e7a:	9208      	str	r2, [sp, #32]
  405e7c:	9a06      	ldr	r2, [sp, #24]
  405e7e:	2101      	movs	r1, #1
  405e80:	441a      	add	r2, r3
  405e82:	4620      	mov	r0, r4
  405e84:	9206      	str	r2, [sp, #24]
  405e86:	f001 f9c9 	bl	40721c <__i2b>
  405e8a:	4606      	mov	r6, r0
  405e8c:	e024      	b.n	405ed8 <_dtoa_r+0x438>
  405e8e:	2301      	movs	r3, #1
  405e90:	930e      	str	r3, [sp, #56]	; 0x38
  405e92:	e6af      	b.n	405bf4 <_dtoa_r+0x154>
  405e94:	9a08      	ldr	r2, [sp, #32]
  405e96:	9b02      	ldr	r3, [sp, #8]
  405e98:	1ad2      	subs	r2, r2, r3
  405e9a:	425b      	negs	r3, r3
  405e9c:	930c      	str	r3, [sp, #48]	; 0x30
  405e9e:	2300      	movs	r3, #0
  405ea0:	9208      	str	r2, [sp, #32]
  405ea2:	930d      	str	r3, [sp, #52]	; 0x34
  405ea4:	e6b8      	b.n	405c18 <_dtoa_r+0x178>
  405ea6:	f1c7 0301 	rsb	r3, r7, #1
  405eaa:	9308      	str	r3, [sp, #32]
  405eac:	2300      	movs	r3, #0
  405eae:	9306      	str	r3, [sp, #24]
  405eb0:	e6a7      	b.n	405c02 <_dtoa_r+0x162>
  405eb2:	9d02      	ldr	r5, [sp, #8]
  405eb4:	4628      	mov	r0, r5
  405eb6:	f7fd ffe3 	bl	403e80 <__aeabi_i2d>
  405eba:	4602      	mov	r2, r0
  405ebc:	460b      	mov	r3, r1
  405ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405ec2:	f002 f935 	bl	408130 <__aeabi_dcmpeq>
  405ec6:	2800      	cmp	r0, #0
  405ec8:	f47f ae80 	bne.w	405bcc <_dtoa_r+0x12c>
  405ecc:	1e6b      	subs	r3, r5, #1
  405ece:	9302      	str	r3, [sp, #8]
  405ed0:	e67c      	b.n	405bcc <_dtoa_r+0x12c>
  405ed2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405ed4:	9d08      	ldr	r5, [sp, #32]
  405ed6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405ed8:	2d00      	cmp	r5, #0
  405eda:	dd0c      	ble.n	405ef6 <_dtoa_r+0x456>
  405edc:	9906      	ldr	r1, [sp, #24]
  405ede:	2900      	cmp	r1, #0
  405ee0:	460b      	mov	r3, r1
  405ee2:	dd08      	ble.n	405ef6 <_dtoa_r+0x456>
  405ee4:	42a9      	cmp	r1, r5
  405ee6:	9a08      	ldr	r2, [sp, #32]
  405ee8:	bfa8      	it	ge
  405eea:	462b      	movge	r3, r5
  405eec:	1ad2      	subs	r2, r2, r3
  405eee:	1aed      	subs	r5, r5, r3
  405ef0:	1acb      	subs	r3, r1, r3
  405ef2:	9208      	str	r2, [sp, #32]
  405ef4:	9306      	str	r3, [sp, #24]
  405ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ef8:	b1d3      	cbz	r3, 405f30 <_dtoa_r+0x490>
  405efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405efc:	2b00      	cmp	r3, #0
  405efe:	f000 82b7 	beq.w	406470 <_dtoa_r+0x9d0>
  405f02:	2f00      	cmp	r7, #0
  405f04:	dd10      	ble.n	405f28 <_dtoa_r+0x488>
  405f06:	4631      	mov	r1, r6
  405f08:	463a      	mov	r2, r7
  405f0a:	4620      	mov	r0, r4
  405f0c:	f001 fa22 	bl	407354 <__pow5mult>
  405f10:	464a      	mov	r2, r9
  405f12:	4601      	mov	r1, r0
  405f14:	4606      	mov	r6, r0
  405f16:	4620      	mov	r0, r4
  405f18:	f001 f98a 	bl	407230 <__multiply>
  405f1c:	4649      	mov	r1, r9
  405f1e:	4680      	mov	r8, r0
  405f20:	4620      	mov	r0, r4
  405f22:	f001 f8e1 	bl	4070e8 <_Bfree>
  405f26:	46c1      	mov	r9, r8
  405f28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405f2a:	1bda      	subs	r2, r3, r7
  405f2c:	f040 82a1 	bne.w	406472 <_dtoa_r+0x9d2>
  405f30:	2101      	movs	r1, #1
  405f32:	4620      	mov	r0, r4
  405f34:	f001 f972 	bl	40721c <__i2b>
  405f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f3a:	2b00      	cmp	r3, #0
  405f3c:	4680      	mov	r8, r0
  405f3e:	dd1c      	ble.n	405f7a <_dtoa_r+0x4da>
  405f40:	4601      	mov	r1, r0
  405f42:	461a      	mov	r2, r3
  405f44:	4620      	mov	r0, r4
  405f46:	f001 fa05 	bl	407354 <__pow5mult>
  405f4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f4c:	2b01      	cmp	r3, #1
  405f4e:	4680      	mov	r8, r0
  405f50:	f340 8254 	ble.w	4063fc <_dtoa_r+0x95c>
  405f54:	2300      	movs	r3, #0
  405f56:	930c      	str	r3, [sp, #48]	; 0x30
  405f58:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405f5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405f60:	6918      	ldr	r0, [r3, #16]
  405f62:	f001 f90b 	bl	40717c <__hi0bits>
  405f66:	f1c0 0020 	rsb	r0, r0, #32
  405f6a:	e010      	b.n	405f8e <_dtoa_r+0x4ee>
  405f6c:	f1c3 0520 	rsb	r5, r3, #32
  405f70:	fa0a f005 	lsl.w	r0, sl, r5
  405f74:	e674      	b.n	405c60 <_dtoa_r+0x1c0>
  405f76:	900e      	str	r0, [sp, #56]	; 0x38
  405f78:	e63c      	b.n	405bf4 <_dtoa_r+0x154>
  405f7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f7c:	2b01      	cmp	r3, #1
  405f7e:	f340 8287 	ble.w	406490 <_dtoa_r+0x9f0>
  405f82:	2300      	movs	r3, #0
  405f84:	930c      	str	r3, [sp, #48]	; 0x30
  405f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405f88:	2001      	movs	r0, #1
  405f8a:	2b00      	cmp	r3, #0
  405f8c:	d1e4      	bne.n	405f58 <_dtoa_r+0x4b8>
  405f8e:	9a06      	ldr	r2, [sp, #24]
  405f90:	4410      	add	r0, r2
  405f92:	f010 001f 	ands.w	r0, r0, #31
  405f96:	f000 80a1 	beq.w	4060dc <_dtoa_r+0x63c>
  405f9a:	f1c0 0320 	rsb	r3, r0, #32
  405f9e:	2b04      	cmp	r3, #4
  405fa0:	f340 849e 	ble.w	4068e0 <_dtoa_r+0xe40>
  405fa4:	9b08      	ldr	r3, [sp, #32]
  405fa6:	f1c0 001c 	rsb	r0, r0, #28
  405faa:	4403      	add	r3, r0
  405fac:	9308      	str	r3, [sp, #32]
  405fae:	4613      	mov	r3, r2
  405fb0:	4403      	add	r3, r0
  405fb2:	4405      	add	r5, r0
  405fb4:	9306      	str	r3, [sp, #24]
  405fb6:	9b08      	ldr	r3, [sp, #32]
  405fb8:	2b00      	cmp	r3, #0
  405fba:	dd05      	ble.n	405fc8 <_dtoa_r+0x528>
  405fbc:	4649      	mov	r1, r9
  405fbe:	461a      	mov	r2, r3
  405fc0:	4620      	mov	r0, r4
  405fc2:	f001 fa17 	bl	4073f4 <__lshift>
  405fc6:	4681      	mov	r9, r0
  405fc8:	9b06      	ldr	r3, [sp, #24]
  405fca:	2b00      	cmp	r3, #0
  405fcc:	dd05      	ble.n	405fda <_dtoa_r+0x53a>
  405fce:	4641      	mov	r1, r8
  405fd0:	461a      	mov	r2, r3
  405fd2:	4620      	mov	r0, r4
  405fd4:	f001 fa0e 	bl	4073f4 <__lshift>
  405fd8:	4680      	mov	r8, r0
  405fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405fdc:	2b00      	cmp	r3, #0
  405fde:	f040 8086 	bne.w	4060ee <_dtoa_r+0x64e>
  405fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405fe4:	2b00      	cmp	r3, #0
  405fe6:	f340 8266 	ble.w	4064b6 <_dtoa_r+0xa16>
  405fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405fec:	2b00      	cmp	r3, #0
  405fee:	f000 8098 	beq.w	406122 <_dtoa_r+0x682>
  405ff2:	2d00      	cmp	r5, #0
  405ff4:	dd05      	ble.n	406002 <_dtoa_r+0x562>
  405ff6:	4631      	mov	r1, r6
  405ff8:	462a      	mov	r2, r5
  405ffa:	4620      	mov	r0, r4
  405ffc:	f001 f9fa 	bl	4073f4 <__lshift>
  406000:	4606      	mov	r6, r0
  406002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406004:	2b00      	cmp	r3, #0
  406006:	f040 8337 	bne.w	406678 <_dtoa_r+0xbd8>
  40600a:	9606      	str	r6, [sp, #24]
  40600c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40600e:	9a04      	ldr	r2, [sp, #16]
  406010:	f8dd b018 	ldr.w	fp, [sp, #24]
  406014:	3b01      	subs	r3, #1
  406016:	18d3      	adds	r3, r2, r3
  406018:	930b      	str	r3, [sp, #44]	; 0x2c
  40601a:	f00a 0301 	and.w	r3, sl, #1
  40601e:	930c      	str	r3, [sp, #48]	; 0x30
  406020:	4617      	mov	r7, r2
  406022:	46c2      	mov	sl, r8
  406024:	4651      	mov	r1, sl
  406026:	4648      	mov	r0, r9
  406028:	f7ff fca4 	bl	405974 <quorem>
  40602c:	4631      	mov	r1, r6
  40602e:	4605      	mov	r5, r0
  406030:	4648      	mov	r0, r9
  406032:	f001 fa31 	bl	407498 <__mcmp>
  406036:	465a      	mov	r2, fp
  406038:	900a      	str	r0, [sp, #40]	; 0x28
  40603a:	4651      	mov	r1, sl
  40603c:	4620      	mov	r0, r4
  40603e:	f001 fa47 	bl	4074d0 <__mdiff>
  406042:	68c2      	ldr	r2, [r0, #12]
  406044:	4680      	mov	r8, r0
  406046:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40604a:	2a00      	cmp	r2, #0
  40604c:	f040 822b 	bne.w	4064a6 <_dtoa_r+0xa06>
  406050:	4601      	mov	r1, r0
  406052:	4648      	mov	r0, r9
  406054:	9308      	str	r3, [sp, #32]
  406056:	f001 fa1f 	bl	407498 <__mcmp>
  40605a:	4641      	mov	r1, r8
  40605c:	9006      	str	r0, [sp, #24]
  40605e:	4620      	mov	r0, r4
  406060:	f001 f842 	bl	4070e8 <_Bfree>
  406064:	9a06      	ldr	r2, [sp, #24]
  406066:	9b08      	ldr	r3, [sp, #32]
  406068:	b932      	cbnz	r2, 406078 <_dtoa_r+0x5d8>
  40606a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40606c:	b921      	cbnz	r1, 406078 <_dtoa_r+0x5d8>
  40606e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406070:	2a00      	cmp	r2, #0
  406072:	f000 83ef 	beq.w	406854 <_dtoa_r+0xdb4>
  406076:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406078:	990a      	ldr	r1, [sp, #40]	; 0x28
  40607a:	2900      	cmp	r1, #0
  40607c:	f2c0 829f 	blt.w	4065be <_dtoa_r+0xb1e>
  406080:	d105      	bne.n	40608e <_dtoa_r+0x5ee>
  406082:	9924      	ldr	r1, [sp, #144]	; 0x90
  406084:	b919      	cbnz	r1, 40608e <_dtoa_r+0x5ee>
  406086:	990c      	ldr	r1, [sp, #48]	; 0x30
  406088:	2900      	cmp	r1, #0
  40608a:	f000 8298 	beq.w	4065be <_dtoa_r+0xb1e>
  40608e:	2a00      	cmp	r2, #0
  406090:	f300 8306 	bgt.w	4066a0 <_dtoa_r+0xc00>
  406094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406096:	703b      	strb	r3, [r7, #0]
  406098:	f107 0801 	add.w	r8, r7, #1
  40609c:	4297      	cmp	r7, r2
  40609e:	4645      	mov	r5, r8
  4060a0:	f000 830c 	beq.w	4066bc <_dtoa_r+0xc1c>
  4060a4:	4649      	mov	r1, r9
  4060a6:	2300      	movs	r3, #0
  4060a8:	220a      	movs	r2, #10
  4060aa:	4620      	mov	r0, r4
  4060ac:	f001 f826 	bl	4070fc <__multadd>
  4060b0:	455e      	cmp	r6, fp
  4060b2:	4681      	mov	r9, r0
  4060b4:	4631      	mov	r1, r6
  4060b6:	f04f 0300 	mov.w	r3, #0
  4060ba:	f04f 020a 	mov.w	r2, #10
  4060be:	4620      	mov	r0, r4
  4060c0:	f000 81eb 	beq.w	40649a <_dtoa_r+0x9fa>
  4060c4:	f001 f81a 	bl	4070fc <__multadd>
  4060c8:	4659      	mov	r1, fp
  4060ca:	4606      	mov	r6, r0
  4060cc:	2300      	movs	r3, #0
  4060ce:	220a      	movs	r2, #10
  4060d0:	4620      	mov	r0, r4
  4060d2:	f001 f813 	bl	4070fc <__multadd>
  4060d6:	4647      	mov	r7, r8
  4060d8:	4683      	mov	fp, r0
  4060da:	e7a3      	b.n	406024 <_dtoa_r+0x584>
  4060dc:	201c      	movs	r0, #28
  4060de:	9b08      	ldr	r3, [sp, #32]
  4060e0:	4403      	add	r3, r0
  4060e2:	9308      	str	r3, [sp, #32]
  4060e4:	9b06      	ldr	r3, [sp, #24]
  4060e6:	4403      	add	r3, r0
  4060e8:	4405      	add	r5, r0
  4060ea:	9306      	str	r3, [sp, #24]
  4060ec:	e763      	b.n	405fb6 <_dtoa_r+0x516>
  4060ee:	4641      	mov	r1, r8
  4060f0:	4648      	mov	r0, r9
  4060f2:	f001 f9d1 	bl	407498 <__mcmp>
  4060f6:	2800      	cmp	r0, #0
  4060f8:	f6bf af73 	bge.w	405fe2 <_dtoa_r+0x542>
  4060fc:	9f02      	ldr	r7, [sp, #8]
  4060fe:	4649      	mov	r1, r9
  406100:	2300      	movs	r3, #0
  406102:	220a      	movs	r2, #10
  406104:	4620      	mov	r0, r4
  406106:	3f01      	subs	r7, #1
  406108:	9702      	str	r7, [sp, #8]
  40610a:	f000 fff7 	bl	4070fc <__multadd>
  40610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406110:	4681      	mov	r9, r0
  406112:	2b00      	cmp	r3, #0
  406114:	f040 83b6 	bne.w	406884 <_dtoa_r+0xde4>
  406118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40611a:	2b00      	cmp	r3, #0
  40611c:	f340 83bf 	ble.w	40689e <_dtoa_r+0xdfe>
  406120:	930a      	str	r3, [sp, #40]	; 0x28
  406122:	f8dd b010 	ldr.w	fp, [sp, #16]
  406126:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406128:	465d      	mov	r5, fp
  40612a:	e002      	b.n	406132 <_dtoa_r+0x692>
  40612c:	f000 ffe6 	bl	4070fc <__multadd>
  406130:	4681      	mov	r9, r0
  406132:	4641      	mov	r1, r8
  406134:	4648      	mov	r0, r9
  406136:	f7ff fc1d 	bl	405974 <quorem>
  40613a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40613e:	f805 ab01 	strb.w	sl, [r5], #1
  406142:	eba5 030b 	sub.w	r3, r5, fp
  406146:	42bb      	cmp	r3, r7
  406148:	f04f 020a 	mov.w	r2, #10
  40614c:	f04f 0300 	mov.w	r3, #0
  406150:	4649      	mov	r1, r9
  406152:	4620      	mov	r0, r4
  406154:	dbea      	blt.n	40612c <_dtoa_r+0x68c>
  406156:	9b04      	ldr	r3, [sp, #16]
  406158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40615a:	2a01      	cmp	r2, #1
  40615c:	bfac      	ite	ge
  40615e:	189b      	addge	r3, r3, r2
  406160:	3301      	addlt	r3, #1
  406162:	461d      	mov	r5, r3
  406164:	f04f 0b00 	mov.w	fp, #0
  406168:	4649      	mov	r1, r9
  40616a:	2201      	movs	r2, #1
  40616c:	4620      	mov	r0, r4
  40616e:	f001 f941 	bl	4073f4 <__lshift>
  406172:	4641      	mov	r1, r8
  406174:	4681      	mov	r9, r0
  406176:	f001 f98f 	bl	407498 <__mcmp>
  40617a:	2800      	cmp	r0, #0
  40617c:	f340 823d 	ble.w	4065fa <_dtoa_r+0xb5a>
  406180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406184:	9904      	ldr	r1, [sp, #16]
  406186:	1e6b      	subs	r3, r5, #1
  406188:	e004      	b.n	406194 <_dtoa_r+0x6f4>
  40618a:	428b      	cmp	r3, r1
  40618c:	f000 81ae 	beq.w	4064ec <_dtoa_r+0xa4c>
  406190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406194:	2a39      	cmp	r2, #57	; 0x39
  406196:	f103 0501 	add.w	r5, r3, #1
  40619a:	d0f6      	beq.n	40618a <_dtoa_r+0x6ea>
  40619c:	3201      	adds	r2, #1
  40619e:	701a      	strb	r2, [r3, #0]
  4061a0:	4641      	mov	r1, r8
  4061a2:	4620      	mov	r0, r4
  4061a4:	f000 ffa0 	bl	4070e8 <_Bfree>
  4061a8:	2e00      	cmp	r6, #0
  4061aa:	f43f ae3d 	beq.w	405e28 <_dtoa_r+0x388>
  4061ae:	f1bb 0f00 	cmp.w	fp, #0
  4061b2:	d005      	beq.n	4061c0 <_dtoa_r+0x720>
  4061b4:	45b3      	cmp	fp, r6
  4061b6:	d003      	beq.n	4061c0 <_dtoa_r+0x720>
  4061b8:	4659      	mov	r1, fp
  4061ba:	4620      	mov	r0, r4
  4061bc:	f000 ff94 	bl	4070e8 <_Bfree>
  4061c0:	4631      	mov	r1, r6
  4061c2:	4620      	mov	r0, r4
  4061c4:	f000 ff90 	bl	4070e8 <_Bfree>
  4061c8:	e62e      	b.n	405e28 <_dtoa_r+0x388>
  4061ca:	2300      	movs	r3, #0
  4061cc:	930b      	str	r3, [sp, #44]	; 0x2c
  4061ce:	9b02      	ldr	r3, [sp, #8]
  4061d0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4061d2:	4413      	add	r3, r2
  4061d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4061d6:	3301      	adds	r3, #1
  4061d8:	2b01      	cmp	r3, #1
  4061da:	461f      	mov	r7, r3
  4061dc:	461e      	mov	r6, r3
  4061de:	930a      	str	r3, [sp, #40]	; 0x28
  4061e0:	bfb8      	it	lt
  4061e2:	2701      	movlt	r7, #1
  4061e4:	2100      	movs	r1, #0
  4061e6:	2f17      	cmp	r7, #23
  4061e8:	6461      	str	r1, [r4, #68]	; 0x44
  4061ea:	d90a      	bls.n	406202 <_dtoa_r+0x762>
  4061ec:	2201      	movs	r2, #1
  4061ee:	2304      	movs	r3, #4
  4061f0:	005b      	lsls	r3, r3, #1
  4061f2:	f103 0014 	add.w	r0, r3, #20
  4061f6:	4287      	cmp	r7, r0
  4061f8:	4611      	mov	r1, r2
  4061fa:	f102 0201 	add.w	r2, r2, #1
  4061fe:	d2f7      	bcs.n	4061f0 <_dtoa_r+0x750>
  406200:	6461      	str	r1, [r4, #68]	; 0x44
  406202:	4620      	mov	r0, r4
  406204:	f000 ff4a 	bl	40709c <_Balloc>
  406208:	2e0e      	cmp	r6, #14
  40620a:	9004      	str	r0, [sp, #16]
  40620c:	6420      	str	r0, [r4, #64]	; 0x40
  40620e:	f63f ad41 	bhi.w	405c94 <_dtoa_r+0x1f4>
  406212:	2d00      	cmp	r5, #0
  406214:	f43f ad3e 	beq.w	405c94 <_dtoa_r+0x1f4>
  406218:	9902      	ldr	r1, [sp, #8]
  40621a:	2900      	cmp	r1, #0
  40621c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406220:	f340 8202 	ble.w	406628 <_dtoa_r+0xb88>
  406224:	4bb8      	ldr	r3, [pc, #736]	; (406508 <_dtoa_r+0xa68>)
  406226:	f001 020f 	and.w	r2, r1, #15
  40622a:	110d      	asrs	r5, r1, #4
  40622c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406230:	06e9      	lsls	r1, r5, #27
  406232:	e9d3 6700 	ldrd	r6, r7, [r3]
  406236:	f140 81ae 	bpl.w	406596 <_dtoa_r+0xaf6>
  40623a:	4bb4      	ldr	r3, [pc, #720]	; (40650c <_dtoa_r+0xa6c>)
  40623c:	4650      	mov	r0, sl
  40623e:	4659      	mov	r1, fp
  406240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406244:	f7fd ffac 	bl	4041a0 <__aeabi_ddiv>
  406248:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40624c:	f005 050f 	and.w	r5, r5, #15
  406250:	f04f 0a03 	mov.w	sl, #3
  406254:	b18d      	cbz	r5, 40627a <_dtoa_r+0x7da>
  406256:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40650c <_dtoa_r+0xa6c>
  40625a:	07ea      	lsls	r2, r5, #31
  40625c:	d509      	bpl.n	406272 <_dtoa_r+0x7d2>
  40625e:	4630      	mov	r0, r6
  406260:	4639      	mov	r1, r7
  406262:	e9d8 2300 	ldrd	r2, r3, [r8]
  406266:	f7fd fe71 	bl	403f4c <__aeabi_dmul>
  40626a:	f10a 0a01 	add.w	sl, sl, #1
  40626e:	4606      	mov	r6, r0
  406270:	460f      	mov	r7, r1
  406272:	106d      	asrs	r5, r5, #1
  406274:	f108 0808 	add.w	r8, r8, #8
  406278:	d1ef      	bne.n	40625a <_dtoa_r+0x7ba>
  40627a:	463b      	mov	r3, r7
  40627c:	4632      	mov	r2, r6
  40627e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406282:	f7fd ff8d 	bl	4041a0 <__aeabi_ddiv>
  406286:	4607      	mov	r7, r0
  406288:	4688      	mov	r8, r1
  40628a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40628c:	b143      	cbz	r3, 4062a0 <_dtoa_r+0x800>
  40628e:	2200      	movs	r2, #0
  406290:	4b9f      	ldr	r3, [pc, #636]	; (406510 <_dtoa_r+0xa70>)
  406292:	4638      	mov	r0, r7
  406294:	4641      	mov	r1, r8
  406296:	f001 ff55 	bl	408144 <__aeabi_dcmplt>
  40629a:	2800      	cmp	r0, #0
  40629c:	f040 8286 	bne.w	4067ac <_dtoa_r+0xd0c>
  4062a0:	4650      	mov	r0, sl
  4062a2:	f7fd fded 	bl	403e80 <__aeabi_i2d>
  4062a6:	463a      	mov	r2, r7
  4062a8:	4643      	mov	r3, r8
  4062aa:	f7fd fe4f 	bl	403f4c <__aeabi_dmul>
  4062ae:	4b99      	ldr	r3, [pc, #612]	; (406514 <_dtoa_r+0xa74>)
  4062b0:	2200      	movs	r2, #0
  4062b2:	f7fd fc99 	bl	403be8 <__adddf3>
  4062b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062b8:	4605      	mov	r5, r0
  4062ba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4062be:	2b00      	cmp	r3, #0
  4062c0:	f000 813e 	beq.w	406540 <_dtoa_r+0xaa0>
  4062c4:	9b02      	ldr	r3, [sp, #8]
  4062c6:	9315      	str	r3, [sp, #84]	; 0x54
  4062c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062ca:	9312      	str	r3, [sp, #72]	; 0x48
  4062cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4062ce:	2b00      	cmp	r3, #0
  4062d0:	f000 81fa 	beq.w	4066c8 <_dtoa_r+0xc28>
  4062d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4062d6:	4b8c      	ldr	r3, [pc, #560]	; (406508 <_dtoa_r+0xa68>)
  4062d8:	498f      	ldr	r1, [pc, #572]	; (406518 <_dtoa_r+0xa78>)
  4062da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4062de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4062e2:	2000      	movs	r0, #0
  4062e4:	f7fd ff5c 	bl	4041a0 <__aeabi_ddiv>
  4062e8:	462a      	mov	r2, r5
  4062ea:	4633      	mov	r3, r6
  4062ec:	f7fd fc7a 	bl	403be4 <__aeabi_dsub>
  4062f0:	4682      	mov	sl, r0
  4062f2:	468b      	mov	fp, r1
  4062f4:	4638      	mov	r0, r7
  4062f6:	4641      	mov	r1, r8
  4062f8:	f7fe f83a 	bl	404370 <__aeabi_d2iz>
  4062fc:	4605      	mov	r5, r0
  4062fe:	f7fd fdbf 	bl	403e80 <__aeabi_i2d>
  406302:	4602      	mov	r2, r0
  406304:	460b      	mov	r3, r1
  406306:	4638      	mov	r0, r7
  406308:	4641      	mov	r1, r8
  40630a:	f7fd fc6b 	bl	403be4 <__aeabi_dsub>
  40630e:	3530      	adds	r5, #48	; 0x30
  406310:	fa5f f885 	uxtb.w	r8, r5
  406314:	9d04      	ldr	r5, [sp, #16]
  406316:	4606      	mov	r6, r0
  406318:	460f      	mov	r7, r1
  40631a:	f885 8000 	strb.w	r8, [r5]
  40631e:	4602      	mov	r2, r0
  406320:	460b      	mov	r3, r1
  406322:	4650      	mov	r0, sl
  406324:	4659      	mov	r1, fp
  406326:	3501      	adds	r5, #1
  406328:	f001 ff2a 	bl	408180 <__aeabi_dcmpgt>
  40632c:	2800      	cmp	r0, #0
  40632e:	d154      	bne.n	4063da <_dtoa_r+0x93a>
  406330:	4632      	mov	r2, r6
  406332:	463b      	mov	r3, r7
  406334:	2000      	movs	r0, #0
  406336:	4976      	ldr	r1, [pc, #472]	; (406510 <_dtoa_r+0xa70>)
  406338:	f7fd fc54 	bl	403be4 <__aeabi_dsub>
  40633c:	4602      	mov	r2, r0
  40633e:	460b      	mov	r3, r1
  406340:	4650      	mov	r0, sl
  406342:	4659      	mov	r1, fp
  406344:	f001 ff1c 	bl	408180 <__aeabi_dcmpgt>
  406348:	2800      	cmp	r0, #0
  40634a:	f040 8270 	bne.w	40682e <_dtoa_r+0xd8e>
  40634e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406350:	2a01      	cmp	r2, #1
  406352:	f000 8111 	beq.w	406578 <_dtoa_r+0xad8>
  406356:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406358:	9a04      	ldr	r2, [sp, #16]
  40635a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40635e:	4413      	add	r3, r2
  406360:	4699      	mov	r9, r3
  406362:	e00d      	b.n	406380 <_dtoa_r+0x8e0>
  406364:	2000      	movs	r0, #0
  406366:	496a      	ldr	r1, [pc, #424]	; (406510 <_dtoa_r+0xa70>)
  406368:	f7fd fc3c 	bl	403be4 <__aeabi_dsub>
  40636c:	4652      	mov	r2, sl
  40636e:	465b      	mov	r3, fp
  406370:	f001 fee8 	bl	408144 <__aeabi_dcmplt>
  406374:	2800      	cmp	r0, #0
  406376:	f040 8258 	bne.w	40682a <_dtoa_r+0xd8a>
  40637a:	454d      	cmp	r5, r9
  40637c:	f000 80fa 	beq.w	406574 <_dtoa_r+0xad4>
  406380:	4650      	mov	r0, sl
  406382:	4659      	mov	r1, fp
  406384:	2200      	movs	r2, #0
  406386:	4b65      	ldr	r3, [pc, #404]	; (40651c <_dtoa_r+0xa7c>)
  406388:	f7fd fde0 	bl	403f4c <__aeabi_dmul>
  40638c:	2200      	movs	r2, #0
  40638e:	4b63      	ldr	r3, [pc, #396]	; (40651c <_dtoa_r+0xa7c>)
  406390:	4682      	mov	sl, r0
  406392:	468b      	mov	fp, r1
  406394:	4630      	mov	r0, r6
  406396:	4639      	mov	r1, r7
  406398:	f7fd fdd8 	bl	403f4c <__aeabi_dmul>
  40639c:	460f      	mov	r7, r1
  40639e:	4606      	mov	r6, r0
  4063a0:	f7fd ffe6 	bl	404370 <__aeabi_d2iz>
  4063a4:	4680      	mov	r8, r0
  4063a6:	f7fd fd6b 	bl	403e80 <__aeabi_i2d>
  4063aa:	4602      	mov	r2, r0
  4063ac:	460b      	mov	r3, r1
  4063ae:	4630      	mov	r0, r6
  4063b0:	4639      	mov	r1, r7
  4063b2:	f7fd fc17 	bl	403be4 <__aeabi_dsub>
  4063b6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4063ba:	fa5f f888 	uxtb.w	r8, r8
  4063be:	4652      	mov	r2, sl
  4063c0:	465b      	mov	r3, fp
  4063c2:	f805 8b01 	strb.w	r8, [r5], #1
  4063c6:	4606      	mov	r6, r0
  4063c8:	460f      	mov	r7, r1
  4063ca:	f001 febb 	bl	408144 <__aeabi_dcmplt>
  4063ce:	4632      	mov	r2, r6
  4063d0:	463b      	mov	r3, r7
  4063d2:	2800      	cmp	r0, #0
  4063d4:	d0c6      	beq.n	406364 <_dtoa_r+0x8c4>
  4063d6:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4063da:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4063dc:	9302      	str	r3, [sp, #8]
  4063de:	e523      	b.n	405e28 <_dtoa_r+0x388>
  4063e0:	2300      	movs	r3, #0
  4063e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4063e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4063e6:	2b00      	cmp	r3, #0
  4063e8:	f340 80dc 	ble.w	4065a4 <_dtoa_r+0xb04>
  4063ec:	461f      	mov	r7, r3
  4063ee:	461e      	mov	r6, r3
  4063f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4063f2:	930a      	str	r3, [sp, #40]	; 0x28
  4063f4:	e6f6      	b.n	4061e4 <_dtoa_r+0x744>
  4063f6:	2301      	movs	r3, #1
  4063f8:	930b      	str	r3, [sp, #44]	; 0x2c
  4063fa:	e7f3      	b.n	4063e4 <_dtoa_r+0x944>
  4063fc:	f1ba 0f00 	cmp.w	sl, #0
  406400:	f47f ada8 	bne.w	405f54 <_dtoa_r+0x4b4>
  406404:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406408:	2b00      	cmp	r3, #0
  40640a:	f47f adba 	bne.w	405f82 <_dtoa_r+0x4e2>
  40640e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406412:	0d3f      	lsrs	r7, r7, #20
  406414:	053f      	lsls	r7, r7, #20
  406416:	2f00      	cmp	r7, #0
  406418:	f000 820d 	beq.w	406836 <_dtoa_r+0xd96>
  40641c:	9b08      	ldr	r3, [sp, #32]
  40641e:	3301      	adds	r3, #1
  406420:	9308      	str	r3, [sp, #32]
  406422:	9b06      	ldr	r3, [sp, #24]
  406424:	3301      	adds	r3, #1
  406426:	9306      	str	r3, [sp, #24]
  406428:	2301      	movs	r3, #1
  40642a:	930c      	str	r3, [sp, #48]	; 0x30
  40642c:	e5ab      	b.n	405f86 <_dtoa_r+0x4e6>
  40642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406430:	2b00      	cmp	r3, #0
  406432:	f73f ac42 	bgt.w	405cba <_dtoa_r+0x21a>
  406436:	f040 8221 	bne.w	40687c <_dtoa_r+0xddc>
  40643a:	2200      	movs	r2, #0
  40643c:	4b38      	ldr	r3, [pc, #224]	; (406520 <_dtoa_r+0xa80>)
  40643e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406442:	f7fd fd83 	bl	403f4c <__aeabi_dmul>
  406446:	4652      	mov	r2, sl
  406448:	465b      	mov	r3, fp
  40644a:	f001 fe8f 	bl	40816c <__aeabi_dcmpge>
  40644e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406452:	4646      	mov	r6, r8
  406454:	2800      	cmp	r0, #0
  406456:	d041      	beq.n	4064dc <_dtoa_r+0xa3c>
  406458:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40645a:	9d04      	ldr	r5, [sp, #16]
  40645c:	43db      	mvns	r3, r3
  40645e:	9302      	str	r3, [sp, #8]
  406460:	4641      	mov	r1, r8
  406462:	4620      	mov	r0, r4
  406464:	f000 fe40 	bl	4070e8 <_Bfree>
  406468:	2e00      	cmp	r6, #0
  40646a:	f43f acdd 	beq.w	405e28 <_dtoa_r+0x388>
  40646e:	e6a7      	b.n	4061c0 <_dtoa_r+0x720>
  406470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406472:	4649      	mov	r1, r9
  406474:	4620      	mov	r0, r4
  406476:	f000 ff6d 	bl	407354 <__pow5mult>
  40647a:	4681      	mov	r9, r0
  40647c:	e558      	b.n	405f30 <_dtoa_r+0x490>
  40647e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406480:	2a00      	cmp	r2, #0
  406482:	f000 8187 	beq.w	406794 <_dtoa_r+0xcf4>
  406486:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40648a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40648c:	9d08      	ldr	r5, [sp, #32]
  40648e:	e4f2      	b.n	405e76 <_dtoa_r+0x3d6>
  406490:	f1ba 0f00 	cmp.w	sl, #0
  406494:	f47f ad75 	bne.w	405f82 <_dtoa_r+0x4e2>
  406498:	e7b4      	b.n	406404 <_dtoa_r+0x964>
  40649a:	f000 fe2f 	bl	4070fc <__multadd>
  40649e:	4647      	mov	r7, r8
  4064a0:	4606      	mov	r6, r0
  4064a2:	4683      	mov	fp, r0
  4064a4:	e5be      	b.n	406024 <_dtoa_r+0x584>
  4064a6:	4601      	mov	r1, r0
  4064a8:	4620      	mov	r0, r4
  4064aa:	9306      	str	r3, [sp, #24]
  4064ac:	f000 fe1c 	bl	4070e8 <_Bfree>
  4064b0:	2201      	movs	r2, #1
  4064b2:	9b06      	ldr	r3, [sp, #24]
  4064b4:	e5e0      	b.n	406078 <_dtoa_r+0x5d8>
  4064b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4064b8:	2b02      	cmp	r3, #2
  4064ba:	f77f ad96 	ble.w	405fea <_dtoa_r+0x54a>
  4064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4064c0:	2b00      	cmp	r3, #0
  4064c2:	d1c9      	bne.n	406458 <_dtoa_r+0x9b8>
  4064c4:	4641      	mov	r1, r8
  4064c6:	2205      	movs	r2, #5
  4064c8:	4620      	mov	r0, r4
  4064ca:	f000 fe17 	bl	4070fc <__multadd>
  4064ce:	4601      	mov	r1, r0
  4064d0:	4680      	mov	r8, r0
  4064d2:	4648      	mov	r0, r9
  4064d4:	f000 ffe0 	bl	407498 <__mcmp>
  4064d8:	2800      	cmp	r0, #0
  4064da:	ddbd      	ble.n	406458 <_dtoa_r+0x9b8>
  4064dc:	9a02      	ldr	r2, [sp, #8]
  4064de:	9904      	ldr	r1, [sp, #16]
  4064e0:	2331      	movs	r3, #49	; 0x31
  4064e2:	3201      	adds	r2, #1
  4064e4:	9202      	str	r2, [sp, #8]
  4064e6:	700b      	strb	r3, [r1, #0]
  4064e8:	1c4d      	adds	r5, r1, #1
  4064ea:	e7b9      	b.n	406460 <_dtoa_r+0x9c0>
  4064ec:	9a02      	ldr	r2, [sp, #8]
  4064ee:	3201      	adds	r2, #1
  4064f0:	9202      	str	r2, [sp, #8]
  4064f2:	9a04      	ldr	r2, [sp, #16]
  4064f4:	2331      	movs	r3, #49	; 0x31
  4064f6:	7013      	strb	r3, [r2, #0]
  4064f8:	e652      	b.n	4061a0 <_dtoa_r+0x700>
  4064fa:	2301      	movs	r3, #1
  4064fc:	930b      	str	r3, [sp, #44]	; 0x2c
  4064fe:	e666      	b.n	4061ce <_dtoa_r+0x72e>
  406500:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406504:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406506:	e48f      	b.n	405e28 <_dtoa_r+0x388>
  406508:	00408d50 	.word	0x00408d50
  40650c:	00408d28 	.word	0x00408d28
  406510:	3ff00000 	.word	0x3ff00000
  406514:	401c0000 	.word	0x401c0000
  406518:	3fe00000 	.word	0x3fe00000
  40651c:	40240000 	.word	0x40240000
  406520:	40140000 	.word	0x40140000
  406524:	4650      	mov	r0, sl
  406526:	f7fd fcab 	bl	403e80 <__aeabi_i2d>
  40652a:	463a      	mov	r2, r7
  40652c:	4643      	mov	r3, r8
  40652e:	f7fd fd0d 	bl	403f4c <__aeabi_dmul>
  406532:	2200      	movs	r2, #0
  406534:	4bc1      	ldr	r3, [pc, #772]	; (40683c <_dtoa_r+0xd9c>)
  406536:	f7fd fb57 	bl	403be8 <__adddf3>
  40653a:	4605      	mov	r5, r0
  40653c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406540:	4641      	mov	r1, r8
  406542:	2200      	movs	r2, #0
  406544:	4bbe      	ldr	r3, [pc, #760]	; (406840 <_dtoa_r+0xda0>)
  406546:	4638      	mov	r0, r7
  406548:	f7fd fb4c 	bl	403be4 <__aeabi_dsub>
  40654c:	462a      	mov	r2, r5
  40654e:	4633      	mov	r3, r6
  406550:	4682      	mov	sl, r0
  406552:	468b      	mov	fp, r1
  406554:	f001 fe14 	bl	408180 <__aeabi_dcmpgt>
  406558:	4680      	mov	r8, r0
  40655a:	2800      	cmp	r0, #0
  40655c:	f040 8110 	bne.w	406780 <_dtoa_r+0xce0>
  406560:	462a      	mov	r2, r5
  406562:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406566:	4650      	mov	r0, sl
  406568:	4659      	mov	r1, fp
  40656a:	f001 fdeb 	bl	408144 <__aeabi_dcmplt>
  40656e:	b118      	cbz	r0, 406578 <_dtoa_r+0xad8>
  406570:	4646      	mov	r6, r8
  406572:	e771      	b.n	406458 <_dtoa_r+0x9b8>
  406574:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406578:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40657c:	f7ff bb8a 	b.w	405c94 <_dtoa_r+0x1f4>
  406580:	9804      	ldr	r0, [sp, #16]
  406582:	f7ff babb 	b.w	405afc <_dtoa_r+0x5c>
  406586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40658a:	970c      	str	r7, [sp, #48]	; 0x30
  40658c:	1afb      	subs	r3, r7, r3
  40658e:	441a      	add	r2, r3
  406590:	920d      	str	r2, [sp, #52]	; 0x34
  406592:	2700      	movs	r7, #0
  406594:	e469      	b.n	405e6a <_dtoa_r+0x3ca>
  406596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40659a:	f04f 0a02 	mov.w	sl, #2
  40659e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4065a2:	e657      	b.n	406254 <_dtoa_r+0x7b4>
  4065a4:	2100      	movs	r1, #0
  4065a6:	2301      	movs	r3, #1
  4065a8:	6461      	str	r1, [r4, #68]	; 0x44
  4065aa:	4620      	mov	r0, r4
  4065ac:	9325      	str	r3, [sp, #148]	; 0x94
  4065ae:	f000 fd75 	bl	40709c <_Balloc>
  4065b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4065b4:	9004      	str	r0, [sp, #16]
  4065b6:	6420      	str	r0, [r4, #64]	; 0x40
  4065b8:	930a      	str	r3, [sp, #40]	; 0x28
  4065ba:	930f      	str	r3, [sp, #60]	; 0x3c
  4065bc:	e629      	b.n	406212 <_dtoa_r+0x772>
  4065be:	2a00      	cmp	r2, #0
  4065c0:	46d0      	mov	r8, sl
  4065c2:	f8cd b018 	str.w	fp, [sp, #24]
  4065c6:	469a      	mov	sl, r3
  4065c8:	dd11      	ble.n	4065ee <_dtoa_r+0xb4e>
  4065ca:	4649      	mov	r1, r9
  4065cc:	2201      	movs	r2, #1
  4065ce:	4620      	mov	r0, r4
  4065d0:	f000 ff10 	bl	4073f4 <__lshift>
  4065d4:	4641      	mov	r1, r8
  4065d6:	4681      	mov	r9, r0
  4065d8:	f000 ff5e 	bl	407498 <__mcmp>
  4065dc:	2800      	cmp	r0, #0
  4065de:	f340 8146 	ble.w	40686e <_dtoa_r+0xdce>
  4065e2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4065e6:	f000 8106 	beq.w	4067f6 <_dtoa_r+0xd56>
  4065ea:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4065ee:	46b3      	mov	fp, r6
  4065f0:	f887 a000 	strb.w	sl, [r7]
  4065f4:	1c7d      	adds	r5, r7, #1
  4065f6:	9e06      	ldr	r6, [sp, #24]
  4065f8:	e5d2      	b.n	4061a0 <_dtoa_r+0x700>
  4065fa:	d104      	bne.n	406606 <_dtoa_r+0xb66>
  4065fc:	f01a 0f01 	tst.w	sl, #1
  406600:	d001      	beq.n	406606 <_dtoa_r+0xb66>
  406602:	e5bd      	b.n	406180 <_dtoa_r+0x6e0>
  406604:	4615      	mov	r5, r2
  406606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40660a:	2b30      	cmp	r3, #48	; 0x30
  40660c:	f105 32ff 	add.w	r2, r5, #4294967295
  406610:	d0f8      	beq.n	406604 <_dtoa_r+0xb64>
  406612:	e5c5      	b.n	4061a0 <_dtoa_r+0x700>
  406614:	9904      	ldr	r1, [sp, #16]
  406616:	2230      	movs	r2, #48	; 0x30
  406618:	700a      	strb	r2, [r1, #0]
  40661a:	9a02      	ldr	r2, [sp, #8]
  40661c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406620:	3201      	adds	r2, #1
  406622:	9202      	str	r2, [sp, #8]
  406624:	f7ff bbfc 	b.w	405e20 <_dtoa_r+0x380>
  406628:	f000 80bb 	beq.w	4067a2 <_dtoa_r+0xd02>
  40662c:	9b02      	ldr	r3, [sp, #8]
  40662e:	425d      	negs	r5, r3
  406630:	4b84      	ldr	r3, [pc, #528]	; (406844 <_dtoa_r+0xda4>)
  406632:	f005 020f 	and.w	r2, r5, #15
  406636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40663a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40663e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406642:	f7fd fc83 	bl	403f4c <__aeabi_dmul>
  406646:	112d      	asrs	r5, r5, #4
  406648:	4607      	mov	r7, r0
  40664a:	4688      	mov	r8, r1
  40664c:	f000 812c 	beq.w	4068a8 <_dtoa_r+0xe08>
  406650:	4e7d      	ldr	r6, [pc, #500]	; (406848 <_dtoa_r+0xda8>)
  406652:	f04f 0a02 	mov.w	sl, #2
  406656:	07eb      	lsls	r3, r5, #31
  406658:	d509      	bpl.n	40666e <_dtoa_r+0xbce>
  40665a:	4638      	mov	r0, r7
  40665c:	4641      	mov	r1, r8
  40665e:	e9d6 2300 	ldrd	r2, r3, [r6]
  406662:	f7fd fc73 	bl	403f4c <__aeabi_dmul>
  406666:	f10a 0a01 	add.w	sl, sl, #1
  40666a:	4607      	mov	r7, r0
  40666c:	4688      	mov	r8, r1
  40666e:	106d      	asrs	r5, r5, #1
  406670:	f106 0608 	add.w	r6, r6, #8
  406674:	d1ef      	bne.n	406656 <_dtoa_r+0xbb6>
  406676:	e608      	b.n	40628a <_dtoa_r+0x7ea>
  406678:	6871      	ldr	r1, [r6, #4]
  40667a:	4620      	mov	r0, r4
  40667c:	f000 fd0e 	bl	40709c <_Balloc>
  406680:	6933      	ldr	r3, [r6, #16]
  406682:	3302      	adds	r3, #2
  406684:	009a      	lsls	r2, r3, #2
  406686:	4605      	mov	r5, r0
  406688:	f106 010c 	add.w	r1, r6, #12
  40668c:	300c      	adds	r0, #12
  40668e:	f000 fc5f 	bl	406f50 <memcpy>
  406692:	4629      	mov	r1, r5
  406694:	2201      	movs	r2, #1
  406696:	4620      	mov	r0, r4
  406698:	f000 feac 	bl	4073f4 <__lshift>
  40669c:	9006      	str	r0, [sp, #24]
  40669e:	e4b5      	b.n	40600c <_dtoa_r+0x56c>
  4066a0:	2b39      	cmp	r3, #57	; 0x39
  4066a2:	f8cd b018 	str.w	fp, [sp, #24]
  4066a6:	46d0      	mov	r8, sl
  4066a8:	f000 80a5 	beq.w	4067f6 <_dtoa_r+0xd56>
  4066ac:	f103 0a01 	add.w	sl, r3, #1
  4066b0:	46b3      	mov	fp, r6
  4066b2:	f887 a000 	strb.w	sl, [r7]
  4066b6:	1c7d      	adds	r5, r7, #1
  4066b8:	9e06      	ldr	r6, [sp, #24]
  4066ba:	e571      	b.n	4061a0 <_dtoa_r+0x700>
  4066bc:	465a      	mov	r2, fp
  4066be:	46d0      	mov	r8, sl
  4066c0:	46b3      	mov	fp, r6
  4066c2:	469a      	mov	sl, r3
  4066c4:	4616      	mov	r6, r2
  4066c6:	e54f      	b.n	406168 <_dtoa_r+0x6c8>
  4066c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066ca:	495e      	ldr	r1, [pc, #376]	; (406844 <_dtoa_r+0xda4>)
  4066cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4066d0:	462a      	mov	r2, r5
  4066d2:	4633      	mov	r3, r6
  4066d4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4066d8:	f7fd fc38 	bl	403f4c <__aeabi_dmul>
  4066dc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4066e0:	4638      	mov	r0, r7
  4066e2:	4641      	mov	r1, r8
  4066e4:	f7fd fe44 	bl	404370 <__aeabi_d2iz>
  4066e8:	4605      	mov	r5, r0
  4066ea:	f7fd fbc9 	bl	403e80 <__aeabi_i2d>
  4066ee:	460b      	mov	r3, r1
  4066f0:	4602      	mov	r2, r0
  4066f2:	4641      	mov	r1, r8
  4066f4:	4638      	mov	r0, r7
  4066f6:	f7fd fa75 	bl	403be4 <__aeabi_dsub>
  4066fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4066fc:	460f      	mov	r7, r1
  4066fe:	9904      	ldr	r1, [sp, #16]
  406700:	3530      	adds	r5, #48	; 0x30
  406702:	2b01      	cmp	r3, #1
  406704:	700d      	strb	r5, [r1, #0]
  406706:	4606      	mov	r6, r0
  406708:	f101 0501 	add.w	r5, r1, #1
  40670c:	d026      	beq.n	40675c <_dtoa_r+0xcbc>
  40670e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406710:	9a04      	ldr	r2, [sp, #16]
  406712:	f8df b13c 	ldr.w	fp, [pc, #316]	; 406850 <_dtoa_r+0xdb0>
  406716:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40671a:	4413      	add	r3, r2
  40671c:	f04f 0a00 	mov.w	sl, #0
  406720:	4699      	mov	r9, r3
  406722:	4652      	mov	r2, sl
  406724:	465b      	mov	r3, fp
  406726:	4630      	mov	r0, r6
  406728:	4639      	mov	r1, r7
  40672a:	f7fd fc0f 	bl	403f4c <__aeabi_dmul>
  40672e:	460f      	mov	r7, r1
  406730:	4606      	mov	r6, r0
  406732:	f7fd fe1d 	bl	404370 <__aeabi_d2iz>
  406736:	4680      	mov	r8, r0
  406738:	f7fd fba2 	bl	403e80 <__aeabi_i2d>
  40673c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406740:	4602      	mov	r2, r0
  406742:	460b      	mov	r3, r1
  406744:	4630      	mov	r0, r6
  406746:	4639      	mov	r1, r7
  406748:	f7fd fa4c 	bl	403be4 <__aeabi_dsub>
  40674c:	f805 8b01 	strb.w	r8, [r5], #1
  406750:	454d      	cmp	r5, r9
  406752:	4606      	mov	r6, r0
  406754:	460f      	mov	r7, r1
  406756:	d1e4      	bne.n	406722 <_dtoa_r+0xc82>
  406758:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40675c:	4b3b      	ldr	r3, [pc, #236]	; (40684c <_dtoa_r+0xdac>)
  40675e:	2200      	movs	r2, #0
  406760:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406764:	f7fd fa40 	bl	403be8 <__adddf3>
  406768:	4632      	mov	r2, r6
  40676a:	463b      	mov	r3, r7
  40676c:	f001 fcea 	bl	408144 <__aeabi_dcmplt>
  406770:	2800      	cmp	r0, #0
  406772:	d046      	beq.n	406802 <_dtoa_r+0xd62>
  406774:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406776:	9302      	str	r3, [sp, #8]
  406778:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40677c:	f7ff bb43 	b.w	405e06 <_dtoa_r+0x366>
  406780:	f04f 0800 	mov.w	r8, #0
  406784:	4646      	mov	r6, r8
  406786:	e6a9      	b.n	4064dc <_dtoa_r+0xa3c>
  406788:	9b08      	ldr	r3, [sp, #32]
  40678a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40678c:	1a9d      	subs	r5, r3, r2
  40678e:	2300      	movs	r3, #0
  406790:	f7ff bb71 	b.w	405e76 <_dtoa_r+0x3d6>
  406794:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406796:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406798:	9d08      	ldr	r5, [sp, #32]
  40679a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40679e:	f7ff bb6a 	b.w	405e76 <_dtoa_r+0x3d6>
  4067a2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4067a6:	f04f 0a02 	mov.w	sl, #2
  4067aa:	e56e      	b.n	40628a <_dtoa_r+0x7ea>
  4067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	f43f aeb8 	beq.w	406524 <_dtoa_r+0xa84>
  4067b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067b6:	2b00      	cmp	r3, #0
  4067b8:	f77f aede 	ble.w	406578 <_dtoa_r+0xad8>
  4067bc:	2200      	movs	r2, #0
  4067be:	4b24      	ldr	r3, [pc, #144]	; (406850 <_dtoa_r+0xdb0>)
  4067c0:	4638      	mov	r0, r7
  4067c2:	4641      	mov	r1, r8
  4067c4:	f7fd fbc2 	bl	403f4c <__aeabi_dmul>
  4067c8:	4607      	mov	r7, r0
  4067ca:	4688      	mov	r8, r1
  4067cc:	f10a 0001 	add.w	r0, sl, #1
  4067d0:	f7fd fb56 	bl	403e80 <__aeabi_i2d>
  4067d4:	463a      	mov	r2, r7
  4067d6:	4643      	mov	r3, r8
  4067d8:	f7fd fbb8 	bl	403f4c <__aeabi_dmul>
  4067dc:	2200      	movs	r2, #0
  4067de:	4b17      	ldr	r3, [pc, #92]	; (40683c <_dtoa_r+0xd9c>)
  4067e0:	f7fd fa02 	bl	403be8 <__adddf3>
  4067e4:	9a02      	ldr	r2, [sp, #8]
  4067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4067e8:	9312      	str	r3, [sp, #72]	; 0x48
  4067ea:	3a01      	subs	r2, #1
  4067ec:	4605      	mov	r5, r0
  4067ee:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4067f2:	9215      	str	r2, [sp, #84]	; 0x54
  4067f4:	e56a      	b.n	4062cc <_dtoa_r+0x82c>
  4067f6:	2239      	movs	r2, #57	; 0x39
  4067f8:	46b3      	mov	fp, r6
  4067fa:	703a      	strb	r2, [r7, #0]
  4067fc:	9e06      	ldr	r6, [sp, #24]
  4067fe:	1c7d      	adds	r5, r7, #1
  406800:	e4c0      	b.n	406184 <_dtoa_r+0x6e4>
  406802:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  406806:	2000      	movs	r0, #0
  406808:	4910      	ldr	r1, [pc, #64]	; (40684c <_dtoa_r+0xdac>)
  40680a:	f7fd f9eb 	bl	403be4 <__aeabi_dsub>
  40680e:	4632      	mov	r2, r6
  406810:	463b      	mov	r3, r7
  406812:	f001 fcb5 	bl	408180 <__aeabi_dcmpgt>
  406816:	b908      	cbnz	r0, 40681c <_dtoa_r+0xd7c>
  406818:	e6ae      	b.n	406578 <_dtoa_r+0xad8>
  40681a:	4615      	mov	r5, r2
  40681c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406820:	2b30      	cmp	r3, #48	; 0x30
  406822:	f105 32ff 	add.w	r2, r5, #4294967295
  406826:	d0f8      	beq.n	40681a <_dtoa_r+0xd7a>
  406828:	e5d7      	b.n	4063da <_dtoa_r+0x93a>
  40682a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40682e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406830:	9302      	str	r3, [sp, #8]
  406832:	f7ff bae8 	b.w	405e06 <_dtoa_r+0x366>
  406836:	970c      	str	r7, [sp, #48]	; 0x30
  406838:	f7ff bba5 	b.w	405f86 <_dtoa_r+0x4e6>
  40683c:	401c0000 	.word	0x401c0000
  406840:	40140000 	.word	0x40140000
  406844:	00408d50 	.word	0x00408d50
  406848:	00408d28 	.word	0x00408d28
  40684c:	3fe00000 	.word	0x3fe00000
  406850:	40240000 	.word	0x40240000
  406854:	2b39      	cmp	r3, #57	; 0x39
  406856:	f8cd b018 	str.w	fp, [sp, #24]
  40685a:	46d0      	mov	r8, sl
  40685c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  406860:	469a      	mov	sl, r3
  406862:	d0c8      	beq.n	4067f6 <_dtoa_r+0xd56>
  406864:	f1bb 0f00 	cmp.w	fp, #0
  406868:	f73f aebf 	bgt.w	4065ea <_dtoa_r+0xb4a>
  40686c:	e6bf      	b.n	4065ee <_dtoa_r+0xb4e>
  40686e:	f47f aebe 	bne.w	4065ee <_dtoa_r+0xb4e>
  406872:	f01a 0f01 	tst.w	sl, #1
  406876:	f43f aeba 	beq.w	4065ee <_dtoa_r+0xb4e>
  40687a:	e6b2      	b.n	4065e2 <_dtoa_r+0xb42>
  40687c:	f04f 0800 	mov.w	r8, #0
  406880:	4646      	mov	r6, r8
  406882:	e5e9      	b.n	406458 <_dtoa_r+0x9b8>
  406884:	4631      	mov	r1, r6
  406886:	2300      	movs	r3, #0
  406888:	220a      	movs	r2, #10
  40688a:	4620      	mov	r0, r4
  40688c:	f000 fc36 	bl	4070fc <__multadd>
  406890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406892:	2b00      	cmp	r3, #0
  406894:	4606      	mov	r6, r0
  406896:	dd0a      	ble.n	4068ae <_dtoa_r+0xe0e>
  406898:	930a      	str	r3, [sp, #40]	; 0x28
  40689a:	f7ff bbaa 	b.w	405ff2 <_dtoa_r+0x552>
  40689e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068a0:	2b02      	cmp	r3, #2
  4068a2:	dc23      	bgt.n	4068ec <_dtoa_r+0xe4c>
  4068a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068a6:	e43b      	b.n	406120 <_dtoa_r+0x680>
  4068a8:	f04f 0a02 	mov.w	sl, #2
  4068ac:	e4ed      	b.n	40628a <_dtoa_r+0x7ea>
  4068ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068b0:	2b02      	cmp	r3, #2
  4068b2:	dc1b      	bgt.n	4068ec <_dtoa_r+0xe4c>
  4068b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068b6:	e7ef      	b.n	406898 <_dtoa_r+0xdf8>
  4068b8:	2500      	movs	r5, #0
  4068ba:	6465      	str	r5, [r4, #68]	; 0x44
  4068bc:	4629      	mov	r1, r5
  4068be:	4620      	mov	r0, r4
  4068c0:	f000 fbec 	bl	40709c <_Balloc>
  4068c4:	f04f 33ff 	mov.w	r3, #4294967295
  4068c8:	930a      	str	r3, [sp, #40]	; 0x28
  4068ca:	930f      	str	r3, [sp, #60]	; 0x3c
  4068cc:	2301      	movs	r3, #1
  4068ce:	9004      	str	r0, [sp, #16]
  4068d0:	9525      	str	r5, [sp, #148]	; 0x94
  4068d2:	6420      	str	r0, [r4, #64]	; 0x40
  4068d4:	930b      	str	r3, [sp, #44]	; 0x2c
  4068d6:	f7ff b9dd 	b.w	405c94 <_dtoa_r+0x1f4>
  4068da:	2501      	movs	r5, #1
  4068dc:	f7ff b9a5 	b.w	405c2a <_dtoa_r+0x18a>
  4068e0:	f43f ab69 	beq.w	405fb6 <_dtoa_r+0x516>
  4068e4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4068e8:	f7ff bbf9 	b.w	4060de <_dtoa_r+0x63e>
  4068ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4068ee:	930a      	str	r3, [sp, #40]	; 0x28
  4068f0:	e5e5      	b.n	4064be <_dtoa_r+0xa1e>
  4068f2:	bf00      	nop

004068f4 <__libc_fini_array>:
  4068f4:	b538      	push	{r3, r4, r5, lr}
  4068f6:	4c0a      	ldr	r4, [pc, #40]	; (406920 <__libc_fini_array+0x2c>)
  4068f8:	4d0a      	ldr	r5, [pc, #40]	; (406924 <__libc_fini_array+0x30>)
  4068fa:	1b64      	subs	r4, r4, r5
  4068fc:	10a4      	asrs	r4, r4, #2
  4068fe:	d00a      	beq.n	406916 <__libc_fini_array+0x22>
  406900:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406904:	3b01      	subs	r3, #1
  406906:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40690a:	3c01      	subs	r4, #1
  40690c:	f855 3904 	ldr.w	r3, [r5], #-4
  406910:	4798      	blx	r3
  406912:	2c00      	cmp	r4, #0
  406914:	d1f9      	bne.n	40690a <__libc_fini_array+0x16>
  406916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40691a:	f002 bb17 	b.w	408f4c <_fini>
  40691e:	bf00      	nop
  406920:	00408f5c 	.word	0x00408f5c
  406924:	00408f58 	.word	0x00408f58

00406928 <_localeconv_r>:
  406928:	4a04      	ldr	r2, [pc, #16]	; (40693c <_localeconv_r+0x14>)
  40692a:	4b05      	ldr	r3, [pc, #20]	; (406940 <_localeconv_r+0x18>)
  40692c:	6812      	ldr	r2, [r2, #0]
  40692e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  406930:	2800      	cmp	r0, #0
  406932:	bf08      	it	eq
  406934:	4618      	moveq	r0, r3
  406936:	30f0      	adds	r0, #240	; 0xf0
  406938:	4770      	bx	lr
  40693a:	bf00      	nop
  40693c:	2040000c 	.word	0x2040000c
  406940:	2040084c 	.word	0x2040084c

00406944 <__retarget_lock_acquire_recursive>:
  406944:	4770      	bx	lr
  406946:	bf00      	nop

00406948 <__retarget_lock_release_recursive>:
  406948:	4770      	bx	lr
  40694a:	bf00      	nop

0040694c <_malloc_r>:
  40694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406950:	f101 060b 	add.w	r6, r1, #11
  406954:	2e16      	cmp	r6, #22
  406956:	b083      	sub	sp, #12
  406958:	4605      	mov	r5, r0
  40695a:	f240 809e 	bls.w	406a9a <_malloc_r+0x14e>
  40695e:	f036 0607 	bics.w	r6, r6, #7
  406962:	f100 80bd 	bmi.w	406ae0 <_malloc_r+0x194>
  406966:	42b1      	cmp	r1, r6
  406968:	f200 80ba 	bhi.w	406ae0 <_malloc_r+0x194>
  40696c:	f000 fb8a 	bl	407084 <__malloc_lock>
  406970:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406974:	f0c0 8293 	bcc.w	406e9e <_malloc_r+0x552>
  406978:	0a73      	lsrs	r3, r6, #9
  40697a:	f000 80b8 	beq.w	406aee <_malloc_r+0x1a2>
  40697e:	2b04      	cmp	r3, #4
  406980:	f200 8179 	bhi.w	406c76 <_malloc_r+0x32a>
  406984:	09b3      	lsrs	r3, r6, #6
  406986:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40698a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40698e:	00c3      	lsls	r3, r0, #3
  406990:	4fbf      	ldr	r7, [pc, #764]	; (406c90 <_malloc_r+0x344>)
  406992:	443b      	add	r3, r7
  406994:	f1a3 0108 	sub.w	r1, r3, #8
  406998:	685c      	ldr	r4, [r3, #4]
  40699a:	42a1      	cmp	r1, r4
  40699c:	d106      	bne.n	4069ac <_malloc_r+0x60>
  40699e:	e00c      	b.n	4069ba <_malloc_r+0x6e>
  4069a0:	2a00      	cmp	r2, #0
  4069a2:	f280 80aa 	bge.w	406afa <_malloc_r+0x1ae>
  4069a6:	68e4      	ldr	r4, [r4, #12]
  4069a8:	42a1      	cmp	r1, r4
  4069aa:	d006      	beq.n	4069ba <_malloc_r+0x6e>
  4069ac:	6863      	ldr	r3, [r4, #4]
  4069ae:	f023 0303 	bic.w	r3, r3, #3
  4069b2:	1b9a      	subs	r2, r3, r6
  4069b4:	2a0f      	cmp	r2, #15
  4069b6:	ddf3      	ble.n	4069a0 <_malloc_r+0x54>
  4069b8:	4670      	mov	r0, lr
  4069ba:	693c      	ldr	r4, [r7, #16]
  4069bc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406ca4 <_malloc_r+0x358>
  4069c0:	4574      	cmp	r4, lr
  4069c2:	f000 81ab 	beq.w	406d1c <_malloc_r+0x3d0>
  4069c6:	6863      	ldr	r3, [r4, #4]
  4069c8:	f023 0303 	bic.w	r3, r3, #3
  4069cc:	1b9a      	subs	r2, r3, r6
  4069ce:	2a0f      	cmp	r2, #15
  4069d0:	f300 8190 	bgt.w	406cf4 <_malloc_r+0x3a8>
  4069d4:	2a00      	cmp	r2, #0
  4069d6:	f8c7 e014 	str.w	lr, [r7, #20]
  4069da:	f8c7 e010 	str.w	lr, [r7, #16]
  4069de:	f280 809d 	bge.w	406b1c <_malloc_r+0x1d0>
  4069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4069e6:	f080 8161 	bcs.w	406cac <_malloc_r+0x360>
  4069ea:	08db      	lsrs	r3, r3, #3
  4069ec:	f103 0c01 	add.w	ip, r3, #1
  4069f0:	1099      	asrs	r1, r3, #2
  4069f2:	687a      	ldr	r2, [r7, #4]
  4069f4:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4069f8:	f8c4 8008 	str.w	r8, [r4, #8]
  4069fc:	2301      	movs	r3, #1
  4069fe:	408b      	lsls	r3, r1
  406a00:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406a04:	4313      	orrs	r3, r2
  406a06:	3908      	subs	r1, #8
  406a08:	60e1      	str	r1, [r4, #12]
  406a0a:	607b      	str	r3, [r7, #4]
  406a0c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406a10:	f8c8 400c 	str.w	r4, [r8, #12]
  406a14:	1082      	asrs	r2, r0, #2
  406a16:	2401      	movs	r4, #1
  406a18:	4094      	lsls	r4, r2
  406a1a:	429c      	cmp	r4, r3
  406a1c:	f200 808b 	bhi.w	406b36 <_malloc_r+0x1ea>
  406a20:	421c      	tst	r4, r3
  406a22:	d106      	bne.n	406a32 <_malloc_r+0xe6>
  406a24:	f020 0003 	bic.w	r0, r0, #3
  406a28:	0064      	lsls	r4, r4, #1
  406a2a:	421c      	tst	r4, r3
  406a2c:	f100 0004 	add.w	r0, r0, #4
  406a30:	d0fa      	beq.n	406a28 <_malloc_r+0xdc>
  406a32:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406a36:	46cc      	mov	ip, r9
  406a38:	4680      	mov	r8, r0
  406a3a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406a3e:	459c      	cmp	ip, r3
  406a40:	d107      	bne.n	406a52 <_malloc_r+0x106>
  406a42:	e16d      	b.n	406d20 <_malloc_r+0x3d4>
  406a44:	2a00      	cmp	r2, #0
  406a46:	f280 817b 	bge.w	406d40 <_malloc_r+0x3f4>
  406a4a:	68db      	ldr	r3, [r3, #12]
  406a4c:	459c      	cmp	ip, r3
  406a4e:	f000 8167 	beq.w	406d20 <_malloc_r+0x3d4>
  406a52:	6859      	ldr	r1, [r3, #4]
  406a54:	f021 0103 	bic.w	r1, r1, #3
  406a58:	1b8a      	subs	r2, r1, r6
  406a5a:	2a0f      	cmp	r2, #15
  406a5c:	ddf2      	ble.n	406a44 <_malloc_r+0xf8>
  406a5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406a62:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406a66:	9300      	str	r3, [sp, #0]
  406a68:	199c      	adds	r4, r3, r6
  406a6a:	4628      	mov	r0, r5
  406a6c:	f046 0601 	orr.w	r6, r6, #1
  406a70:	f042 0501 	orr.w	r5, r2, #1
  406a74:	605e      	str	r6, [r3, #4]
  406a76:	f8c8 c00c 	str.w	ip, [r8, #12]
  406a7a:	f8cc 8008 	str.w	r8, [ip, #8]
  406a7e:	617c      	str	r4, [r7, #20]
  406a80:	613c      	str	r4, [r7, #16]
  406a82:	f8c4 e00c 	str.w	lr, [r4, #12]
  406a86:	f8c4 e008 	str.w	lr, [r4, #8]
  406a8a:	6065      	str	r5, [r4, #4]
  406a8c:	505a      	str	r2, [r3, r1]
  406a8e:	f000 faff 	bl	407090 <__malloc_unlock>
  406a92:	9b00      	ldr	r3, [sp, #0]
  406a94:	f103 0408 	add.w	r4, r3, #8
  406a98:	e01e      	b.n	406ad8 <_malloc_r+0x18c>
  406a9a:	2910      	cmp	r1, #16
  406a9c:	d820      	bhi.n	406ae0 <_malloc_r+0x194>
  406a9e:	f000 faf1 	bl	407084 <__malloc_lock>
  406aa2:	2610      	movs	r6, #16
  406aa4:	2318      	movs	r3, #24
  406aa6:	2002      	movs	r0, #2
  406aa8:	4f79      	ldr	r7, [pc, #484]	; (406c90 <_malloc_r+0x344>)
  406aaa:	443b      	add	r3, r7
  406aac:	f1a3 0208 	sub.w	r2, r3, #8
  406ab0:	685c      	ldr	r4, [r3, #4]
  406ab2:	4294      	cmp	r4, r2
  406ab4:	f000 813d 	beq.w	406d32 <_malloc_r+0x3e6>
  406ab8:	6863      	ldr	r3, [r4, #4]
  406aba:	68e1      	ldr	r1, [r4, #12]
  406abc:	68a6      	ldr	r6, [r4, #8]
  406abe:	f023 0303 	bic.w	r3, r3, #3
  406ac2:	4423      	add	r3, r4
  406ac4:	4628      	mov	r0, r5
  406ac6:	685a      	ldr	r2, [r3, #4]
  406ac8:	60f1      	str	r1, [r6, #12]
  406aca:	f042 0201 	orr.w	r2, r2, #1
  406ace:	608e      	str	r6, [r1, #8]
  406ad0:	605a      	str	r2, [r3, #4]
  406ad2:	f000 fadd 	bl	407090 <__malloc_unlock>
  406ad6:	3408      	adds	r4, #8
  406ad8:	4620      	mov	r0, r4
  406ada:	b003      	add	sp, #12
  406adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ae0:	2400      	movs	r4, #0
  406ae2:	230c      	movs	r3, #12
  406ae4:	4620      	mov	r0, r4
  406ae6:	602b      	str	r3, [r5, #0]
  406ae8:	b003      	add	sp, #12
  406aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406aee:	2040      	movs	r0, #64	; 0x40
  406af0:	f44f 7300 	mov.w	r3, #512	; 0x200
  406af4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406af8:	e74a      	b.n	406990 <_malloc_r+0x44>
  406afa:	4423      	add	r3, r4
  406afc:	68e1      	ldr	r1, [r4, #12]
  406afe:	685a      	ldr	r2, [r3, #4]
  406b00:	68a6      	ldr	r6, [r4, #8]
  406b02:	f042 0201 	orr.w	r2, r2, #1
  406b06:	60f1      	str	r1, [r6, #12]
  406b08:	4628      	mov	r0, r5
  406b0a:	608e      	str	r6, [r1, #8]
  406b0c:	605a      	str	r2, [r3, #4]
  406b0e:	f000 fabf 	bl	407090 <__malloc_unlock>
  406b12:	3408      	adds	r4, #8
  406b14:	4620      	mov	r0, r4
  406b16:	b003      	add	sp, #12
  406b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b1c:	4423      	add	r3, r4
  406b1e:	4628      	mov	r0, r5
  406b20:	685a      	ldr	r2, [r3, #4]
  406b22:	f042 0201 	orr.w	r2, r2, #1
  406b26:	605a      	str	r2, [r3, #4]
  406b28:	f000 fab2 	bl	407090 <__malloc_unlock>
  406b2c:	3408      	adds	r4, #8
  406b2e:	4620      	mov	r0, r4
  406b30:	b003      	add	sp, #12
  406b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b36:	68bc      	ldr	r4, [r7, #8]
  406b38:	6863      	ldr	r3, [r4, #4]
  406b3a:	f023 0803 	bic.w	r8, r3, #3
  406b3e:	45b0      	cmp	r8, r6
  406b40:	d304      	bcc.n	406b4c <_malloc_r+0x200>
  406b42:	eba8 0306 	sub.w	r3, r8, r6
  406b46:	2b0f      	cmp	r3, #15
  406b48:	f300 8085 	bgt.w	406c56 <_malloc_r+0x30a>
  406b4c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406ca8 <_malloc_r+0x35c>
  406b50:	4b50      	ldr	r3, [pc, #320]	; (406c94 <_malloc_r+0x348>)
  406b52:	f8d9 2000 	ldr.w	r2, [r9]
  406b56:	681b      	ldr	r3, [r3, #0]
  406b58:	3201      	adds	r2, #1
  406b5a:	4433      	add	r3, r6
  406b5c:	eb04 0a08 	add.w	sl, r4, r8
  406b60:	f000 8155 	beq.w	406e0e <_malloc_r+0x4c2>
  406b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406b68:	330f      	adds	r3, #15
  406b6a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406b6e:	f02b 0b0f 	bic.w	fp, fp, #15
  406b72:	4659      	mov	r1, fp
  406b74:	4628      	mov	r0, r5
  406b76:	f000 fd8b 	bl	407690 <_sbrk_r>
  406b7a:	1c41      	adds	r1, r0, #1
  406b7c:	4602      	mov	r2, r0
  406b7e:	f000 80fc 	beq.w	406d7a <_malloc_r+0x42e>
  406b82:	4582      	cmp	sl, r0
  406b84:	f200 80f7 	bhi.w	406d76 <_malloc_r+0x42a>
  406b88:	4b43      	ldr	r3, [pc, #268]	; (406c98 <_malloc_r+0x34c>)
  406b8a:	6819      	ldr	r1, [r3, #0]
  406b8c:	4459      	add	r1, fp
  406b8e:	6019      	str	r1, [r3, #0]
  406b90:	f000 814d 	beq.w	406e2e <_malloc_r+0x4e2>
  406b94:	f8d9 0000 	ldr.w	r0, [r9]
  406b98:	3001      	adds	r0, #1
  406b9a:	bf1b      	ittet	ne
  406b9c:	eba2 0a0a 	subne.w	sl, r2, sl
  406ba0:	4451      	addne	r1, sl
  406ba2:	f8c9 2000 	streq.w	r2, [r9]
  406ba6:	6019      	strne	r1, [r3, #0]
  406ba8:	f012 0107 	ands.w	r1, r2, #7
  406bac:	f000 8115 	beq.w	406dda <_malloc_r+0x48e>
  406bb0:	f1c1 0008 	rsb	r0, r1, #8
  406bb4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406bb8:	4402      	add	r2, r0
  406bba:	3108      	adds	r1, #8
  406bbc:	eb02 090b 	add.w	r9, r2, fp
  406bc0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406bc4:	eba1 0909 	sub.w	r9, r1, r9
  406bc8:	4649      	mov	r1, r9
  406bca:	4628      	mov	r0, r5
  406bcc:	9301      	str	r3, [sp, #4]
  406bce:	9200      	str	r2, [sp, #0]
  406bd0:	f000 fd5e 	bl	407690 <_sbrk_r>
  406bd4:	1c43      	adds	r3, r0, #1
  406bd6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406bda:	f000 8143 	beq.w	406e64 <_malloc_r+0x518>
  406bde:	1a80      	subs	r0, r0, r2
  406be0:	4448      	add	r0, r9
  406be2:	f040 0001 	orr.w	r0, r0, #1
  406be6:	6819      	ldr	r1, [r3, #0]
  406be8:	60ba      	str	r2, [r7, #8]
  406bea:	4449      	add	r1, r9
  406bec:	42bc      	cmp	r4, r7
  406bee:	6050      	str	r0, [r2, #4]
  406bf0:	6019      	str	r1, [r3, #0]
  406bf2:	d017      	beq.n	406c24 <_malloc_r+0x2d8>
  406bf4:	f1b8 0f0f 	cmp.w	r8, #15
  406bf8:	f240 80fb 	bls.w	406df2 <_malloc_r+0x4a6>
  406bfc:	6860      	ldr	r0, [r4, #4]
  406bfe:	f1a8 020c 	sub.w	r2, r8, #12
  406c02:	f022 0207 	bic.w	r2, r2, #7
  406c06:	eb04 0e02 	add.w	lr, r4, r2
  406c0a:	f000 0001 	and.w	r0, r0, #1
  406c0e:	f04f 0c05 	mov.w	ip, #5
  406c12:	4310      	orrs	r0, r2
  406c14:	2a0f      	cmp	r2, #15
  406c16:	6060      	str	r0, [r4, #4]
  406c18:	f8ce c004 	str.w	ip, [lr, #4]
  406c1c:	f8ce c008 	str.w	ip, [lr, #8]
  406c20:	f200 8117 	bhi.w	406e52 <_malloc_r+0x506>
  406c24:	4b1d      	ldr	r3, [pc, #116]	; (406c9c <_malloc_r+0x350>)
  406c26:	68bc      	ldr	r4, [r7, #8]
  406c28:	681a      	ldr	r2, [r3, #0]
  406c2a:	4291      	cmp	r1, r2
  406c2c:	bf88      	it	hi
  406c2e:	6019      	strhi	r1, [r3, #0]
  406c30:	4b1b      	ldr	r3, [pc, #108]	; (406ca0 <_malloc_r+0x354>)
  406c32:	681a      	ldr	r2, [r3, #0]
  406c34:	4291      	cmp	r1, r2
  406c36:	6862      	ldr	r2, [r4, #4]
  406c38:	bf88      	it	hi
  406c3a:	6019      	strhi	r1, [r3, #0]
  406c3c:	f022 0203 	bic.w	r2, r2, #3
  406c40:	4296      	cmp	r6, r2
  406c42:	eba2 0306 	sub.w	r3, r2, r6
  406c46:	d801      	bhi.n	406c4c <_malloc_r+0x300>
  406c48:	2b0f      	cmp	r3, #15
  406c4a:	dc04      	bgt.n	406c56 <_malloc_r+0x30a>
  406c4c:	4628      	mov	r0, r5
  406c4e:	f000 fa1f 	bl	407090 <__malloc_unlock>
  406c52:	2400      	movs	r4, #0
  406c54:	e740      	b.n	406ad8 <_malloc_r+0x18c>
  406c56:	19a2      	adds	r2, r4, r6
  406c58:	f043 0301 	orr.w	r3, r3, #1
  406c5c:	f046 0601 	orr.w	r6, r6, #1
  406c60:	6066      	str	r6, [r4, #4]
  406c62:	4628      	mov	r0, r5
  406c64:	60ba      	str	r2, [r7, #8]
  406c66:	6053      	str	r3, [r2, #4]
  406c68:	f000 fa12 	bl	407090 <__malloc_unlock>
  406c6c:	3408      	adds	r4, #8
  406c6e:	4620      	mov	r0, r4
  406c70:	b003      	add	sp, #12
  406c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c76:	2b14      	cmp	r3, #20
  406c78:	d971      	bls.n	406d5e <_malloc_r+0x412>
  406c7a:	2b54      	cmp	r3, #84	; 0x54
  406c7c:	f200 80a3 	bhi.w	406dc6 <_malloc_r+0x47a>
  406c80:	0b33      	lsrs	r3, r6, #12
  406c82:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406c86:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406c8a:	00c3      	lsls	r3, r0, #3
  406c8c:	e680      	b.n	406990 <_malloc_r+0x44>
  406c8e:	bf00      	nop
  406c90:	2040043c 	.word	0x2040043c
  406c94:	20400e4c 	.word	0x20400e4c
  406c98:	20400e1c 	.word	0x20400e1c
  406c9c:	20400e44 	.word	0x20400e44
  406ca0:	20400e48 	.word	0x20400e48
  406ca4:	20400444 	.word	0x20400444
  406ca8:	20400844 	.word	0x20400844
  406cac:	0a5a      	lsrs	r2, r3, #9
  406cae:	2a04      	cmp	r2, #4
  406cb0:	d95b      	bls.n	406d6a <_malloc_r+0x41e>
  406cb2:	2a14      	cmp	r2, #20
  406cb4:	f200 80ae 	bhi.w	406e14 <_malloc_r+0x4c8>
  406cb8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406cbc:	00c9      	lsls	r1, r1, #3
  406cbe:	325b      	adds	r2, #91	; 0x5b
  406cc0:	eb07 0c01 	add.w	ip, r7, r1
  406cc4:	5879      	ldr	r1, [r7, r1]
  406cc6:	f1ac 0c08 	sub.w	ip, ip, #8
  406cca:	458c      	cmp	ip, r1
  406ccc:	f000 8088 	beq.w	406de0 <_malloc_r+0x494>
  406cd0:	684a      	ldr	r2, [r1, #4]
  406cd2:	f022 0203 	bic.w	r2, r2, #3
  406cd6:	4293      	cmp	r3, r2
  406cd8:	d273      	bcs.n	406dc2 <_malloc_r+0x476>
  406cda:	6889      	ldr	r1, [r1, #8]
  406cdc:	458c      	cmp	ip, r1
  406cde:	d1f7      	bne.n	406cd0 <_malloc_r+0x384>
  406ce0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406ce4:	687b      	ldr	r3, [r7, #4]
  406ce6:	60e2      	str	r2, [r4, #12]
  406ce8:	f8c4 c008 	str.w	ip, [r4, #8]
  406cec:	6094      	str	r4, [r2, #8]
  406cee:	f8cc 400c 	str.w	r4, [ip, #12]
  406cf2:	e68f      	b.n	406a14 <_malloc_r+0xc8>
  406cf4:	19a1      	adds	r1, r4, r6
  406cf6:	f046 0c01 	orr.w	ip, r6, #1
  406cfa:	f042 0601 	orr.w	r6, r2, #1
  406cfe:	f8c4 c004 	str.w	ip, [r4, #4]
  406d02:	4628      	mov	r0, r5
  406d04:	6179      	str	r1, [r7, #20]
  406d06:	6139      	str	r1, [r7, #16]
  406d08:	f8c1 e00c 	str.w	lr, [r1, #12]
  406d0c:	f8c1 e008 	str.w	lr, [r1, #8]
  406d10:	604e      	str	r6, [r1, #4]
  406d12:	50e2      	str	r2, [r4, r3]
  406d14:	f000 f9bc 	bl	407090 <__malloc_unlock>
  406d18:	3408      	adds	r4, #8
  406d1a:	e6dd      	b.n	406ad8 <_malloc_r+0x18c>
  406d1c:	687b      	ldr	r3, [r7, #4]
  406d1e:	e679      	b.n	406a14 <_malloc_r+0xc8>
  406d20:	f108 0801 	add.w	r8, r8, #1
  406d24:	f018 0f03 	tst.w	r8, #3
  406d28:	f10c 0c08 	add.w	ip, ip, #8
  406d2c:	f47f ae85 	bne.w	406a3a <_malloc_r+0xee>
  406d30:	e02d      	b.n	406d8e <_malloc_r+0x442>
  406d32:	68dc      	ldr	r4, [r3, #12]
  406d34:	42a3      	cmp	r3, r4
  406d36:	bf08      	it	eq
  406d38:	3002      	addeq	r0, #2
  406d3a:	f43f ae3e 	beq.w	4069ba <_malloc_r+0x6e>
  406d3e:	e6bb      	b.n	406ab8 <_malloc_r+0x16c>
  406d40:	4419      	add	r1, r3
  406d42:	461c      	mov	r4, r3
  406d44:	684a      	ldr	r2, [r1, #4]
  406d46:	68db      	ldr	r3, [r3, #12]
  406d48:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406d4c:	f042 0201 	orr.w	r2, r2, #1
  406d50:	604a      	str	r2, [r1, #4]
  406d52:	4628      	mov	r0, r5
  406d54:	60f3      	str	r3, [r6, #12]
  406d56:	609e      	str	r6, [r3, #8]
  406d58:	f000 f99a 	bl	407090 <__malloc_unlock>
  406d5c:	e6bc      	b.n	406ad8 <_malloc_r+0x18c>
  406d5e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406d62:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406d66:	00c3      	lsls	r3, r0, #3
  406d68:	e612      	b.n	406990 <_malloc_r+0x44>
  406d6a:	099a      	lsrs	r2, r3, #6
  406d6c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406d70:	00c9      	lsls	r1, r1, #3
  406d72:	3238      	adds	r2, #56	; 0x38
  406d74:	e7a4      	b.n	406cc0 <_malloc_r+0x374>
  406d76:	42bc      	cmp	r4, r7
  406d78:	d054      	beq.n	406e24 <_malloc_r+0x4d8>
  406d7a:	68bc      	ldr	r4, [r7, #8]
  406d7c:	6862      	ldr	r2, [r4, #4]
  406d7e:	f022 0203 	bic.w	r2, r2, #3
  406d82:	e75d      	b.n	406c40 <_malloc_r+0x2f4>
  406d84:	f859 3908 	ldr.w	r3, [r9], #-8
  406d88:	4599      	cmp	r9, r3
  406d8a:	f040 8086 	bne.w	406e9a <_malloc_r+0x54e>
  406d8e:	f010 0f03 	tst.w	r0, #3
  406d92:	f100 30ff 	add.w	r0, r0, #4294967295
  406d96:	d1f5      	bne.n	406d84 <_malloc_r+0x438>
  406d98:	687b      	ldr	r3, [r7, #4]
  406d9a:	ea23 0304 	bic.w	r3, r3, r4
  406d9e:	607b      	str	r3, [r7, #4]
  406da0:	0064      	lsls	r4, r4, #1
  406da2:	429c      	cmp	r4, r3
  406da4:	f63f aec7 	bhi.w	406b36 <_malloc_r+0x1ea>
  406da8:	2c00      	cmp	r4, #0
  406daa:	f43f aec4 	beq.w	406b36 <_malloc_r+0x1ea>
  406dae:	421c      	tst	r4, r3
  406db0:	4640      	mov	r0, r8
  406db2:	f47f ae3e 	bne.w	406a32 <_malloc_r+0xe6>
  406db6:	0064      	lsls	r4, r4, #1
  406db8:	421c      	tst	r4, r3
  406dba:	f100 0004 	add.w	r0, r0, #4
  406dbe:	d0fa      	beq.n	406db6 <_malloc_r+0x46a>
  406dc0:	e637      	b.n	406a32 <_malloc_r+0xe6>
  406dc2:	468c      	mov	ip, r1
  406dc4:	e78c      	b.n	406ce0 <_malloc_r+0x394>
  406dc6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406dca:	d815      	bhi.n	406df8 <_malloc_r+0x4ac>
  406dcc:	0bf3      	lsrs	r3, r6, #15
  406dce:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406dd2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406dd6:	00c3      	lsls	r3, r0, #3
  406dd8:	e5da      	b.n	406990 <_malloc_r+0x44>
  406dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406dde:	e6ed      	b.n	406bbc <_malloc_r+0x270>
  406de0:	687b      	ldr	r3, [r7, #4]
  406de2:	1092      	asrs	r2, r2, #2
  406de4:	2101      	movs	r1, #1
  406de6:	fa01 f202 	lsl.w	r2, r1, r2
  406dea:	4313      	orrs	r3, r2
  406dec:	607b      	str	r3, [r7, #4]
  406dee:	4662      	mov	r2, ip
  406df0:	e779      	b.n	406ce6 <_malloc_r+0x39a>
  406df2:	2301      	movs	r3, #1
  406df4:	6053      	str	r3, [r2, #4]
  406df6:	e729      	b.n	406c4c <_malloc_r+0x300>
  406df8:	f240 5254 	movw	r2, #1364	; 0x554
  406dfc:	4293      	cmp	r3, r2
  406dfe:	d822      	bhi.n	406e46 <_malloc_r+0x4fa>
  406e00:	0cb3      	lsrs	r3, r6, #18
  406e02:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406e06:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406e0a:	00c3      	lsls	r3, r0, #3
  406e0c:	e5c0      	b.n	406990 <_malloc_r+0x44>
  406e0e:	f103 0b10 	add.w	fp, r3, #16
  406e12:	e6ae      	b.n	406b72 <_malloc_r+0x226>
  406e14:	2a54      	cmp	r2, #84	; 0x54
  406e16:	d829      	bhi.n	406e6c <_malloc_r+0x520>
  406e18:	0b1a      	lsrs	r2, r3, #12
  406e1a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406e1e:	00c9      	lsls	r1, r1, #3
  406e20:	326e      	adds	r2, #110	; 0x6e
  406e22:	e74d      	b.n	406cc0 <_malloc_r+0x374>
  406e24:	4b20      	ldr	r3, [pc, #128]	; (406ea8 <_malloc_r+0x55c>)
  406e26:	6819      	ldr	r1, [r3, #0]
  406e28:	4459      	add	r1, fp
  406e2a:	6019      	str	r1, [r3, #0]
  406e2c:	e6b2      	b.n	406b94 <_malloc_r+0x248>
  406e2e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406e32:	2800      	cmp	r0, #0
  406e34:	f47f aeae 	bne.w	406b94 <_malloc_r+0x248>
  406e38:	eb08 030b 	add.w	r3, r8, fp
  406e3c:	68ba      	ldr	r2, [r7, #8]
  406e3e:	f043 0301 	orr.w	r3, r3, #1
  406e42:	6053      	str	r3, [r2, #4]
  406e44:	e6ee      	b.n	406c24 <_malloc_r+0x2d8>
  406e46:	207f      	movs	r0, #127	; 0x7f
  406e48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406e4c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406e50:	e59e      	b.n	406990 <_malloc_r+0x44>
  406e52:	f104 0108 	add.w	r1, r4, #8
  406e56:	4628      	mov	r0, r5
  406e58:	9300      	str	r3, [sp, #0]
  406e5a:	f000 fdff 	bl	407a5c <_free_r>
  406e5e:	9b00      	ldr	r3, [sp, #0]
  406e60:	6819      	ldr	r1, [r3, #0]
  406e62:	e6df      	b.n	406c24 <_malloc_r+0x2d8>
  406e64:	2001      	movs	r0, #1
  406e66:	f04f 0900 	mov.w	r9, #0
  406e6a:	e6bc      	b.n	406be6 <_malloc_r+0x29a>
  406e6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406e70:	d805      	bhi.n	406e7e <_malloc_r+0x532>
  406e72:	0bda      	lsrs	r2, r3, #15
  406e74:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406e78:	00c9      	lsls	r1, r1, #3
  406e7a:	3277      	adds	r2, #119	; 0x77
  406e7c:	e720      	b.n	406cc0 <_malloc_r+0x374>
  406e7e:	f240 5154 	movw	r1, #1364	; 0x554
  406e82:	428a      	cmp	r2, r1
  406e84:	d805      	bhi.n	406e92 <_malloc_r+0x546>
  406e86:	0c9a      	lsrs	r2, r3, #18
  406e88:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406e8c:	00c9      	lsls	r1, r1, #3
  406e8e:	327c      	adds	r2, #124	; 0x7c
  406e90:	e716      	b.n	406cc0 <_malloc_r+0x374>
  406e92:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406e96:	227e      	movs	r2, #126	; 0x7e
  406e98:	e712      	b.n	406cc0 <_malloc_r+0x374>
  406e9a:	687b      	ldr	r3, [r7, #4]
  406e9c:	e780      	b.n	406da0 <_malloc_r+0x454>
  406e9e:	08f0      	lsrs	r0, r6, #3
  406ea0:	f106 0308 	add.w	r3, r6, #8
  406ea4:	e600      	b.n	406aa8 <_malloc_r+0x15c>
  406ea6:	bf00      	nop
  406ea8:	20400e1c 	.word	0x20400e1c
  406eac:	00000000 	.word	0x00000000

00406eb0 <memchr>:
  406eb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406eb4:	2a10      	cmp	r2, #16
  406eb6:	db2b      	blt.n	406f10 <memchr+0x60>
  406eb8:	f010 0f07 	tst.w	r0, #7
  406ebc:	d008      	beq.n	406ed0 <memchr+0x20>
  406ebe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406ec2:	3a01      	subs	r2, #1
  406ec4:	428b      	cmp	r3, r1
  406ec6:	d02d      	beq.n	406f24 <memchr+0x74>
  406ec8:	f010 0f07 	tst.w	r0, #7
  406ecc:	b342      	cbz	r2, 406f20 <memchr+0x70>
  406ece:	d1f6      	bne.n	406ebe <memchr+0xe>
  406ed0:	b4f0      	push	{r4, r5, r6, r7}
  406ed2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406ed6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406eda:	f022 0407 	bic.w	r4, r2, #7
  406ede:	f07f 0700 	mvns.w	r7, #0
  406ee2:	2300      	movs	r3, #0
  406ee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406ee8:	3c08      	subs	r4, #8
  406eea:	ea85 0501 	eor.w	r5, r5, r1
  406eee:	ea86 0601 	eor.w	r6, r6, r1
  406ef2:	fa85 f547 	uadd8	r5, r5, r7
  406ef6:	faa3 f587 	sel	r5, r3, r7
  406efa:	fa86 f647 	uadd8	r6, r6, r7
  406efe:	faa5 f687 	sel	r6, r5, r7
  406f02:	b98e      	cbnz	r6, 406f28 <memchr+0x78>
  406f04:	d1ee      	bne.n	406ee4 <memchr+0x34>
  406f06:	bcf0      	pop	{r4, r5, r6, r7}
  406f08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406f0c:	f002 0207 	and.w	r2, r2, #7
  406f10:	b132      	cbz	r2, 406f20 <memchr+0x70>
  406f12:	f810 3b01 	ldrb.w	r3, [r0], #1
  406f16:	3a01      	subs	r2, #1
  406f18:	ea83 0301 	eor.w	r3, r3, r1
  406f1c:	b113      	cbz	r3, 406f24 <memchr+0x74>
  406f1e:	d1f8      	bne.n	406f12 <memchr+0x62>
  406f20:	2000      	movs	r0, #0
  406f22:	4770      	bx	lr
  406f24:	3801      	subs	r0, #1
  406f26:	4770      	bx	lr
  406f28:	2d00      	cmp	r5, #0
  406f2a:	bf06      	itte	eq
  406f2c:	4635      	moveq	r5, r6
  406f2e:	3803      	subeq	r0, #3
  406f30:	3807      	subne	r0, #7
  406f32:	f015 0f01 	tst.w	r5, #1
  406f36:	d107      	bne.n	406f48 <memchr+0x98>
  406f38:	3001      	adds	r0, #1
  406f3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  406f3e:	bf02      	ittt	eq
  406f40:	3001      	addeq	r0, #1
  406f42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406f46:	3001      	addeq	r0, #1
  406f48:	bcf0      	pop	{r4, r5, r6, r7}
  406f4a:	3801      	subs	r0, #1
  406f4c:	4770      	bx	lr
  406f4e:	bf00      	nop

00406f50 <memcpy>:
  406f50:	4684      	mov	ip, r0
  406f52:	ea41 0300 	orr.w	r3, r1, r0
  406f56:	f013 0303 	ands.w	r3, r3, #3
  406f5a:	d16d      	bne.n	407038 <memcpy+0xe8>
  406f5c:	3a40      	subs	r2, #64	; 0x40
  406f5e:	d341      	bcc.n	406fe4 <memcpy+0x94>
  406f60:	f851 3b04 	ldr.w	r3, [r1], #4
  406f64:	f840 3b04 	str.w	r3, [r0], #4
  406f68:	f851 3b04 	ldr.w	r3, [r1], #4
  406f6c:	f840 3b04 	str.w	r3, [r0], #4
  406f70:	f851 3b04 	ldr.w	r3, [r1], #4
  406f74:	f840 3b04 	str.w	r3, [r0], #4
  406f78:	f851 3b04 	ldr.w	r3, [r1], #4
  406f7c:	f840 3b04 	str.w	r3, [r0], #4
  406f80:	f851 3b04 	ldr.w	r3, [r1], #4
  406f84:	f840 3b04 	str.w	r3, [r0], #4
  406f88:	f851 3b04 	ldr.w	r3, [r1], #4
  406f8c:	f840 3b04 	str.w	r3, [r0], #4
  406f90:	f851 3b04 	ldr.w	r3, [r1], #4
  406f94:	f840 3b04 	str.w	r3, [r0], #4
  406f98:	f851 3b04 	ldr.w	r3, [r1], #4
  406f9c:	f840 3b04 	str.w	r3, [r0], #4
  406fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fa4:	f840 3b04 	str.w	r3, [r0], #4
  406fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fac:	f840 3b04 	str.w	r3, [r0], #4
  406fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fb4:	f840 3b04 	str.w	r3, [r0], #4
  406fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fbc:	f840 3b04 	str.w	r3, [r0], #4
  406fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fc4:	f840 3b04 	str.w	r3, [r0], #4
  406fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fcc:	f840 3b04 	str.w	r3, [r0], #4
  406fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fd4:	f840 3b04 	str.w	r3, [r0], #4
  406fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fdc:	f840 3b04 	str.w	r3, [r0], #4
  406fe0:	3a40      	subs	r2, #64	; 0x40
  406fe2:	d2bd      	bcs.n	406f60 <memcpy+0x10>
  406fe4:	3230      	adds	r2, #48	; 0x30
  406fe6:	d311      	bcc.n	40700c <memcpy+0xbc>
  406fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fec:	f840 3b04 	str.w	r3, [r0], #4
  406ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ff4:	f840 3b04 	str.w	r3, [r0], #4
  406ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ffc:	f840 3b04 	str.w	r3, [r0], #4
  407000:	f851 3b04 	ldr.w	r3, [r1], #4
  407004:	f840 3b04 	str.w	r3, [r0], #4
  407008:	3a10      	subs	r2, #16
  40700a:	d2ed      	bcs.n	406fe8 <memcpy+0x98>
  40700c:	320c      	adds	r2, #12
  40700e:	d305      	bcc.n	40701c <memcpy+0xcc>
  407010:	f851 3b04 	ldr.w	r3, [r1], #4
  407014:	f840 3b04 	str.w	r3, [r0], #4
  407018:	3a04      	subs	r2, #4
  40701a:	d2f9      	bcs.n	407010 <memcpy+0xc0>
  40701c:	3204      	adds	r2, #4
  40701e:	d008      	beq.n	407032 <memcpy+0xe2>
  407020:	07d2      	lsls	r2, r2, #31
  407022:	bf1c      	itt	ne
  407024:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407028:	f800 3b01 	strbne.w	r3, [r0], #1
  40702c:	d301      	bcc.n	407032 <memcpy+0xe2>
  40702e:	880b      	ldrh	r3, [r1, #0]
  407030:	8003      	strh	r3, [r0, #0]
  407032:	4660      	mov	r0, ip
  407034:	4770      	bx	lr
  407036:	bf00      	nop
  407038:	2a08      	cmp	r2, #8
  40703a:	d313      	bcc.n	407064 <memcpy+0x114>
  40703c:	078b      	lsls	r3, r1, #30
  40703e:	d08d      	beq.n	406f5c <memcpy+0xc>
  407040:	f010 0303 	ands.w	r3, r0, #3
  407044:	d08a      	beq.n	406f5c <memcpy+0xc>
  407046:	f1c3 0304 	rsb	r3, r3, #4
  40704a:	1ad2      	subs	r2, r2, r3
  40704c:	07db      	lsls	r3, r3, #31
  40704e:	bf1c      	itt	ne
  407050:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407054:	f800 3b01 	strbne.w	r3, [r0], #1
  407058:	d380      	bcc.n	406f5c <memcpy+0xc>
  40705a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40705e:	f820 3b02 	strh.w	r3, [r0], #2
  407062:	e77b      	b.n	406f5c <memcpy+0xc>
  407064:	3a04      	subs	r2, #4
  407066:	d3d9      	bcc.n	40701c <memcpy+0xcc>
  407068:	3a01      	subs	r2, #1
  40706a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40706e:	f800 3b01 	strb.w	r3, [r0], #1
  407072:	d2f9      	bcs.n	407068 <memcpy+0x118>
  407074:	780b      	ldrb	r3, [r1, #0]
  407076:	7003      	strb	r3, [r0, #0]
  407078:	784b      	ldrb	r3, [r1, #1]
  40707a:	7043      	strb	r3, [r0, #1]
  40707c:	788b      	ldrb	r3, [r1, #2]
  40707e:	7083      	strb	r3, [r0, #2]
  407080:	4660      	mov	r0, ip
  407082:	4770      	bx	lr

00407084 <__malloc_lock>:
  407084:	4801      	ldr	r0, [pc, #4]	; (40708c <__malloc_lock+0x8>)
  407086:	f7ff bc5d 	b.w	406944 <__retarget_lock_acquire_recursive>
  40708a:	bf00      	nop
  40708c:	20400e88 	.word	0x20400e88

00407090 <__malloc_unlock>:
  407090:	4801      	ldr	r0, [pc, #4]	; (407098 <__malloc_unlock+0x8>)
  407092:	f7ff bc59 	b.w	406948 <__retarget_lock_release_recursive>
  407096:	bf00      	nop
  407098:	20400e88 	.word	0x20400e88

0040709c <_Balloc>:
  40709c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40709e:	b570      	push	{r4, r5, r6, lr}
  4070a0:	4605      	mov	r5, r0
  4070a2:	460c      	mov	r4, r1
  4070a4:	b14b      	cbz	r3, 4070ba <_Balloc+0x1e>
  4070a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4070aa:	b180      	cbz	r0, 4070ce <_Balloc+0x32>
  4070ac:	6802      	ldr	r2, [r0, #0]
  4070ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4070b2:	2300      	movs	r3, #0
  4070b4:	6103      	str	r3, [r0, #16]
  4070b6:	60c3      	str	r3, [r0, #12]
  4070b8:	bd70      	pop	{r4, r5, r6, pc}
  4070ba:	2221      	movs	r2, #33	; 0x21
  4070bc:	2104      	movs	r1, #4
  4070be:	f000 fc4d 	bl	40795c <_calloc_r>
  4070c2:	64e8      	str	r0, [r5, #76]	; 0x4c
  4070c4:	4603      	mov	r3, r0
  4070c6:	2800      	cmp	r0, #0
  4070c8:	d1ed      	bne.n	4070a6 <_Balloc+0xa>
  4070ca:	2000      	movs	r0, #0
  4070cc:	bd70      	pop	{r4, r5, r6, pc}
  4070ce:	2101      	movs	r1, #1
  4070d0:	fa01 f604 	lsl.w	r6, r1, r4
  4070d4:	1d72      	adds	r2, r6, #5
  4070d6:	4628      	mov	r0, r5
  4070d8:	0092      	lsls	r2, r2, #2
  4070da:	f000 fc3f 	bl	40795c <_calloc_r>
  4070de:	2800      	cmp	r0, #0
  4070e0:	d0f3      	beq.n	4070ca <_Balloc+0x2e>
  4070e2:	6044      	str	r4, [r0, #4]
  4070e4:	6086      	str	r6, [r0, #8]
  4070e6:	e7e4      	b.n	4070b2 <_Balloc+0x16>

004070e8 <_Bfree>:
  4070e8:	b131      	cbz	r1, 4070f8 <_Bfree+0x10>
  4070ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4070ec:	684a      	ldr	r2, [r1, #4]
  4070ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4070f2:	6008      	str	r0, [r1, #0]
  4070f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4070f8:	4770      	bx	lr
  4070fa:	bf00      	nop

004070fc <__multadd>:
  4070fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4070fe:	690c      	ldr	r4, [r1, #16]
  407100:	b083      	sub	sp, #12
  407102:	460d      	mov	r5, r1
  407104:	4606      	mov	r6, r0
  407106:	f101 0e14 	add.w	lr, r1, #20
  40710a:	2700      	movs	r7, #0
  40710c:	f8de 0000 	ldr.w	r0, [lr]
  407110:	b281      	uxth	r1, r0
  407112:	fb02 3301 	mla	r3, r2, r1, r3
  407116:	0c01      	lsrs	r1, r0, #16
  407118:	0c18      	lsrs	r0, r3, #16
  40711a:	fb02 0101 	mla	r1, r2, r1, r0
  40711e:	b29b      	uxth	r3, r3
  407120:	3701      	adds	r7, #1
  407122:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407126:	42bc      	cmp	r4, r7
  407128:	f84e 3b04 	str.w	r3, [lr], #4
  40712c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407130:	dcec      	bgt.n	40710c <__multadd+0x10>
  407132:	b13b      	cbz	r3, 407144 <__multadd+0x48>
  407134:	68aa      	ldr	r2, [r5, #8]
  407136:	4294      	cmp	r4, r2
  407138:	da07      	bge.n	40714a <__multadd+0x4e>
  40713a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40713e:	3401      	adds	r4, #1
  407140:	6153      	str	r3, [r2, #20]
  407142:	612c      	str	r4, [r5, #16]
  407144:	4628      	mov	r0, r5
  407146:	b003      	add	sp, #12
  407148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40714a:	6869      	ldr	r1, [r5, #4]
  40714c:	9301      	str	r3, [sp, #4]
  40714e:	3101      	adds	r1, #1
  407150:	4630      	mov	r0, r6
  407152:	f7ff ffa3 	bl	40709c <_Balloc>
  407156:	692a      	ldr	r2, [r5, #16]
  407158:	3202      	adds	r2, #2
  40715a:	f105 010c 	add.w	r1, r5, #12
  40715e:	4607      	mov	r7, r0
  407160:	0092      	lsls	r2, r2, #2
  407162:	300c      	adds	r0, #12
  407164:	f7ff fef4 	bl	406f50 <memcpy>
  407168:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40716a:	6869      	ldr	r1, [r5, #4]
  40716c:	9b01      	ldr	r3, [sp, #4]
  40716e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407172:	6028      	str	r0, [r5, #0]
  407174:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407178:	463d      	mov	r5, r7
  40717a:	e7de      	b.n	40713a <__multadd+0x3e>

0040717c <__hi0bits>:
  40717c:	0c02      	lsrs	r2, r0, #16
  40717e:	0412      	lsls	r2, r2, #16
  407180:	4603      	mov	r3, r0
  407182:	b9b2      	cbnz	r2, 4071b2 <__hi0bits+0x36>
  407184:	0403      	lsls	r3, r0, #16
  407186:	2010      	movs	r0, #16
  407188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40718c:	bf04      	itt	eq
  40718e:	021b      	lsleq	r3, r3, #8
  407190:	3008      	addeq	r0, #8
  407192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407196:	bf04      	itt	eq
  407198:	011b      	lsleq	r3, r3, #4
  40719a:	3004      	addeq	r0, #4
  40719c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4071a0:	bf04      	itt	eq
  4071a2:	009b      	lsleq	r3, r3, #2
  4071a4:	3002      	addeq	r0, #2
  4071a6:	2b00      	cmp	r3, #0
  4071a8:	db02      	blt.n	4071b0 <__hi0bits+0x34>
  4071aa:	005b      	lsls	r3, r3, #1
  4071ac:	d403      	bmi.n	4071b6 <__hi0bits+0x3a>
  4071ae:	2020      	movs	r0, #32
  4071b0:	4770      	bx	lr
  4071b2:	2000      	movs	r0, #0
  4071b4:	e7e8      	b.n	407188 <__hi0bits+0xc>
  4071b6:	3001      	adds	r0, #1
  4071b8:	4770      	bx	lr
  4071ba:	bf00      	nop

004071bc <__lo0bits>:
  4071bc:	6803      	ldr	r3, [r0, #0]
  4071be:	f013 0207 	ands.w	r2, r3, #7
  4071c2:	4601      	mov	r1, r0
  4071c4:	d007      	beq.n	4071d6 <__lo0bits+0x1a>
  4071c6:	07da      	lsls	r2, r3, #31
  4071c8:	d421      	bmi.n	40720e <__lo0bits+0x52>
  4071ca:	0798      	lsls	r0, r3, #30
  4071cc:	d421      	bmi.n	407212 <__lo0bits+0x56>
  4071ce:	089b      	lsrs	r3, r3, #2
  4071d0:	600b      	str	r3, [r1, #0]
  4071d2:	2002      	movs	r0, #2
  4071d4:	4770      	bx	lr
  4071d6:	b298      	uxth	r0, r3
  4071d8:	b198      	cbz	r0, 407202 <__lo0bits+0x46>
  4071da:	4610      	mov	r0, r2
  4071dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4071e0:	bf04      	itt	eq
  4071e2:	0a1b      	lsreq	r3, r3, #8
  4071e4:	3008      	addeq	r0, #8
  4071e6:	071a      	lsls	r2, r3, #28
  4071e8:	bf04      	itt	eq
  4071ea:	091b      	lsreq	r3, r3, #4
  4071ec:	3004      	addeq	r0, #4
  4071ee:	079a      	lsls	r2, r3, #30
  4071f0:	bf04      	itt	eq
  4071f2:	089b      	lsreq	r3, r3, #2
  4071f4:	3002      	addeq	r0, #2
  4071f6:	07da      	lsls	r2, r3, #31
  4071f8:	d407      	bmi.n	40720a <__lo0bits+0x4e>
  4071fa:	085b      	lsrs	r3, r3, #1
  4071fc:	d104      	bne.n	407208 <__lo0bits+0x4c>
  4071fe:	2020      	movs	r0, #32
  407200:	4770      	bx	lr
  407202:	0c1b      	lsrs	r3, r3, #16
  407204:	2010      	movs	r0, #16
  407206:	e7e9      	b.n	4071dc <__lo0bits+0x20>
  407208:	3001      	adds	r0, #1
  40720a:	600b      	str	r3, [r1, #0]
  40720c:	4770      	bx	lr
  40720e:	2000      	movs	r0, #0
  407210:	4770      	bx	lr
  407212:	085b      	lsrs	r3, r3, #1
  407214:	600b      	str	r3, [r1, #0]
  407216:	2001      	movs	r0, #1
  407218:	4770      	bx	lr
  40721a:	bf00      	nop

0040721c <__i2b>:
  40721c:	b510      	push	{r4, lr}
  40721e:	460c      	mov	r4, r1
  407220:	2101      	movs	r1, #1
  407222:	f7ff ff3b 	bl	40709c <_Balloc>
  407226:	2201      	movs	r2, #1
  407228:	6144      	str	r4, [r0, #20]
  40722a:	6102      	str	r2, [r0, #16]
  40722c:	bd10      	pop	{r4, pc}
  40722e:	bf00      	nop

00407230 <__multiply>:
  407230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407234:	690c      	ldr	r4, [r1, #16]
  407236:	6915      	ldr	r5, [r2, #16]
  407238:	42ac      	cmp	r4, r5
  40723a:	b083      	sub	sp, #12
  40723c:	468b      	mov	fp, r1
  40723e:	4616      	mov	r6, r2
  407240:	da04      	bge.n	40724c <__multiply+0x1c>
  407242:	4622      	mov	r2, r4
  407244:	46b3      	mov	fp, r6
  407246:	462c      	mov	r4, r5
  407248:	460e      	mov	r6, r1
  40724a:	4615      	mov	r5, r2
  40724c:	f8db 3008 	ldr.w	r3, [fp, #8]
  407250:	f8db 1004 	ldr.w	r1, [fp, #4]
  407254:	eb04 0805 	add.w	r8, r4, r5
  407258:	4598      	cmp	r8, r3
  40725a:	bfc8      	it	gt
  40725c:	3101      	addgt	r1, #1
  40725e:	f7ff ff1d 	bl	40709c <_Balloc>
  407262:	f100 0914 	add.w	r9, r0, #20
  407266:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40726a:	45d1      	cmp	r9, sl
  40726c:	9000      	str	r0, [sp, #0]
  40726e:	d205      	bcs.n	40727c <__multiply+0x4c>
  407270:	464b      	mov	r3, r9
  407272:	2100      	movs	r1, #0
  407274:	f843 1b04 	str.w	r1, [r3], #4
  407278:	459a      	cmp	sl, r3
  40727a:	d8fb      	bhi.n	407274 <__multiply+0x44>
  40727c:	f106 0c14 	add.w	ip, r6, #20
  407280:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407284:	f10b 0b14 	add.w	fp, fp, #20
  407288:	459c      	cmp	ip, r3
  40728a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40728e:	d24c      	bcs.n	40732a <__multiply+0xfa>
  407290:	f8cd a004 	str.w	sl, [sp, #4]
  407294:	469a      	mov	sl, r3
  407296:	f8dc 5000 	ldr.w	r5, [ip]
  40729a:	b2af      	uxth	r7, r5
  40729c:	b1ef      	cbz	r7, 4072da <__multiply+0xaa>
  40729e:	2100      	movs	r1, #0
  4072a0:	464d      	mov	r5, r9
  4072a2:	465e      	mov	r6, fp
  4072a4:	460c      	mov	r4, r1
  4072a6:	f856 2b04 	ldr.w	r2, [r6], #4
  4072aa:	6828      	ldr	r0, [r5, #0]
  4072ac:	b293      	uxth	r3, r2
  4072ae:	b281      	uxth	r1, r0
  4072b0:	fb07 1303 	mla	r3, r7, r3, r1
  4072b4:	0c12      	lsrs	r2, r2, #16
  4072b6:	0c01      	lsrs	r1, r0, #16
  4072b8:	4423      	add	r3, r4
  4072ba:	fb07 1102 	mla	r1, r7, r2, r1
  4072be:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4072c2:	b29b      	uxth	r3, r3
  4072c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4072c8:	45b6      	cmp	lr, r6
  4072ca:	f845 3b04 	str.w	r3, [r5], #4
  4072ce:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4072d2:	d8e8      	bhi.n	4072a6 <__multiply+0x76>
  4072d4:	602c      	str	r4, [r5, #0]
  4072d6:	f8dc 5000 	ldr.w	r5, [ip]
  4072da:	0c2d      	lsrs	r5, r5, #16
  4072dc:	d01d      	beq.n	40731a <__multiply+0xea>
  4072de:	f8d9 3000 	ldr.w	r3, [r9]
  4072e2:	4648      	mov	r0, r9
  4072e4:	461c      	mov	r4, r3
  4072e6:	4659      	mov	r1, fp
  4072e8:	2200      	movs	r2, #0
  4072ea:	880e      	ldrh	r6, [r1, #0]
  4072ec:	0c24      	lsrs	r4, r4, #16
  4072ee:	fb05 4406 	mla	r4, r5, r6, r4
  4072f2:	4422      	add	r2, r4
  4072f4:	b29b      	uxth	r3, r3
  4072f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4072fa:	f840 3b04 	str.w	r3, [r0], #4
  4072fe:	f851 3b04 	ldr.w	r3, [r1], #4
  407302:	6804      	ldr	r4, [r0, #0]
  407304:	0c1b      	lsrs	r3, r3, #16
  407306:	b2a6      	uxth	r6, r4
  407308:	fb05 6303 	mla	r3, r5, r3, r6
  40730c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407310:	458e      	cmp	lr, r1
  407312:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407316:	d8e8      	bhi.n	4072ea <__multiply+0xba>
  407318:	6003      	str	r3, [r0, #0]
  40731a:	f10c 0c04 	add.w	ip, ip, #4
  40731e:	45e2      	cmp	sl, ip
  407320:	f109 0904 	add.w	r9, r9, #4
  407324:	d8b7      	bhi.n	407296 <__multiply+0x66>
  407326:	f8dd a004 	ldr.w	sl, [sp, #4]
  40732a:	f1b8 0f00 	cmp.w	r8, #0
  40732e:	dd0b      	ble.n	407348 <__multiply+0x118>
  407330:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407334:	f1aa 0a04 	sub.w	sl, sl, #4
  407338:	b11b      	cbz	r3, 407342 <__multiply+0x112>
  40733a:	e005      	b.n	407348 <__multiply+0x118>
  40733c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407340:	b913      	cbnz	r3, 407348 <__multiply+0x118>
  407342:	f1b8 0801 	subs.w	r8, r8, #1
  407346:	d1f9      	bne.n	40733c <__multiply+0x10c>
  407348:	9800      	ldr	r0, [sp, #0]
  40734a:	f8c0 8010 	str.w	r8, [r0, #16]
  40734e:	b003      	add	sp, #12
  407350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407354 <__pow5mult>:
  407354:	f012 0303 	ands.w	r3, r2, #3
  407358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40735c:	4614      	mov	r4, r2
  40735e:	4607      	mov	r7, r0
  407360:	d12e      	bne.n	4073c0 <__pow5mult+0x6c>
  407362:	460d      	mov	r5, r1
  407364:	10a4      	asrs	r4, r4, #2
  407366:	d01c      	beq.n	4073a2 <__pow5mult+0x4e>
  407368:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40736a:	b396      	cbz	r6, 4073d2 <__pow5mult+0x7e>
  40736c:	07e3      	lsls	r3, r4, #31
  40736e:	f04f 0800 	mov.w	r8, #0
  407372:	d406      	bmi.n	407382 <__pow5mult+0x2e>
  407374:	1064      	asrs	r4, r4, #1
  407376:	d014      	beq.n	4073a2 <__pow5mult+0x4e>
  407378:	6830      	ldr	r0, [r6, #0]
  40737a:	b1a8      	cbz	r0, 4073a8 <__pow5mult+0x54>
  40737c:	4606      	mov	r6, r0
  40737e:	07e3      	lsls	r3, r4, #31
  407380:	d5f8      	bpl.n	407374 <__pow5mult+0x20>
  407382:	4632      	mov	r2, r6
  407384:	4629      	mov	r1, r5
  407386:	4638      	mov	r0, r7
  407388:	f7ff ff52 	bl	407230 <__multiply>
  40738c:	b1b5      	cbz	r5, 4073bc <__pow5mult+0x68>
  40738e:	686a      	ldr	r2, [r5, #4]
  407390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407392:	1064      	asrs	r4, r4, #1
  407394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407398:	6029      	str	r1, [r5, #0]
  40739a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40739e:	4605      	mov	r5, r0
  4073a0:	d1ea      	bne.n	407378 <__pow5mult+0x24>
  4073a2:	4628      	mov	r0, r5
  4073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073a8:	4632      	mov	r2, r6
  4073aa:	4631      	mov	r1, r6
  4073ac:	4638      	mov	r0, r7
  4073ae:	f7ff ff3f 	bl	407230 <__multiply>
  4073b2:	6030      	str	r0, [r6, #0]
  4073b4:	f8c0 8000 	str.w	r8, [r0]
  4073b8:	4606      	mov	r6, r0
  4073ba:	e7e0      	b.n	40737e <__pow5mult+0x2a>
  4073bc:	4605      	mov	r5, r0
  4073be:	e7d9      	b.n	407374 <__pow5mult+0x20>
  4073c0:	1e5a      	subs	r2, r3, #1
  4073c2:	4d0b      	ldr	r5, [pc, #44]	; (4073f0 <__pow5mult+0x9c>)
  4073c4:	2300      	movs	r3, #0
  4073c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4073ca:	f7ff fe97 	bl	4070fc <__multadd>
  4073ce:	4605      	mov	r5, r0
  4073d0:	e7c8      	b.n	407364 <__pow5mult+0x10>
  4073d2:	2101      	movs	r1, #1
  4073d4:	4638      	mov	r0, r7
  4073d6:	f7ff fe61 	bl	40709c <_Balloc>
  4073da:	f240 2171 	movw	r1, #625	; 0x271
  4073de:	2201      	movs	r2, #1
  4073e0:	2300      	movs	r3, #0
  4073e2:	6141      	str	r1, [r0, #20]
  4073e4:	6102      	str	r2, [r0, #16]
  4073e6:	4606      	mov	r6, r0
  4073e8:	64b8      	str	r0, [r7, #72]	; 0x48
  4073ea:	6003      	str	r3, [r0, #0]
  4073ec:	e7be      	b.n	40736c <__pow5mult+0x18>
  4073ee:	bf00      	nop
  4073f0:	00408e18 	.word	0x00408e18

004073f4 <__lshift>:
  4073f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4073f8:	4691      	mov	r9, r2
  4073fa:	690a      	ldr	r2, [r1, #16]
  4073fc:	688b      	ldr	r3, [r1, #8]
  4073fe:	ea4f 1469 	mov.w	r4, r9, asr #5
  407402:	eb04 0802 	add.w	r8, r4, r2
  407406:	f108 0501 	add.w	r5, r8, #1
  40740a:	429d      	cmp	r5, r3
  40740c:	460e      	mov	r6, r1
  40740e:	4607      	mov	r7, r0
  407410:	6849      	ldr	r1, [r1, #4]
  407412:	dd04      	ble.n	40741e <__lshift+0x2a>
  407414:	005b      	lsls	r3, r3, #1
  407416:	429d      	cmp	r5, r3
  407418:	f101 0101 	add.w	r1, r1, #1
  40741c:	dcfa      	bgt.n	407414 <__lshift+0x20>
  40741e:	4638      	mov	r0, r7
  407420:	f7ff fe3c 	bl	40709c <_Balloc>
  407424:	2c00      	cmp	r4, #0
  407426:	f100 0314 	add.w	r3, r0, #20
  40742a:	dd06      	ble.n	40743a <__lshift+0x46>
  40742c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407430:	2100      	movs	r1, #0
  407432:	f843 1b04 	str.w	r1, [r3], #4
  407436:	429a      	cmp	r2, r3
  407438:	d1fb      	bne.n	407432 <__lshift+0x3e>
  40743a:	6934      	ldr	r4, [r6, #16]
  40743c:	f106 0114 	add.w	r1, r6, #20
  407440:	f019 091f 	ands.w	r9, r9, #31
  407444:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407448:	d01d      	beq.n	407486 <__lshift+0x92>
  40744a:	f1c9 0c20 	rsb	ip, r9, #32
  40744e:	2200      	movs	r2, #0
  407450:	680c      	ldr	r4, [r1, #0]
  407452:	fa04 f409 	lsl.w	r4, r4, r9
  407456:	4314      	orrs	r4, r2
  407458:	f843 4b04 	str.w	r4, [r3], #4
  40745c:	f851 2b04 	ldr.w	r2, [r1], #4
  407460:	458e      	cmp	lr, r1
  407462:	fa22 f20c 	lsr.w	r2, r2, ip
  407466:	d8f3      	bhi.n	407450 <__lshift+0x5c>
  407468:	601a      	str	r2, [r3, #0]
  40746a:	b10a      	cbz	r2, 407470 <__lshift+0x7c>
  40746c:	f108 0502 	add.w	r5, r8, #2
  407470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407472:	6872      	ldr	r2, [r6, #4]
  407474:	3d01      	subs	r5, #1
  407476:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40747a:	6105      	str	r5, [r0, #16]
  40747c:	6031      	str	r1, [r6, #0]
  40747e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407486:	3b04      	subs	r3, #4
  407488:	f851 2b04 	ldr.w	r2, [r1], #4
  40748c:	f843 2f04 	str.w	r2, [r3, #4]!
  407490:	458e      	cmp	lr, r1
  407492:	d8f9      	bhi.n	407488 <__lshift+0x94>
  407494:	e7ec      	b.n	407470 <__lshift+0x7c>
  407496:	bf00      	nop

00407498 <__mcmp>:
  407498:	b430      	push	{r4, r5}
  40749a:	690b      	ldr	r3, [r1, #16]
  40749c:	4605      	mov	r5, r0
  40749e:	6900      	ldr	r0, [r0, #16]
  4074a0:	1ac0      	subs	r0, r0, r3
  4074a2:	d10f      	bne.n	4074c4 <__mcmp+0x2c>
  4074a4:	009b      	lsls	r3, r3, #2
  4074a6:	3514      	adds	r5, #20
  4074a8:	3114      	adds	r1, #20
  4074aa:	4419      	add	r1, r3
  4074ac:	442b      	add	r3, r5
  4074ae:	e001      	b.n	4074b4 <__mcmp+0x1c>
  4074b0:	429d      	cmp	r5, r3
  4074b2:	d207      	bcs.n	4074c4 <__mcmp+0x2c>
  4074b4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4074b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4074bc:	4294      	cmp	r4, r2
  4074be:	d0f7      	beq.n	4074b0 <__mcmp+0x18>
  4074c0:	d302      	bcc.n	4074c8 <__mcmp+0x30>
  4074c2:	2001      	movs	r0, #1
  4074c4:	bc30      	pop	{r4, r5}
  4074c6:	4770      	bx	lr
  4074c8:	f04f 30ff 	mov.w	r0, #4294967295
  4074cc:	e7fa      	b.n	4074c4 <__mcmp+0x2c>
  4074ce:	bf00      	nop

004074d0 <__mdiff>:
  4074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4074d4:	690f      	ldr	r7, [r1, #16]
  4074d6:	460e      	mov	r6, r1
  4074d8:	6911      	ldr	r1, [r2, #16]
  4074da:	1a7f      	subs	r7, r7, r1
  4074dc:	2f00      	cmp	r7, #0
  4074de:	4690      	mov	r8, r2
  4074e0:	d117      	bne.n	407512 <__mdiff+0x42>
  4074e2:	0089      	lsls	r1, r1, #2
  4074e4:	f106 0514 	add.w	r5, r6, #20
  4074e8:	f102 0e14 	add.w	lr, r2, #20
  4074ec:	186b      	adds	r3, r5, r1
  4074ee:	4471      	add	r1, lr
  4074f0:	e001      	b.n	4074f6 <__mdiff+0x26>
  4074f2:	429d      	cmp	r5, r3
  4074f4:	d25c      	bcs.n	4075b0 <__mdiff+0xe0>
  4074f6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4074fa:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4074fe:	42a2      	cmp	r2, r4
  407500:	d0f7      	beq.n	4074f2 <__mdiff+0x22>
  407502:	d25e      	bcs.n	4075c2 <__mdiff+0xf2>
  407504:	4633      	mov	r3, r6
  407506:	462c      	mov	r4, r5
  407508:	4646      	mov	r6, r8
  40750a:	4675      	mov	r5, lr
  40750c:	4698      	mov	r8, r3
  40750e:	2701      	movs	r7, #1
  407510:	e005      	b.n	40751e <__mdiff+0x4e>
  407512:	db58      	blt.n	4075c6 <__mdiff+0xf6>
  407514:	f106 0514 	add.w	r5, r6, #20
  407518:	f108 0414 	add.w	r4, r8, #20
  40751c:	2700      	movs	r7, #0
  40751e:	6871      	ldr	r1, [r6, #4]
  407520:	f7ff fdbc 	bl	40709c <_Balloc>
  407524:	f8d8 3010 	ldr.w	r3, [r8, #16]
  407528:	6936      	ldr	r6, [r6, #16]
  40752a:	60c7      	str	r7, [r0, #12]
  40752c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407530:	46a6      	mov	lr, r4
  407532:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  407536:	f100 0414 	add.w	r4, r0, #20
  40753a:	2300      	movs	r3, #0
  40753c:	f85e 1b04 	ldr.w	r1, [lr], #4
  407540:	f855 8b04 	ldr.w	r8, [r5], #4
  407544:	b28a      	uxth	r2, r1
  407546:	fa13 f388 	uxtah	r3, r3, r8
  40754a:	0c09      	lsrs	r1, r1, #16
  40754c:	1a9a      	subs	r2, r3, r2
  40754e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407552:	eb03 4322 	add.w	r3, r3, r2, asr #16
  407556:	b292      	uxth	r2, r2
  407558:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40755c:	45f4      	cmp	ip, lr
  40755e:	f844 2b04 	str.w	r2, [r4], #4
  407562:	ea4f 4323 	mov.w	r3, r3, asr #16
  407566:	d8e9      	bhi.n	40753c <__mdiff+0x6c>
  407568:	42af      	cmp	r7, r5
  40756a:	d917      	bls.n	40759c <__mdiff+0xcc>
  40756c:	46a4      	mov	ip, r4
  40756e:	46ae      	mov	lr, r5
  407570:	f85e 2b04 	ldr.w	r2, [lr], #4
  407574:	fa13 f382 	uxtah	r3, r3, r2
  407578:	1419      	asrs	r1, r3, #16
  40757a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40757e:	b29b      	uxth	r3, r3
  407580:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  407584:	4577      	cmp	r7, lr
  407586:	f84c 2b04 	str.w	r2, [ip], #4
  40758a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40758e:	d8ef      	bhi.n	407570 <__mdiff+0xa0>
  407590:	43ed      	mvns	r5, r5
  407592:	442f      	add	r7, r5
  407594:	f027 0703 	bic.w	r7, r7, #3
  407598:	3704      	adds	r7, #4
  40759a:	443c      	add	r4, r7
  40759c:	3c04      	subs	r4, #4
  40759e:	b922      	cbnz	r2, 4075aa <__mdiff+0xda>
  4075a0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4075a4:	3e01      	subs	r6, #1
  4075a6:	2b00      	cmp	r3, #0
  4075a8:	d0fa      	beq.n	4075a0 <__mdiff+0xd0>
  4075aa:	6106      	str	r6, [r0, #16]
  4075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4075b0:	2100      	movs	r1, #0
  4075b2:	f7ff fd73 	bl	40709c <_Balloc>
  4075b6:	2201      	movs	r2, #1
  4075b8:	2300      	movs	r3, #0
  4075ba:	6102      	str	r2, [r0, #16]
  4075bc:	6143      	str	r3, [r0, #20]
  4075be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4075c2:	4674      	mov	r4, lr
  4075c4:	e7ab      	b.n	40751e <__mdiff+0x4e>
  4075c6:	4633      	mov	r3, r6
  4075c8:	f106 0414 	add.w	r4, r6, #20
  4075cc:	f102 0514 	add.w	r5, r2, #20
  4075d0:	4616      	mov	r6, r2
  4075d2:	2701      	movs	r7, #1
  4075d4:	4698      	mov	r8, r3
  4075d6:	e7a2      	b.n	40751e <__mdiff+0x4e>

004075d8 <__d2b>:
  4075d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4075dc:	b082      	sub	sp, #8
  4075de:	2101      	movs	r1, #1
  4075e0:	461c      	mov	r4, r3
  4075e2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4075e6:	4615      	mov	r5, r2
  4075e8:	9e08      	ldr	r6, [sp, #32]
  4075ea:	f7ff fd57 	bl	40709c <_Balloc>
  4075ee:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4075f2:	4680      	mov	r8, r0
  4075f4:	b10f      	cbz	r7, 4075fa <__d2b+0x22>
  4075f6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4075fa:	9401      	str	r4, [sp, #4]
  4075fc:	b31d      	cbz	r5, 407646 <__d2b+0x6e>
  4075fe:	a802      	add	r0, sp, #8
  407600:	f840 5d08 	str.w	r5, [r0, #-8]!
  407604:	f7ff fdda 	bl	4071bc <__lo0bits>
  407608:	2800      	cmp	r0, #0
  40760a:	d134      	bne.n	407676 <__d2b+0x9e>
  40760c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407610:	f8c8 2014 	str.w	r2, [r8, #20]
  407614:	2b00      	cmp	r3, #0
  407616:	bf0c      	ite	eq
  407618:	2101      	moveq	r1, #1
  40761a:	2102      	movne	r1, #2
  40761c:	f8c8 3018 	str.w	r3, [r8, #24]
  407620:	f8c8 1010 	str.w	r1, [r8, #16]
  407624:	b9df      	cbnz	r7, 40765e <__d2b+0x86>
  407626:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40762a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40762e:	6030      	str	r0, [r6, #0]
  407630:	6918      	ldr	r0, [r3, #16]
  407632:	f7ff fda3 	bl	40717c <__hi0bits>
  407636:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407638:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40763c:	6018      	str	r0, [r3, #0]
  40763e:	4640      	mov	r0, r8
  407640:	b002      	add	sp, #8
  407642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407646:	a801      	add	r0, sp, #4
  407648:	f7ff fdb8 	bl	4071bc <__lo0bits>
  40764c:	9b01      	ldr	r3, [sp, #4]
  40764e:	f8c8 3014 	str.w	r3, [r8, #20]
  407652:	2101      	movs	r1, #1
  407654:	3020      	adds	r0, #32
  407656:	f8c8 1010 	str.w	r1, [r8, #16]
  40765a:	2f00      	cmp	r7, #0
  40765c:	d0e3      	beq.n	407626 <__d2b+0x4e>
  40765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407660:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407664:	4407      	add	r7, r0
  407666:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40766a:	6037      	str	r7, [r6, #0]
  40766c:	6018      	str	r0, [r3, #0]
  40766e:	4640      	mov	r0, r8
  407670:	b002      	add	sp, #8
  407672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407676:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40767a:	f1c0 0220 	rsb	r2, r0, #32
  40767e:	fa03 f202 	lsl.w	r2, r3, r2
  407682:	430a      	orrs	r2, r1
  407684:	40c3      	lsrs	r3, r0
  407686:	9301      	str	r3, [sp, #4]
  407688:	f8c8 2014 	str.w	r2, [r8, #20]
  40768c:	e7c2      	b.n	407614 <__d2b+0x3c>
  40768e:	bf00      	nop

00407690 <_sbrk_r>:
  407690:	b538      	push	{r3, r4, r5, lr}
  407692:	4c07      	ldr	r4, [pc, #28]	; (4076b0 <_sbrk_r+0x20>)
  407694:	2300      	movs	r3, #0
  407696:	4605      	mov	r5, r0
  407698:	4608      	mov	r0, r1
  40769a:	6023      	str	r3, [r4, #0]
  40769c:	f7fc fa72 	bl	403b84 <_sbrk>
  4076a0:	1c43      	adds	r3, r0, #1
  4076a2:	d000      	beq.n	4076a6 <_sbrk_r+0x16>
  4076a4:	bd38      	pop	{r3, r4, r5, pc}
  4076a6:	6823      	ldr	r3, [r4, #0]
  4076a8:	2b00      	cmp	r3, #0
  4076aa:	d0fb      	beq.n	4076a4 <_sbrk_r+0x14>
  4076ac:	602b      	str	r3, [r5, #0]
  4076ae:	bd38      	pop	{r3, r4, r5, pc}
  4076b0:	20400e9c 	.word	0x20400e9c
	...

004076c0 <strlen>:
  4076c0:	f890 f000 	pld	[r0]
  4076c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4076c8:	f020 0107 	bic.w	r1, r0, #7
  4076cc:	f06f 0c00 	mvn.w	ip, #0
  4076d0:	f010 0407 	ands.w	r4, r0, #7
  4076d4:	f891 f020 	pld	[r1, #32]
  4076d8:	f040 8049 	bne.w	40776e <strlen+0xae>
  4076dc:	f04f 0400 	mov.w	r4, #0
  4076e0:	f06f 0007 	mvn.w	r0, #7
  4076e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4076e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4076ec:	f100 0008 	add.w	r0, r0, #8
  4076f0:	fa82 f24c 	uadd8	r2, r2, ip
  4076f4:	faa4 f28c 	sel	r2, r4, ip
  4076f8:	fa83 f34c 	uadd8	r3, r3, ip
  4076fc:	faa2 f38c 	sel	r3, r2, ip
  407700:	bb4b      	cbnz	r3, 407756 <strlen+0x96>
  407702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407706:	fa82 f24c 	uadd8	r2, r2, ip
  40770a:	f100 0008 	add.w	r0, r0, #8
  40770e:	faa4 f28c 	sel	r2, r4, ip
  407712:	fa83 f34c 	uadd8	r3, r3, ip
  407716:	faa2 f38c 	sel	r3, r2, ip
  40771a:	b9e3      	cbnz	r3, 407756 <strlen+0x96>
  40771c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  407720:	fa82 f24c 	uadd8	r2, r2, ip
  407724:	f100 0008 	add.w	r0, r0, #8
  407728:	faa4 f28c 	sel	r2, r4, ip
  40772c:	fa83 f34c 	uadd8	r3, r3, ip
  407730:	faa2 f38c 	sel	r3, r2, ip
  407734:	b97b      	cbnz	r3, 407756 <strlen+0x96>
  407736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40773a:	f101 0120 	add.w	r1, r1, #32
  40773e:	fa82 f24c 	uadd8	r2, r2, ip
  407742:	f100 0008 	add.w	r0, r0, #8
  407746:	faa4 f28c 	sel	r2, r4, ip
  40774a:	fa83 f34c 	uadd8	r3, r3, ip
  40774e:	faa2 f38c 	sel	r3, r2, ip
  407752:	2b00      	cmp	r3, #0
  407754:	d0c6      	beq.n	4076e4 <strlen+0x24>
  407756:	2a00      	cmp	r2, #0
  407758:	bf04      	itt	eq
  40775a:	3004      	addeq	r0, #4
  40775c:	461a      	moveq	r2, r3
  40775e:	ba12      	rev	r2, r2
  407760:	fab2 f282 	clz	r2, r2
  407764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  407768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40776c:	4770      	bx	lr
  40776e:	e9d1 2300 	ldrd	r2, r3, [r1]
  407772:	f004 0503 	and.w	r5, r4, #3
  407776:	f1c4 0000 	rsb	r0, r4, #0
  40777a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40777e:	f014 0f04 	tst.w	r4, #4
  407782:	f891 f040 	pld	[r1, #64]	; 0x40
  407786:	fa0c f505 	lsl.w	r5, ip, r5
  40778a:	ea62 0205 	orn	r2, r2, r5
  40778e:	bf1c      	itt	ne
  407790:	ea63 0305 	ornne	r3, r3, r5
  407794:	4662      	movne	r2, ip
  407796:	f04f 0400 	mov.w	r4, #0
  40779a:	e7a9      	b.n	4076f0 <strlen+0x30>

0040779c <__ssprint_r>:
  40779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4077a0:	6893      	ldr	r3, [r2, #8]
  4077a2:	b083      	sub	sp, #12
  4077a4:	4690      	mov	r8, r2
  4077a6:	2b00      	cmp	r3, #0
  4077a8:	d070      	beq.n	40788c <__ssprint_r+0xf0>
  4077aa:	4682      	mov	sl, r0
  4077ac:	460c      	mov	r4, r1
  4077ae:	6817      	ldr	r7, [r2, #0]
  4077b0:	688d      	ldr	r5, [r1, #8]
  4077b2:	6808      	ldr	r0, [r1, #0]
  4077b4:	e042      	b.n	40783c <__ssprint_r+0xa0>
  4077b6:	89a3      	ldrh	r3, [r4, #12]
  4077b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4077bc:	d02e      	beq.n	40781c <__ssprint_r+0x80>
  4077be:	6965      	ldr	r5, [r4, #20]
  4077c0:	6921      	ldr	r1, [r4, #16]
  4077c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4077c6:	eba0 0b01 	sub.w	fp, r0, r1
  4077ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4077ce:	f10b 0001 	add.w	r0, fp, #1
  4077d2:	106d      	asrs	r5, r5, #1
  4077d4:	4430      	add	r0, r6
  4077d6:	42a8      	cmp	r0, r5
  4077d8:	462a      	mov	r2, r5
  4077da:	bf84      	itt	hi
  4077dc:	4605      	movhi	r5, r0
  4077de:	462a      	movhi	r2, r5
  4077e0:	055b      	lsls	r3, r3, #21
  4077e2:	d538      	bpl.n	407856 <__ssprint_r+0xba>
  4077e4:	4611      	mov	r1, r2
  4077e6:	4650      	mov	r0, sl
  4077e8:	f7ff f8b0 	bl	40694c <_malloc_r>
  4077ec:	2800      	cmp	r0, #0
  4077ee:	d03c      	beq.n	40786a <__ssprint_r+0xce>
  4077f0:	465a      	mov	r2, fp
  4077f2:	6921      	ldr	r1, [r4, #16]
  4077f4:	9001      	str	r0, [sp, #4]
  4077f6:	f7ff fbab 	bl	406f50 <memcpy>
  4077fa:	89a2      	ldrh	r2, [r4, #12]
  4077fc:	9b01      	ldr	r3, [sp, #4]
  4077fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407806:	81a2      	strh	r2, [r4, #12]
  407808:	eba5 020b 	sub.w	r2, r5, fp
  40780c:	eb03 000b 	add.w	r0, r3, fp
  407810:	6165      	str	r5, [r4, #20]
  407812:	6123      	str	r3, [r4, #16]
  407814:	6020      	str	r0, [r4, #0]
  407816:	60a2      	str	r2, [r4, #8]
  407818:	4635      	mov	r5, r6
  40781a:	46b3      	mov	fp, r6
  40781c:	465a      	mov	r2, fp
  40781e:	4649      	mov	r1, r9
  407820:	f000 fa18 	bl	407c54 <memmove>
  407824:	f8d8 3008 	ldr.w	r3, [r8, #8]
  407828:	68a2      	ldr	r2, [r4, #8]
  40782a:	6820      	ldr	r0, [r4, #0]
  40782c:	1b55      	subs	r5, r2, r5
  40782e:	4458      	add	r0, fp
  407830:	1b9e      	subs	r6, r3, r6
  407832:	60a5      	str	r5, [r4, #8]
  407834:	6020      	str	r0, [r4, #0]
  407836:	f8c8 6008 	str.w	r6, [r8, #8]
  40783a:	b33e      	cbz	r6, 40788c <__ssprint_r+0xf0>
  40783c:	687e      	ldr	r6, [r7, #4]
  40783e:	463b      	mov	r3, r7
  407840:	3708      	adds	r7, #8
  407842:	2e00      	cmp	r6, #0
  407844:	d0fa      	beq.n	40783c <__ssprint_r+0xa0>
  407846:	42ae      	cmp	r6, r5
  407848:	f8d3 9000 	ldr.w	r9, [r3]
  40784c:	46ab      	mov	fp, r5
  40784e:	d2b2      	bcs.n	4077b6 <__ssprint_r+0x1a>
  407850:	4635      	mov	r5, r6
  407852:	46b3      	mov	fp, r6
  407854:	e7e2      	b.n	40781c <__ssprint_r+0x80>
  407856:	4650      	mov	r0, sl
  407858:	f000 fa60 	bl	407d1c <_realloc_r>
  40785c:	4603      	mov	r3, r0
  40785e:	2800      	cmp	r0, #0
  407860:	d1d2      	bne.n	407808 <__ssprint_r+0x6c>
  407862:	6921      	ldr	r1, [r4, #16]
  407864:	4650      	mov	r0, sl
  407866:	f000 f8f9 	bl	407a5c <_free_r>
  40786a:	230c      	movs	r3, #12
  40786c:	f8ca 3000 	str.w	r3, [sl]
  407870:	89a3      	ldrh	r3, [r4, #12]
  407872:	2200      	movs	r2, #0
  407874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407878:	f04f 30ff 	mov.w	r0, #4294967295
  40787c:	81a3      	strh	r3, [r4, #12]
  40787e:	f8c8 2008 	str.w	r2, [r8, #8]
  407882:	f8c8 2004 	str.w	r2, [r8, #4]
  407886:	b003      	add	sp, #12
  407888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40788c:	2000      	movs	r0, #0
  40788e:	f8c8 0004 	str.w	r0, [r8, #4]
  407892:	b003      	add	sp, #12
  407894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407898 <__register_exitproc>:
  407898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40789c:	4d2c      	ldr	r5, [pc, #176]	; (407950 <__register_exitproc+0xb8>)
  40789e:	4606      	mov	r6, r0
  4078a0:	6828      	ldr	r0, [r5, #0]
  4078a2:	4698      	mov	r8, r3
  4078a4:	460f      	mov	r7, r1
  4078a6:	4691      	mov	r9, r2
  4078a8:	f7ff f84c 	bl	406944 <__retarget_lock_acquire_recursive>
  4078ac:	4b29      	ldr	r3, [pc, #164]	; (407954 <__register_exitproc+0xbc>)
  4078ae:	681c      	ldr	r4, [r3, #0]
  4078b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4078b4:	2b00      	cmp	r3, #0
  4078b6:	d03e      	beq.n	407936 <__register_exitproc+0x9e>
  4078b8:	685a      	ldr	r2, [r3, #4]
  4078ba:	2a1f      	cmp	r2, #31
  4078bc:	dc1c      	bgt.n	4078f8 <__register_exitproc+0x60>
  4078be:	f102 0e01 	add.w	lr, r2, #1
  4078c2:	b176      	cbz	r6, 4078e2 <__register_exitproc+0x4a>
  4078c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4078c8:	2401      	movs	r4, #1
  4078ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4078ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4078d2:	4094      	lsls	r4, r2
  4078d4:	4320      	orrs	r0, r4
  4078d6:	2e02      	cmp	r6, #2
  4078d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4078dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4078e0:	d023      	beq.n	40792a <__register_exitproc+0x92>
  4078e2:	3202      	adds	r2, #2
  4078e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4078e8:	6828      	ldr	r0, [r5, #0]
  4078ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4078ee:	f7ff f82b 	bl	406948 <__retarget_lock_release_recursive>
  4078f2:	2000      	movs	r0, #0
  4078f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4078f8:	4b17      	ldr	r3, [pc, #92]	; (407958 <__register_exitproc+0xc0>)
  4078fa:	b30b      	cbz	r3, 407940 <__register_exitproc+0xa8>
  4078fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407900:	f3af 8000 	nop.w
  407904:	4603      	mov	r3, r0
  407906:	b1d8      	cbz	r0, 407940 <__register_exitproc+0xa8>
  407908:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40790c:	6002      	str	r2, [r0, #0]
  40790e:	2100      	movs	r1, #0
  407910:	6041      	str	r1, [r0, #4]
  407912:	460a      	mov	r2, r1
  407914:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  407918:	f04f 0e01 	mov.w	lr, #1
  40791c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407920:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407924:	2e00      	cmp	r6, #0
  407926:	d0dc      	beq.n	4078e2 <__register_exitproc+0x4a>
  407928:	e7cc      	b.n	4078c4 <__register_exitproc+0x2c>
  40792a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40792e:	430c      	orrs	r4, r1
  407930:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407934:	e7d5      	b.n	4078e2 <__register_exitproc+0x4a>
  407936:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40793a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40793e:	e7bb      	b.n	4078b8 <__register_exitproc+0x20>
  407940:	6828      	ldr	r0, [r5, #0]
  407942:	f7ff f801 	bl	406948 <__retarget_lock_release_recursive>
  407946:	f04f 30ff 	mov.w	r0, #4294967295
  40794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40794e:	bf00      	nop
  407950:	20400438 	.word	0x20400438
  407954:	00408cac 	.word	0x00408cac
  407958:	00000000 	.word	0x00000000

0040795c <_calloc_r>:
  40795c:	b510      	push	{r4, lr}
  40795e:	fb02 f101 	mul.w	r1, r2, r1
  407962:	f7fe fff3 	bl	40694c <_malloc_r>
  407966:	4604      	mov	r4, r0
  407968:	b1d8      	cbz	r0, 4079a2 <_calloc_r+0x46>
  40796a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40796e:	f022 0203 	bic.w	r2, r2, #3
  407972:	3a04      	subs	r2, #4
  407974:	2a24      	cmp	r2, #36	; 0x24
  407976:	d818      	bhi.n	4079aa <_calloc_r+0x4e>
  407978:	2a13      	cmp	r2, #19
  40797a:	d914      	bls.n	4079a6 <_calloc_r+0x4a>
  40797c:	2300      	movs	r3, #0
  40797e:	2a1b      	cmp	r2, #27
  407980:	6003      	str	r3, [r0, #0]
  407982:	6043      	str	r3, [r0, #4]
  407984:	d916      	bls.n	4079b4 <_calloc_r+0x58>
  407986:	2a24      	cmp	r2, #36	; 0x24
  407988:	6083      	str	r3, [r0, #8]
  40798a:	60c3      	str	r3, [r0, #12]
  40798c:	bf11      	iteee	ne
  40798e:	f100 0210 	addne.w	r2, r0, #16
  407992:	6103      	streq	r3, [r0, #16]
  407994:	6143      	streq	r3, [r0, #20]
  407996:	f100 0218 	addeq.w	r2, r0, #24
  40799a:	2300      	movs	r3, #0
  40799c:	6013      	str	r3, [r2, #0]
  40799e:	6053      	str	r3, [r2, #4]
  4079a0:	6093      	str	r3, [r2, #8]
  4079a2:	4620      	mov	r0, r4
  4079a4:	bd10      	pop	{r4, pc}
  4079a6:	4602      	mov	r2, r0
  4079a8:	e7f7      	b.n	40799a <_calloc_r+0x3e>
  4079aa:	2100      	movs	r1, #0
  4079ac:	f7fc fd30 	bl	404410 <memset>
  4079b0:	4620      	mov	r0, r4
  4079b2:	bd10      	pop	{r4, pc}
  4079b4:	f100 0208 	add.w	r2, r0, #8
  4079b8:	e7ef      	b.n	40799a <_calloc_r+0x3e>
  4079ba:	bf00      	nop

004079bc <_malloc_trim_r>:
  4079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4079be:	4f24      	ldr	r7, [pc, #144]	; (407a50 <_malloc_trim_r+0x94>)
  4079c0:	460c      	mov	r4, r1
  4079c2:	4606      	mov	r6, r0
  4079c4:	f7ff fb5e 	bl	407084 <__malloc_lock>
  4079c8:	68bb      	ldr	r3, [r7, #8]
  4079ca:	685d      	ldr	r5, [r3, #4]
  4079cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4079d0:	310f      	adds	r1, #15
  4079d2:	f025 0503 	bic.w	r5, r5, #3
  4079d6:	4429      	add	r1, r5
  4079d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4079dc:	f021 010f 	bic.w	r1, r1, #15
  4079e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4079e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4079e8:	db07      	blt.n	4079fa <_malloc_trim_r+0x3e>
  4079ea:	2100      	movs	r1, #0
  4079ec:	4630      	mov	r0, r6
  4079ee:	f7ff fe4f 	bl	407690 <_sbrk_r>
  4079f2:	68bb      	ldr	r3, [r7, #8]
  4079f4:	442b      	add	r3, r5
  4079f6:	4298      	cmp	r0, r3
  4079f8:	d004      	beq.n	407a04 <_malloc_trim_r+0x48>
  4079fa:	4630      	mov	r0, r6
  4079fc:	f7ff fb48 	bl	407090 <__malloc_unlock>
  407a00:	2000      	movs	r0, #0
  407a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a04:	4261      	negs	r1, r4
  407a06:	4630      	mov	r0, r6
  407a08:	f7ff fe42 	bl	407690 <_sbrk_r>
  407a0c:	3001      	adds	r0, #1
  407a0e:	d00d      	beq.n	407a2c <_malloc_trim_r+0x70>
  407a10:	4b10      	ldr	r3, [pc, #64]	; (407a54 <_malloc_trim_r+0x98>)
  407a12:	68ba      	ldr	r2, [r7, #8]
  407a14:	6819      	ldr	r1, [r3, #0]
  407a16:	1b2d      	subs	r5, r5, r4
  407a18:	f045 0501 	orr.w	r5, r5, #1
  407a1c:	4630      	mov	r0, r6
  407a1e:	1b09      	subs	r1, r1, r4
  407a20:	6055      	str	r5, [r2, #4]
  407a22:	6019      	str	r1, [r3, #0]
  407a24:	f7ff fb34 	bl	407090 <__malloc_unlock>
  407a28:	2001      	movs	r0, #1
  407a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407a2c:	2100      	movs	r1, #0
  407a2e:	4630      	mov	r0, r6
  407a30:	f7ff fe2e 	bl	407690 <_sbrk_r>
  407a34:	68ba      	ldr	r2, [r7, #8]
  407a36:	1a83      	subs	r3, r0, r2
  407a38:	2b0f      	cmp	r3, #15
  407a3a:	ddde      	ble.n	4079fa <_malloc_trim_r+0x3e>
  407a3c:	4c06      	ldr	r4, [pc, #24]	; (407a58 <_malloc_trim_r+0x9c>)
  407a3e:	4905      	ldr	r1, [pc, #20]	; (407a54 <_malloc_trim_r+0x98>)
  407a40:	6824      	ldr	r4, [r4, #0]
  407a42:	f043 0301 	orr.w	r3, r3, #1
  407a46:	1b00      	subs	r0, r0, r4
  407a48:	6053      	str	r3, [r2, #4]
  407a4a:	6008      	str	r0, [r1, #0]
  407a4c:	e7d5      	b.n	4079fa <_malloc_trim_r+0x3e>
  407a4e:	bf00      	nop
  407a50:	2040043c 	.word	0x2040043c
  407a54:	20400e1c 	.word	0x20400e1c
  407a58:	20400844 	.word	0x20400844

00407a5c <_free_r>:
  407a5c:	2900      	cmp	r1, #0
  407a5e:	d044      	beq.n	407aea <_free_r+0x8e>
  407a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407a64:	460d      	mov	r5, r1
  407a66:	4680      	mov	r8, r0
  407a68:	f7ff fb0c 	bl	407084 <__malloc_lock>
  407a6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407a70:	4969      	ldr	r1, [pc, #420]	; (407c18 <_free_r+0x1bc>)
  407a72:	f027 0301 	bic.w	r3, r7, #1
  407a76:	f1a5 0408 	sub.w	r4, r5, #8
  407a7a:	18e2      	adds	r2, r4, r3
  407a7c:	688e      	ldr	r6, [r1, #8]
  407a7e:	6850      	ldr	r0, [r2, #4]
  407a80:	42b2      	cmp	r2, r6
  407a82:	f020 0003 	bic.w	r0, r0, #3
  407a86:	d05e      	beq.n	407b46 <_free_r+0xea>
  407a88:	07fe      	lsls	r6, r7, #31
  407a8a:	6050      	str	r0, [r2, #4]
  407a8c:	d40b      	bmi.n	407aa6 <_free_r+0x4a>
  407a8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407a92:	1be4      	subs	r4, r4, r7
  407a94:	f101 0e08 	add.w	lr, r1, #8
  407a98:	68a5      	ldr	r5, [r4, #8]
  407a9a:	4575      	cmp	r5, lr
  407a9c:	443b      	add	r3, r7
  407a9e:	d06d      	beq.n	407b7c <_free_r+0x120>
  407aa0:	68e7      	ldr	r7, [r4, #12]
  407aa2:	60ef      	str	r7, [r5, #12]
  407aa4:	60bd      	str	r5, [r7, #8]
  407aa6:	1815      	adds	r5, r2, r0
  407aa8:	686d      	ldr	r5, [r5, #4]
  407aaa:	07ed      	lsls	r5, r5, #31
  407aac:	d53e      	bpl.n	407b2c <_free_r+0xd0>
  407aae:	f043 0201 	orr.w	r2, r3, #1
  407ab2:	6062      	str	r2, [r4, #4]
  407ab4:	50e3      	str	r3, [r4, r3]
  407ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407aba:	d217      	bcs.n	407aec <_free_r+0x90>
  407abc:	08db      	lsrs	r3, r3, #3
  407abe:	1c58      	adds	r0, r3, #1
  407ac0:	109a      	asrs	r2, r3, #2
  407ac2:	684d      	ldr	r5, [r1, #4]
  407ac4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407ac8:	60a7      	str	r7, [r4, #8]
  407aca:	2301      	movs	r3, #1
  407acc:	4093      	lsls	r3, r2
  407ace:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407ad2:	432b      	orrs	r3, r5
  407ad4:	3a08      	subs	r2, #8
  407ad6:	60e2      	str	r2, [r4, #12]
  407ad8:	604b      	str	r3, [r1, #4]
  407ada:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407ade:	60fc      	str	r4, [r7, #12]
  407ae0:	4640      	mov	r0, r8
  407ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407ae6:	f7ff bad3 	b.w	407090 <__malloc_unlock>
  407aea:	4770      	bx	lr
  407aec:	0a5a      	lsrs	r2, r3, #9
  407aee:	2a04      	cmp	r2, #4
  407af0:	d852      	bhi.n	407b98 <_free_r+0x13c>
  407af2:	099a      	lsrs	r2, r3, #6
  407af4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407af8:	00ff      	lsls	r7, r7, #3
  407afa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407afe:	19c8      	adds	r0, r1, r7
  407b00:	59ca      	ldr	r2, [r1, r7]
  407b02:	3808      	subs	r0, #8
  407b04:	4290      	cmp	r0, r2
  407b06:	d04f      	beq.n	407ba8 <_free_r+0x14c>
  407b08:	6851      	ldr	r1, [r2, #4]
  407b0a:	f021 0103 	bic.w	r1, r1, #3
  407b0e:	428b      	cmp	r3, r1
  407b10:	d232      	bcs.n	407b78 <_free_r+0x11c>
  407b12:	6892      	ldr	r2, [r2, #8]
  407b14:	4290      	cmp	r0, r2
  407b16:	d1f7      	bne.n	407b08 <_free_r+0xac>
  407b18:	68c3      	ldr	r3, [r0, #12]
  407b1a:	60a0      	str	r0, [r4, #8]
  407b1c:	60e3      	str	r3, [r4, #12]
  407b1e:	609c      	str	r4, [r3, #8]
  407b20:	60c4      	str	r4, [r0, #12]
  407b22:	4640      	mov	r0, r8
  407b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407b28:	f7ff bab2 	b.w	407090 <__malloc_unlock>
  407b2c:	6895      	ldr	r5, [r2, #8]
  407b2e:	4f3b      	ldr	r7, [pc, #236]	; (407c1c <_free_r+0x1c0>)
  407b30:	42bd      	cmp	r5, r7
  407b32:	4403      	add	r3, r0
  407b34:	d040      	beq.n	407bb8 <_free_r+0x15c>
  407b36:	68d0      	ldr	r0, [r2, #12]
  407b38:	60e8      	str	r0, [r5, #12]
  407b3a:	f043 0201 	orr.w	r2, r3, #1
  407b3e:	6085      	str	r5, [r0, #8]
  407b40:	6062      	str	r2, [r4, #4]
  407b42:	50e3      	str	r3, [r4, r3]
  407b44:	e7b7      	b.n	407ab6 <_free_r+0x5a>
  407b46:	07ff      	lsls	r7, r7, #31
  407b48:	4403      	add	r3, r0
  407b4a:	d407      	bmi.n	407b5c <_free_r+0x100>
  407b4c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407b50:	1aa4      	subs	r4, r4, r2
  407b52:	4413      	add	r3, r2
  407b54:	68a0      	ldr	r0, [r4, #8]
  407b56:	68e2      	ldr	r2, [r4, #12]
  407b58:	60c2      	str	r2, [r0, #12]
  407b5a:	6090      	str	r0, [r2, #8]
  407b5c:	4a30      	ldr	r2, [pc, #192]	; (407c20 <_free_r+0x1c4>)
  407b5e:	6812      	ldr	r2, [r2, #0]
  407b60:	f043 0001 	orr.w	r0, r3, #1
  407b64:	4293      	cmp	r3, r2
  407b66:	6060      	str	r0, [r4, #4]
  407b68:	608c      	str	r4, [r1, #8]
  407b6a:	d3b9      	bcc.n	407ae0 <_free_r+0x84>
  407b6c:	4b2d      	ldr	r3, [pc, #180]	; (407c24 <_free_r+0x1c8>)
  407b6e:	4640      	mov	r0, r8
  407b70:	6819      	ldr	r1, [r3, #0]
  407b72:	f7ff ff23 	bl	4079bc <_malloc_trim_r>
  407b76:	e7b3      	b.n	407ae0 <_free_r+0x84>
  407b78:	4610      	mov	r0, r2
  407b7a:	e7cd      	b.n	407b18 <_free_r+0xbc>
  407b7c:	1811      	adds	r1, r2, r0
  407b7e:	6849      	ldr	r1, [r1, #4]
  407b80:	07c9      	lsls	r1, r1, #31
  407b82:	d444      	bmi.n	407c0e <_free_r+0x1b2>
  407b84:	6891      	ldr	r1, [r2, #8]
  407b86:	68d2      	ldr	r2, [r2, #12]
  407b88:	60ca      	str	r2, [r1, #12]
  407b8a:	4403      	add	r3, r0
  407b8c:	f043 0001 	orr.w	r0, r3, #1
  407b90:	6091      	str	r1, [r2, #8]
  407b92:	6060      	str	r0, [r4, #4]
  407b94:	50e3      	str	r3, [r4, r3]
  407b96:	e7a3      	b.n	407ae0 <_free_r+0x84>
  407b98:	2a14      	cmp	r2, #20
  407b9a:	d816      	bhi.n	407bca <_free_r+0x16e>
  407b9c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407ba0:	00ff      	lsls	r7, r7, #3
  407ba2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407ba6:	e7aa      	b.n	407afe <_free_r+0xa2>
  407ba8:	10aa      	asrs	r2, r5, #2
  407baa:	2301      	movs	r3, #1
  407bac:	684d      	ldr	r5, [r1, #4]
  407bae:	4093      	lsls	r3, r2
  407bb0:	432b      	orrs	r3, r5
  407bb2:	604b      	str	r3, [r1, #4]
  407bb4:	4603      	mov	r3, r0
  407bb6:	e7b0      	b.n	407b1a <_free_r+0xbe>
  407bb8:	f043 0201 	orr.w	r2, r3, #1
  407bbc:	614c      	str	r4, [r1, #20]
  407bbe:	610c      	str	r4, [r1, #16]
  407bc0:	60e5      	str	r5, [r4, #12]
  407bc2:	60a5      	str	r5, [r4, #8]
  407bc4:	6062      	str	r2, [r4, #4]
  407bc6:	50e3      	str	r3, [r4, r3]
  407bc8:	e78a      	b.n	407ae0 <_free_r+0x84>
  407bca:	2a54      	cmp	r2, #84	; 0x54
  407bcc:	d806      	bhi.n	407bdc <_free_r+0x180>
  407bce:	0b1a      	lsrs	r2, r3, #12
  407bd0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407bd4:	00ff      	lsls	r7, r7, #3
  407bd6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407bda:	e790      	b.n	407afe <_free_r+0xa2>
  407bdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407be0:	d806      	bhi.n	407bf0 <_free_r+0x194>
  407be2:	0bda      	lsrs	r2, r3, #15
  407be4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407be8:	00ff      	lsls	r7, r7, #3
  407bea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407bee:	e786      	b.n	407afe <_free_r+0xa2>
  407bf0:	f240 5054 	movw	r0, #1364	; 0x554
  407bf4:	4282      	cmp	r2, r0
  407bf6:	d806      	bhi.n	407c06 <_free_r+0x1aa>
  407bf8:	0c9a      	lsrs	r2, r3, #18
  407bfa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407bfe:	00ff      	lsls	r7, r7, #3
  407c00:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407c04:	e77b      	b.n	407afe <_free_r+0xa2>
  407c06:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407c0a:	257e      	movs	r5, #126	; 0x7e
  407c0c:	e777      	b.n	407afe <_free_r+0xa2>
  407c0e:	f043 0101 	orr.w	r1, r3, #1
  407c12:	6061      	str	r1, [r4, #4]
  407c14:	6013      	str	r3, [r2, #0]
  407c16:	e763      	b.n	407ae0 <_free_r+0x84>
  407c18:	2040043c 	.word	0x2040043c
  407c1c:	20400444 	.word	0x20400444
  407c20:	20400848 	.word	0x20400848
  407c24:	20400e4c 	.word	0x20400e4c

00407c28 <__ascii_mbtowc>:
  407c28:	b082      	sub	sp, #8
  407c2a:	b149      	cbz	r1, 407c40 <__ascii_mbtowc+0x18>
  407c2c:	b15a      	cbz	r2, 407c46 <__ascii_mbtowc+0x1e>
  407c2e:	b16b      	cbz	r3, 407c4c <__ascii_mbtowc+0x24>
  407c30:	7813      	ldrb	r3, [r2, #0]
  407c32:	600b      	str	r3, [r1, #0]
  407c34:	7812      	ldrb	r2, [r2, #0]
  407c36:	1c10      	adds	r0, r2, #0
  407c38:	bf18      	it	ne
  407c3a:	2001      	movne	r0, #1
  407c3c:	b002      	add	sp, #8
  407c3e:	4770      	bx	lr
  407c40:	a901      	add	r1, sp, #4
  407c42:	2a00      	cmp	r2, #0
  407c44:	d1f3      	bne.n	407c2e <__ascii_mbtowc+0x6>
  407c46:	4610      	mov	r0, r2
  407c48:	b002      	add	sp, #8
  407c4a:	4770      	bx	lr
  407c4c:	f06f 0001 	mvn.w	r0, #1
  407c50:	e7f4      	b.n	407c3c <__ascii_mbtowc+0x14>
  407c52:	bf00      	nop

00407c54 <memmove>:
  407c54:	4288      	cmp	r0, r1
  407c56:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c58:	d90d      	bls.n	407c76 <memmove+0x22>
  407c5a:	188b      	adds	r3, r1, r2
  407c5c:	4298      	cmp	r0, r3
  407c5e:	d20a      	bcs.n	407c76 <memmove+0x22>
  407c60:	1884      	adds	r4, r0, r2
  407c62:	2a00      	cmp	r2, #0
  407c64:	d051      	beq.n	407d0a <memmove+0xb6>
  407c66:	4622      	mov	r2, r4
  407c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407c6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407c70:	4299      	cmp	r1, r3
  407c72:	d1f9      	bne.n	407c68 <memmove+0x14>
  407c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c76:	2a0f      	cmp	r2, #15
  407c78:	d948      	bls.n	407d0c <memmove+0xb8>
  407c7a:	ea41 0300 	orr.w	r3, r1, r0
  407c7e:	079b      	lsls	r3, r3, #30
  407c80:	d146      	bne.n	407d10 <memmove+0xbc>
  407c82:	f100 0410 	add.w	r4, r0, #16
  407c86:	f101 0310 	add.w	r3, r1, #16
  407c8a:	4615      	mov	r5, r2
  407c8c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407c90:	f844 6c10 	str.w	r6, [r4, #-16]
  407c94:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407c98:	f844 6c0c 	str.w	r6, [r4, #-12]
  407c9c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407ca0:	f844 6c08 	str.w	r6, [r4, #-8]
  407ca4:	3d10      	subs	r5, #16
  407ca6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407caa:	f844 6c04 	str.w	r6, [r4, #-4]
  407cae:	2d0f      	cmp	r5, #15
  407cb0:	f103 0310 	add.w	r3, r3, #16
  407cb4:	f104 0410 	add.w	r4, r4, #16
  407cb8:	d8e8      	bhi.n	407c8c <memmove+0x38>
  407cba:	f1a2 0310 	sub.w	r3, r2, #16
  407cbe:	f023 030f 	bic.w	r3, r3, #15
  407cc2:	f002 0e0f 	and.w	lr, r2, #15
  407cc6:	3310      	adds	r3, #16
  407cc8:	f1be 0f03 	cmp.w	lr, #3
  407ccc:	4419      	add	r1, r3
  407cce:	4403      	add	r3, r0
  407cd0:	d921      	bls.n	407d16 <memmove+0xc2>
  407cd2:	1f1e      	subs	r6, r3, #4
  407cd4:	460d      	mov	r5, r1
  407cd6:	4674      	mov	r4, lr
  407cd8:	3c04      	subs	r4, #4
  407cda:	f855 7b04 	ldr.w	r7, [r5], #4
  407cde:	f846 7f04 	str.w	r7, [r6, #4]!
  407ce2:	2c03      	cmp	r4, #3
  407ce4:	d8f8      	bhi.n	407cd8 <memmove+0x84>
  407ce6:	f1ae 0404 	sub.w	r4, lr, #4
  407cea:	f024 0403 	bic.w	r4, r4, #3
  407cee:	3404      	adds	r4, #4
  407cf0:	4421      	add	r1, r4
  407cf2:	4423      	add	r3, r4
  407cf4:	f002 0203 	and.w	r2, r2, #3
  407cf8:	b162      	cbz	r2, 407d14 <memmove+0xc0>
  407cfa:	3b01      	subs	r3, #1
  407cfc:	440a      	add	r2, r1
  407cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
  407d02:	f803 4f01 	strb.w	r4, [r3, #1]!
  407d06:	428a      	cmp	r2, r1
  407d08:	d1f9      	bne.n	407cfe <memmove+0xaa>
  407d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d0c:	4603      	mov	r3, r0
  407d0e:	e7f3      	b.n	407cf8 <memmove+0xa4>
  407d10:	4603      	mov	r3, r0
  407d12:	e7f2      	b.n	407cfa <memmove+0xa6>
  407d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d16:	4672      	mov	r2, lr
  407d18:	e7ee      	b.n	407cf8 <memmove+0xa4>
  407d1a:	bf00      	nop

00407d1c <_realloc_r>:
  407d1c:	2900      	cmp	r1, #0
  407d1e:	f000 8095 	beq.w	407e4c <_realloc_r+0x130>
  407d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d26:	460d      	mov	r5, r1
  407d28:	4616      	mov	r6, r2
  407d2a:	b083      	sub	sp, #12
  407d2c:	4680      	mov	r8, r0
  407d2e:	f106 070b 	add.w	r7, r6, #11
  407d32:	f7ff f9a7 	bl	407084 <__malloc_lock>
  407d36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407d3a:	2f16      	cmp	r7, #22
  407d3c:	f02e 0403 	bic.w	r4, lr, #3
  407d40:	f1a5 0908 	sub.w	r9, r5, #8
  407d44:	d83c      	bhi.n	407dc0 <_realloc_r+0xa4>
  407d46:	2210      	movs	r2, #16
  407d48:	4617      	mov	r7, r2
  407d4a:	42be      	cmp	r6, r7
  407d4c:	d83d      	bhi.n	407dca <_realloc_r+0xae>
  407d4e:	4294      	cmp	r4, r2
  407d50:	da43      	bge.n	407dda <_realloc_r+0xbe>
  407d52:	4bc4      	ldr	r3, [pc, #784]	; (408064 <_realloc_r+0x348>)
  407d54:	6899      	ldr	r1, [r3, #8]
  407d56:	eb09 0004 	add.w	r0, r9, r4
  407d5a:	4288      	cmp	r0, r1
  407d5c:	f000 80b4 	beq.w	407ec8 <_realloc_r+0x1ac>
  407d60:	6843      	ldr	r3, [r0, #4]
  407d62:	f023 0101 	bic.w	r1, r3, #1
  407d66:	4401      	add	r1, r0
  407d68:	6849      	ldr	r1, [r1, #4]
  407d6a:	07c9      	lsls	r1, r1, #31
  407d6c:	d54c      	bpl.n	407e08 <_realloc_r+0xec>
  407d6e:	f01e 0f01 	tst.w	lr, #1
  407d72:	f000 809b 	beq.w	407eac <_realloc_r+0x190>
  407d76:	4631      	mov	r1, r6
  407d78:	4640      	mov	r0, r8
  407d7a:	f7fe fde7 	bl	40694c <_malloc_r>
  407d7e:	4606      	mov	r6, r0
  407d80:	2800      	cmp	r0, #0
  407d82:	d03a      	beq.n	407dfa <_realloc_r+0xde>
  407d84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407d88:	f023 0301 	bic.w	r3, r3, #1
  407d8c:	444b      	add	r3, r9
  407d8e:	f1a0 0208 	sub.w	r2, r0, #8
  407d92:	429a      	cmp	r2, r3
  407d94:	f000 8121 	beq.w	407fda <_realloc_r+0x2be>
  407d98:	1f22      	subs	r2, r4, #4
  407d9a:	2a24      	cmp	r2, #36	; 0x24
  407d9c:	f200 8107 	bhi.w	407fae <_realloc_r+0x292>
  407da0:	2a13      	cmp	r2, #19
  407da2:	f200 80db 	bhi.w	407f5c <_realloc_r+0x240>
  407da6:	4603      	mov	r3, r0
  407da8:	462a      	mov	r2, r5
  407daa:	6811      	ldr	r1, [r2, #0]
  407dac:	6019      	str	r1, [r3, #0]
  407dae:	6851      	ldr	r1, [r2, #4]
  407db0:	6059      	str	r1, [r3, #4]
  407db2:	6892      	ldr	r2, [r2, #8]
  407db4:	609a      	str	r2, [r3, #8]
  407db6:	4629      	mov	r1, r5
  407db8:	4640      	mov	r0, r8
  407dba:	f7ff fe4f 	bl	407a5c <_free_r>
  407dbe:	e01c      	b.n	407dfa <_realloc_r+0xde>
  407dc0:	f027 0707 	bic.w	r7, r7, #7
  407dc4:	2f00      	cmp	r7, #0
  407dc6:	463a      	mov	r2, r7
  407dc8:	dabf      	bge.n	407d4a <_realloc_r+0x2e>
  407dca:	2600      	movs	r6, #0
  407dcc:	230c      	movs	r3, #12
  407dce:	4630      	mov	r0, r6
  407dd0:	f8c8 3000 	str.w	r3, [r8]
  407dd4:	b003      	add	sp, #12
  407dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dda:	462e      	mov	r6, r5
  407ddc:	1be3      	subs	r3, r4, r7
  407dde:	2b0f      	cmp	r3, #15
  407de0:	d81e      	bhi.n	407e20 <_realloc_r+0x104>
  407de2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407de6:	f003 0301 	and.w	r3, r3, #1
  407dea:	4323      	orrs	r3, r4
  407dec:	444c      	add	r4, r9
  407dee:	f8c9 3004 	str.w	r3, [r9, #4]
  407df2:	6863      	ldr	r3, [r4, #4]
  407df4:	f043 0301 	orr.w	r3, r3, #1
  407df8:	6063      	str	r3, [r4, #4]
  407dfa:	4640      	mov	r0, r8
  407dfc:	f7ff f948 	bl	407090 <__malloc_unlock>
  407e00:	4630      	mov	r0, r6
  407e02:	b003      	add	sp, #12
  407e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e08:	f023 0303 	bic.w	r3, r3, #3
  407e0c:	18e1      	adds	r1, r4, r3
  407e0e:	4291      	cmp	r1, r2
  407e10:	db1f      	blt.n	407e52 <_realloc_r+0x136>
  407e12:	68c3      	ldr	r3, [r0, #12]
  407e14:	6882      	ldr	r2, [r0, #8]
  407e16:	462e      	mov	r6, r5
  407e18:	60d3      	str	r3, [r2, #12]
  407e1a:	460c      	mov	r4, r1
  407e1c:	609a      	str	r2, [r3, #8]
  407e1e:	e7dd      	b.n	407ddc <_realloc_r+0xc0>
  407e20:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407e24:	eb09 0107 	add.w	r1, r9, r7
  407e28:	f002 0201 	and.w	r2, r2, #1
  407e2c:	444c      	add	r4, r9
  407e2e:	f043 0301 	orr.w	r3, r3, #1
  407e32:	4317      	orrs	r7, r2
  407e34:	f8c9 7004 	str.w	r7, [r9, #4]
  407e38:	604b      	str	r3, [r1, #4]
  407e3a:	6863      	ldr	r3, [r4, #4]
  407e3c:	f043 0301 	orr.w	r3, r3, #1
  407e40:	3108      	adds	r1, #8
  407e42:	6063      	str	r3, [r4, #4]
  407e44:	4640      	mov	r0, r8
  407e46:	f7ff fe09 	bl	407a5c <_free_r>
  407e4a:	e7d6      	b.n	407dfa <_realloc_r+0xde>
  407e4c:	4611      	mov	r1, r2
  407e4e:	f7fe bd7d 	b.w	40694c <_malloc_r>
  407e52:	f01e 0f01 	tst.w	lr, #1
  407e56:	d18e      	bne.n	407d76 <_realloc_r+0x5a>
  407e58:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e5c:	eba9 0a01 	sub.w	sl, r9, r1
  407e60:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e64:	f021 0103 	bic.w	r1, r1, #3
  407e68:	440b      	add	r3, r1
  407e6a:	4423      	add	r3, r4
  407e6c:	4293      	cmp	r3, r2
  407e6e:	db25      	blt.n	407ebc <_realloc_r+0x1a0>
  407e70:	68c2      	ldr	r2, [r0, #12]
  407e72:	6881      	ldr	r1, [r0, #8]
  407e74:	4656      	mov	r6, sl
  407e76:	60ca      	str	r2, [r1, #12]
  407e78:	6091      	str	r1, [r2, #8]
  407e7a:	f8da 100c 	ldr.w	r1, [sl, #12]
  407e7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407e82:	1f22      	subs	r2, r4, #4
  407e84:	2a24      	cmp	r2, #36	; 0x24
  407e86:	60c1      	str	r1, [r0, #12]
  407e88:	6088      	str	r0, [r1, #8]
  407e8a:	f200 8094 	bhi.w	407fb6 <_realloc_r+0x29a>
  407e8e:	2a13      	cmp	r2, #19
  407e90:	d96f      	bls.n	407f72 <_realloc_r+0x256>
  407e92:	6829      	ldr	r1, [r5, #0]
  407e94:	f8ca 1008 	str.w	r1, [sl, #8]
  407e98:	6869      	ldr	r1, [r5, #4]
  407e9a:	f8ca 100c 	str.w	r1, [sl, #12]
  407e9e:	2a1b      	cmp	r2, #27
  407ea0:	f200 80a2 	bhi.w	407fe8 <_realloc_r+0x2cc>
  407ea4:	3508      	adds	r5, #8
  407ea6:	f10a 0210 	add.w	r2, sl, #16
  407eaa:	e063      	b.n	407f74 <_realloc_r+0x258>
  407eac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407eb0:	eba9 0a03 	sub.w	sl, r9, r3
  407eb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  407eb8:	f021 0103 	bic.w	r1, r1, #3
  407ebc:	1863      	adds	r3, r4, r1
  407ebe:	4293      	cmp	r3, r2
  407ec0:	f6ff af59 	blt.w	407d76 <_realloc_r+0x5a>
  407ec4:	4656      	mov	r6, sl
  407ec6:	e7d8      	b.n	407e7a <_realloc_r+0x15e>
  407ec8:	6841      	ldr	r1, [r0, #4]
  407eca:	f021 0b03 	bic.w	fp, r1, #3
  407ece:	44a3      	add	fp, r4
  407ed0:	f107 0010 	add.w	r0, r7, #16
  407ed4:	4583      	cmp	fp, r0
  407ed6:	da56      	bge.n	407f86 <_realloc_r+0x26a>
  407ed8:	f01e 0f01 	tst.w	lr, #1
  407edc:	f47f af4b 	bne.w	407d76 <_realloc_r+0x5a>
  407ee0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407ee4:	eba9 0a01 	sub.w	sl, r9, r1
  407ee8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407eec:	f021 0103 	bic.w	r1, r1, #3
  407ef0:	448b      	add	fp, r1
  407ef2:	4558      	cmp	r0, fp
  407ef4:	dce2      	bgt.n	407ebc <_realloc_r+0x1a0>
  407ef6:	4656      	mov	r6, sl
  407ef8:	f8da 100c 	ldr.w	r1, [sl, #12]
  407efc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407f00:	1f22      	subs	r2, r4, #4
  407f02:	2a24      	cmp	r2, #36	; 0x24
  407f04:	60c1      	str	r1, [r0, #12]
  407f06:	6088      	str	r0, [r1, #8]
  407f08:	f200 808f 	bhi.w	40802a <_realloc_r+0x30e>
  407f0c:	2a13      	cmp	r2, #19
  407f0e:	f240 808a 	bls.w	408026 <_realloc_r+0x30a>
  407f12:	6829      	ldr	r1, [r5, #0]
  407f14:	f8ca 1008 	str.w	r1, [sl, #8]
  407f18:	6869      	ldr	r1, [r5, #4]
  407f1a:	f8ca 100c 	str.w	r1, [sl, #12]
  407f1e:	2a1b      	cmp	r2, #27
  407f20:	f200 808a 	bhi.w	408038 <_realloc_r+0x31c>
  407f24:	3508      	adds	r5, #8
  407f26:	f10a 0210 	add.w	r2, sl, #16
  407f2a:	6829      	ldr	r1, [r5, #0]
  407f2c:	6011      	str	r1, [r2, #0]
  407f2e:	6869      	ldr	r1, [r5, #4]
  407f30:	6051      	str	r1, [r2, #4]
  407f32:	68a9      	ldr	r1, [r5, #8]
  407f34:	6091      	str	r1, [r2, #8]
  407f36:	eb0a 0107 	add.w	r1, sl, r7
  407f3a:	ebab 0207 	sub.w	r2, fp, r7
  407f3e:	f042 0201 	orr.w	r2, r2, #1
  407f42:	6099      	str	r1, [r3, #8]
  407f44:	604a      	str	r2, [r1, #4]
  407f46:	f8da 3004 	ldr.w	r3, [sl, #4]
  407f4a:	f003 0301 	and.w	r3, r3, #1
  407f4e:	431f      	orrs	r7, r3
  407f50:	4640      	mov	r0, r8
  407f52:	f8ca 7004 	str.w	r7, [sl, #4]
  407f56:	f7ff f89b 	bl	407090 <__malloc_unlock>
  407f5a:	e751      	b.n	407e00 <_realloc_r+0xe4>
  407f5c:	682b      	ldr	r3, [r5, #0]
  407f5e:	6003      	str	r3, [r0, #0]
  407f60:	686b      	ldr	r3, [r5, #4]
  407f62:	6043      	str	r3, [r0, #4]
  407f64:	2a1b      	cmp	r2, #27
  407f66:	d82d      	bhi.n	407fc4 <_realloc_r+0x2a8>
  407f68:	f100 0308 	add.w	r3, r0, #8
  407f6c:	f105 0208 	add.w	r2, r5, #8
  407f70:	e71b      	b.n	407daa <_realloc_r+0x8e>
  407f72:	4632      	mov	r2, r6
  407f74:	6829      	ldr	r1, [r5, #0]
  407f76:	6011      	str	r1, [r2, #0]
  407f78:	6869      	ldr	r1, [r5, #4]
  407f7a:	6051      	str	r1, [r2, #4]
  407f7c:	68a9      	ldr	r1, [r5, #8]
  407f7e:	6091      	str	r1, [r2, #8]
  407f80:	461c      	mov	r4, r3
  407f82:	46d1      	mov	r9, sl
  407f84:	e72a      	b.n	407ddc <_realloc_r+0xc0>
  407f86:	eb09 0107 	add.w	r1, r9, r7
  407f8a:	ebab 0b07 	sub.w	fp, fp, r7
  407f8e:	f04b 0201 	orr.w	r2, fp, #1
  407f92:	6099      	str	r1, [r3, #8]
  407f94:	604a      	str	r2, [r1, #4]
  407f96:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407f9a:	f003 0301 	and.w	r3, r3, #1
  407f9e:	431f      	orrs	r7, r3
  407fa0:	4640      	mov	r0, r8
  407fa2:	f845 7c04 	str.w	r7, [r5, #-4]
  407fa6:	f7ff f873 	bl	407090 <__malloc_unlock>
  407faa:	462e      	mov	r6, r5
  407fac:	e728      	b.n	407e00 <_realloc_r+0xe4>
  407fae:	4629      	mov	r1, r5
  407fb0:	f7ff fe50 	bl	407c54 <memmove>
  407fb4:	e6ff      	b.n	407db6 <_realloc_r+0x9a>
  407fb6:	4629      	mov	r1, r5
  407fb8:	4630      	mov	r0, r6
  407fba:	461c      	mov	r4, r3
  407fbc:	46d1      	mov	r9, sl
  407fbe:	f7ff fe49 	bl	407c54 <memmove>
  407fc2:	e70b      	b.n	407ddc <_realloc_r+0xc0>
  407fc4:	68ab      	ldr	r3, [r5, #8]
  407fc6:	6083      	str	r3, [r0, #8]
  407fc8:	68eb      	ldr	r3, [r5, #12]
  407fca:	60c3      	str	r3, [r0, #12]
  407fcc:	2a24      	cmp	r2, #36	; 0x24
  407fce:	d017      	beq.n	408000 <_realloc_r+0x2e4>
  407fd0:	f100 0310 	add.w	r3, r0, #16
  407fd4:	f105 0210 	add.w	r2, r5, #16
  407fd8:	e6e7      	b.n	407daa <_realloc_r+0x8e>
  407fda:	f850 3c04 	ldr.w	r3, [r0, #-4]
  407fde:	f023 0303 	bic.w	r3, r3, #3
  407fe2:	441c      	add	r4, r3
  407fe4:	462e      	mov	r6, r5
  407fe6:	e6f9      	b.n	407ddc <_realloc_r+0xc0>
  407fe8:	68a9      	ldr	r1, [r5, #8]
  407fea:	f8ca 1010 	str.w	r1, [sl, #16]
  407fee:	68e9      	ldr	r1, [r5, #12]
  407ff0:	f8ca 1014 	str.w	r1, [sl, #20]
  407ff4:	2a24      	cmp	r2, #36	; 0x24
  407ff6:	d00c      	beq.n	408012 <_realloc_r+0x2f6>
  407ff8:	3510      	adds	r5, #16
  407ffa:	f10a 0218 	add.w	r2, sl, #24
  407ffe:	e7b9      	b.n	407f74 <_realloc_r+0x258>
  408000:	692b      	ldr	r3, [r5, #16]
  408002:	6103      	str	r3, [r0, #16]
  408004:	696b      	ldr	r3, [r5, #20]
  408006:	6143      	str	r3, [r0, #20]
  408008:	f105 0218 	add.w	r2, r5, #24
  40800c:	f100 0318 	add.w	r3, r0, #24
  408010:	e6cb      	b.n	407daa <_realloc_r+0x8e>
  408012:	692a      	ldr	r2, [r5, #16]
  408014:	f8ca 2018 	str.w	r2, [sl, #24]
  408018:	696a      	ldr	r2, [r5, #20]
  40801a:	f8ca 201c 	str.w	r2, [sl, #28]
  40801e:	3518      	adds	r5, #24
  408020:	f10a 0220 	add.w	r2, sl, #32
  408024:	e7a6      	b.n	407f74 <_realloc_r+0x258>
  408026:	4632      	mov	r2, r6
  408028:	e77f      	b.n	407f2a <_realloc_r+0x20e>
  40802a:	4629      	mov	r1, r5
  40802c:	4630      	mov	r0, r6
  40802e:	9301      	str	r3, [sp, #4]
  408030:	f7ff fe10 	bl	407c54 <memmove>
  408034:	9b01      	ldr	r3, [sp, #4]
  408036:	e77e      	b.n	407f36 <_realloc_r+0x21a>
  408038:	68a9      	ldr	r1, [r5, #8]
  40803a:	f8ca 1010 	str.w	r1, [sl, #16]
  40803e:	68e9      	ldr	r1, [r5, #12]
  408040:	f8ca 1014 	str.w	r1, [sl, #20]
  408044:	2a24      	cmp	r2, #36	; 0x24
  408046:	d003      	beq.n	408050 <_realloc_r+0x334>
  408048:	3510      	adds	r5, #16
  40804a:	f10a 0218 	add.w	r2, sl, #24
  40804e:	e76c      	b.n	407f2a <_realloc_r+0x20e>
  408050:	692a      	ldr	r2, [r5, #16]
  408052:	f8ca 2018 	str.w	r2, [sl, #24]
  408056:	696a      	ldr	r2, [r5, #20]
  408058:	f8ca 201c 	str.w	r2, [sl, #28]
  40805c:	3518      	adds	r5, #24
  40805e:	f10a 0220 	add.w	r2, sl, #32
  408062:	e762      	b.n	407f2a <_realloc_r+0x20e>
  408064:	2040043c 	.word	0x2040043c

00408068 <__ascii_wctomb>:
  408068:	b121      	cbz	r1, 408074 <__ascii_wctomb+0xc>
  40806a:	2aff      	cmp	r2, #255	; 0xff
  40806c:	d804      	bhi.n	408078 <__ascii_wctomb+0x10>
  40806e:	700a      	strb	r2, [r1, #0]
  408070:	2001      	movs	r0, #1
  408072:	4770      	bx	lr
  408074:	4608      	mov	r0, r1
  408076:	4770      	bx	lr
  408078:	238a      	movs	r3, #138	; 0x8a
  40807a:	6003      	str	r3, [r0, #0]
  40807c:	f04f 30ff 	mov.w	r0, #4294967295
  408080:	4770      	bx	lr
  408082:	bf00      	nop

00408084 <__gedf2>:
  408084:	f04f 3cff 	mov.w	ip, #4294967295
  408088:	e006      	b.n	408098 <__cmpdf2+0x4>
  40808a:	bf00      	nop

0040808c <__ledf2>:
  40808c:	f04f 0c01 	mov.w	ip, #1
  408090:	e002      	b.n	408098 <__cmpdf2+0x4>
  408092:	bf00      	nop

00408094 <__cmpdf2>:
  408094:	f04f 0c01 	mov.w	ip, #1
  408098:	f84d cd04 	str.w	ip, [sp, #-4]!
  40809c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4080a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4080a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4080a8:	bf18      	it	ne
  4080aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4080ae:	d01b      	beq.n	4080e8 <__cmpdf2+0x54>
  4080b0:	b001      	add	sp, #4
  4080b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4080b6:	bf0c      	ite	eq
  4080b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4080bc:	ea91 0f03 	teqne	r1, r3
  4080c0:	bf02      	ittt	eq
  4080c2:	ea90 0f02 	teqeq	r0, r2
  4080c6:	2000      	moveq	r0, #0
  4080c8:	4770      	bxeq	lr
  4080ca:	f110 0f00 	cmn.w	r0, #0
  4080ce:	ea91 0f03 	teq	r1, r3
  4080d2:	bf58      	it	pl
  4080d4:	4299      	cmppl	r1, r3
  4080d6:	bf08      	it	eq
  4080d8:	4290      	cmpeq	r0, r2
  4080da:	bf2c      	ite	cs
  4080dc:	17d8      	asrcs	r0, r3, #31
  4080de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4080e2:	f040 0001 	orr.w	r0, r0, #1
  4080e6:	4770      	bx	lr
  4080e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4080ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4080f0:	d102      	bne.n	4080f8 <__cmpdf2+0x64>
  4080f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4080f6:	d107      	bne.n	408108 <__cmpdf2+0x74>
  4080f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4080fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  408100:	d1d6      	bne.n	4080b0 <__cmpdf2+0x1c>
  408102:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  408106:	d0d3      	beq.n	4080b0 <__cmpdf2+0x1c>
  408108:	f85d 0b04 	ldr.w	r0, [sp], #4
  40810c:	4770      	bx	lr
  40810e:	bf00      	nop

00408110 <__aeabi_cdrcmple>:
  408110:	4684      	mov	ip, r0
  408112:	4610      	mov	r0, r2
  408114:	4662      	mov	r2, ip
  408116:	468c      	mov	ip, r1
  408118:	4619      	mov	r1, r3
  40811a:	4663      	mov	r3, ip
  40811c:	e000      	b.n	408120 <__aeabi_cdcmpeq>
  40811e:	bf00      	nop

00408120 <__aeabi_cdcmpeq>:
  408120:	b501      	push	{r0, lr}
  408122:	f7ff ffb7 	bl	408094 <__cmpdf2>
  408126:	2800      	cmp	r0, #0
  408128:	bf48      	it	mi
  40812a:	f110 0f00 	cmnmi.w	r0, #0
  40812e:	bd01      	pop	{r0, pc}

00408130 <__aeabi_dcmpeq>:
  408130:	f84d ed08 	str.w	lr, [sp, #-8]!
  408134:	f7ff fff4 	bl	408120 <__aeabi_cdcmpeq>
  408138:	bf0c      	ite	eq
  40813a:	2001      	moveq	r0, #1
  40813c:	2000      	movne	r0, #0
  40813e:	f85d fb08 	ldr.w	pc, [sp], #8
  408142:	bf00      	nop

00408144 <__aeabi_dcmplt>:
  408144:	f84d ed08 	str.w	lr, [sp, #-8]!
  408148:	f7ff ffea 	bl	408120 <__aeabi_cdcmpeq>
  40814c:	bf34      	ite	cc
  40814e:	2001      	movcc	r0, #1
  408150:	2000      	movcs	r0, #0
  408152:	f85d fb08 	ldr.w	pc, [sp], #8
  408156:	bf00      	nop

00408158 <__aeabi_dcmple>:
  408158:	f84d ed08 	str.w	lr, [sp, #-8]!
  40815c:	f7ff ffe0 	bl	408120 <__aeabi_cdcmpeq>
  408160:	bf94      	ite	ls
  408162:	2001      	movls	r0, #1
  408164:	2000      	movhi	r0, #0
  408166:	f85d fb08 	ldr.w	pc, [sp], #8
  40816a:	bf00      	nop

0040816c <__aeabi_dcmpge>:
  40816c:	f84d ed08 	str.w	lr, [sp, #-8]!
  408170:	f7ff ffce 	bl	408110 <__aeabi_cdrcmple>
  408174:	bf94      	ite	ls
  408176:	2001      	movls	r0, #1
  408178:	2000      	movhi	r0, #0
  40817a:	f85d fb08 	ldr.w	pc, [sp], #8
  40817e:	bf00      	nop

00408180 <__aeabi_dcmpgt>:
  408180:	f84d ed08 	str.w	lr, [sp, #-8]!
  408184:	f7ff ffc4 	bl	408110 <__aeabi_cdrcmple>
  408188:	bf34      	ite	cc
  40818a:	2001      	movcc	r0, #1
  40818c:	2000      	movcs	r0, #0
  40818e:	f85d fb08 	ldr.w	pc, [sp], #8
  408192:	bf00      	nop

00408194 <__aeabi_dcmpun>:
  408194:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  408198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40819c:	d102      	bne.n	4081a4 <__aeabi_dcmpun+0x10>
  40819e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4081a2:	d10a      	bne.n	4081ba <__aeabi_dcmpun+0x26>
  4081a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4081a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4081ac:	d102      	bne.n	4081b4 <__aeabi_dcmpun+0x20>
  4081ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4081b2:	d102      	bne.n	4081ba <__aeabi_dcmpun+0x26>
  4081b4:	f04f 0000 	mov.w	r0, #0
  4081b8:	4770      	bx	lr
  4081ba:	f04f 0001 	mov.w	r0, #1
  4081be:	4770      	bx	lr

004081c0 <__aeabi_uldivmod>:
  4081c0:	b953      	cbnz	r3, 4081d8 <__aeabi_uldivmod+0x18>
  4081c2:	b94a      	cbnz	r2, 4081d8 <__aeabi_uldivmod+0x18>
  4081c4:	2900      	cmp	r1, #0
  4081c6:	bf08      	it	eq
  4081c8:	2800      	cmpeq	r0, #0
  4081ca:	bf1c      	itt	ne
  4081cc:	f04f 31ff 	movne.w	r1, #4294967295
  4081d0:	f04f 30ff 	movne.w	r0, #4294967295
  4081d4:	f000 b97a 	b.w	4084cc <__aeabi_idiv0>
  4081d8:	f1ad 0c08 	sub.w	ip, sp, #8
  4081dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4081e0:	f000 f806 	bl	4081f0 <__udivmoddi4>
  4081e4:	f8dd e004 	ldr.w	lr, [sp, #4]
  4081e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4081ec:	b004      	add	sp, #16
  4081ee:	4770      	bx	lr

004081f0 <__udivmoddi4>:
  4081f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4081f4:	468c      	mov	ip, r1
  4081f6:	460d      	mov	r5, r1
  4081f8:	4604      	mov	r4, r0
  4081fa:	9e08      	ldr	r6, [sp, #32]
  4081fc:	2b00      	cmp	r3, #0
  4081fe:	d151      	bne.n	4082a4 <__udivmoddi4+0xb4>
  408200:	428a      	cmp	r2, r1
  408202:	4617      	mov	r7, r2
  408204:	d96d      	bls.n	4082e2 <__udivmoddi4+0xf2>
  408206:	fab2 fe82 	clz	lr, r2
  40820a:	f1be 0f00 	cmp.w	lr, #0
  40820e:	d00b      	beq.n	408228 <__udivmoddi4+0x38>
  408210:	f1ce 0c20 	rsb	ip, lr, #32
  408214:	fa01 f50e 	lsl.w	r5, r1, lr
  408218:	fa20 fc0c 	lsr.w	ip, r0, ip
  40821c:	fa02 f70e 	lsl.w	r7, r2, lr
  408220:	ea4c 0c05 	orr.w	ip, ip, r5
  408224:	fa00 f40e 	lsl.w	r4, r0, lr
  408228:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40822c:	0c25      	lsrs	r5, r4, #16
  40822e:	fbbc f8fa 	udiv	r8, ip, sl
  408232:	fa1f f987 	uxth.w	r9, r7
  408236:	fb0a cc18 	mls	ip, sl, r8, ip
  40823a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40823e:	fb08 f309 	mul.w	r3, r8, r9
  408242:	42ab      	cmp	r3, r5
  408244:	d90a      	bls.n	40825c <__udivmoddi4+0x6c>
  408246:	19ed      	adds	r5, r5, r7
  408248:	f108 32ff 	add.w	r2, r8, #4294967295
  40824c:	f080 8123 	bcs.w	408496 <__udivmoddi4+0x2a6>
  408250:	42ab      	cmp	r3, r5
  408252:	f240 8120 	bls.w	408496 <__udivmoddi4+0x2a6>
  408256:	f1a8 0802 	sub.w	r8, r8, #2
  40825a:	443d      	add	r5, r7
  40825c:	1aed      	subs	r5, r5, r3
  40825e:	b2a4      	uxth	r4, r4
  408260:	fbb5 f0fa 	udiv	r0, r5, sl
  408264:	fb0a 5510 	mls	r5, sl, r0, r5
  408268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40826c:	fb00 f909 	mul.w	r9, r0, r9
  408270:	45a1      	cmp	r9, r4
  408272:	d909      	bls.n	408288 <__udivmoddi4+0x98>
  408274:	19e4      	adds	r4, r4, r7
  408276:	f100 33ff 	add.w	r3, r0, #4294967295
  40827a:	f080 810a 	bcs.w	408492 <__udivmoddi4+0x2a2>
  40827e:	45a1      	cmp	r9, r4
  408280:	f240 8107 	bls.w	408492 <__udivmoddi4+0x2a2>
  408284:	3802      	subs	r0, #2
  408286:	443c      	add	r4, r7
  408288:	eba4 0409 	sub.w	r4, r4, r9
  40828c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408290:	2100      	movs	r1, #0
  408292:	2e00      	cmp	r6, #0
  408294:	d061      	beq.n	40835a <__udivmoddi4+0x16a>
  408296:	fa24 f40e 	lsr.w	r4, r4, lr
  40829a:	2300      	movs	r3, #0
  40829c:	6034      	str	r4, [r6, #0]
  40829e:	6073      	str	r3, [r6, #4]
  4082a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082a4:	428b      	cmp	r3, r1
  4082a6:	d907      	bls.n	4082b8 <__udivmoddi4+0xc8>
  4082a8:	2e00      	cmp	r6, #0
  4082aa:	d054      	beq.n	408356 <__udivmoddi4+0x166>
  4082ac:	2100      	movs	r1, #0
  4082ae:	e886 0021 	stmia.w	r6, {r0, r5}
  4082b2:	4608      	mov	r0, r1
  4082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082b8:	fab3 f183 	clz	r1, r3
  4082bc:	2900      	cmp	r1, #0
  4082be:	f040 808e 	bne.w	4083de <__udivmoddi4+0x1ee>
  4082c2:	42ab      	cmp	r3, r5
  4082c4:	d302      	bcc.n	4082cc <__udivmoddi4+0xdc>
  4082c6:	4282      	cmp	r2, r0
  4082c8:	f200 80fa 	bhi.w	4084c0 <__udivmoddi4+0x2d0>
  4082cc:	1a84      	subs	r4, r0, r2
  4082ce:	eb65 0503 	sbc.w	r5, r5, r3
  4082d2:	2001      	movs	r0, #1
  4082d4:	46ac      	mov	ip, r5
  4082d6:	2e00      	cmp	r6, #0
  4082d8:	d03f      	beq.n	40835a <__udivmoddi4+0x16a>
  4082da:	e886 1010 	stmia.w	r6, {r4, ip}
  4082de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4082e2:	b912      	cbnz	r2, 4082ea <__udivmoddi4+0xfa>
  4082e4:	2701      	movs	r7, #1
  4082e6:	fbb7 f7f2 	udiv	r7, r7, r2
  4082ea:	fab7 fe87 	clz	lr, r7
  4082ee:	f1be 0f00 	cmp.w	lr, #0
  4082f2:	d134      	bne.n	40835e <__udivmoddi4+0x16e>
  4082f4:	1beb      	subs	r3, r5, r7
  4082f6:	0c3a      	lsrs	r2, r7, #16
  4082f8:	fa1f fc87 	uxth.w	ip, r7
  4082fc:	2101      	movs	r1, #1
  4082fe:	fbb3 f8f2 	udiv	r8, r3, r2
  408302:	0c25      	lsrs	r5, r4, #16
  408304:	fb02 3318 	mls	r3, r2, r8, r3
  408308:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40830c:	fb0c f308 	mul.w	r3, ip, r8
  408310:	42ab      	cmp	r3, r5
  408312:	d907      	bls.n	408324 <__udivmoddi4+0x134>
  408314:	19ed      	adds	r5, r5, r7
  408316:	f108 30ff 	add.w	r0, r8, #4294967295
  40831a:	d202      	bcs.n	408322 <__udivmoddi4+0x132>
  40831c:	42ab      	cmp	r3, r5
  40831e:	f200 80d1 	bhi.w	4084c4 <__udivmoddi4+0x2d4>
  408322:	4680      	mov	r8, r0
  408324:	1aed      	subs	r5, r5, r3
  408326:	b2a3      	uxth	r3, r4
  408328:	fbb5 f0f2 	udiv	r0, r5, r2
  40832c:	fb02 5510 	mls	r5, r2, r0, r5
  408330:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408334:	fb0c fc00 	mul.w	ip, ip, r0
  408338:	45a4      	cmp	ip, r4
  40833a:	d907      	bls.n	40834c <__udivmoddi4+0x15c>
  40833c:	19e4      	adds	r4, r4, r7
  40833e:	f100 33ff 	add.w	r3, r0, #4294967295
  408342:	d202      	bcs.n	40834a <__udivmoddi4+0x15a>
  408344:	45a4      	cmp	ip, r4
  408346:	f200 80b8 	bhi.w	4084ba <__udivmoddi4+0x2ca>
  40834a:	4618      	mov	r0, r3
  40834c:	eba4 040c 	sub.w	r4, r4, ip
  408350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408354:	e79d      	b.n	408292 <__udivmoddi4+0xa2>
  408356:	4631      	mov	r1, r6
  408358:	4630      	mov	r0, r6
  40835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40835e:	f1ce 0420 	rsb	r4, lr, #32
  408362:	fa05 f30e 	lsl.w	r3, r5, lr
  408366:	fa07 f70e 	lsl.w	r7, r7, lr
  40836a:	fa20 f804 	lsr.w	r8, r0, r4
  40836e:	0c3a      	lsrs	r2, r7, #16
  408370:	fa25 f404 	lsr.w	r4, r5, r4
  408374:	ea48 0803 	orr.w	r8, r8, r3
  408378:	fbb4 f1f2 	udiv	r1, r4, r2
  40837c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408380:	fb02 4411 	mls	r4, r2, r1, r4
  408384:	fa1f fc87 	uxth.w	ip, r7
  408388:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40838c:	fb01 f30c 	mul.w	r3, r1, ip
  408390:	42ab      	cmp	r3, r5
  408392:	fa00 f40e 	lsl.w	r4, r0, lr
  408396:	d909      	bls.n	4083ac <__udivmoddi4+0x1bc>
  408398:	19ed      	adds	r5, r5, r7
  40839a:	f101 30ff 	add.w	r0, r1, #4294967295
  40839e:	f080 808a 	bcs.w	4084b6 <__udivmoddi4+0x2c6>
  4083a2:	42ab      	cmp	r3, r5
  4083a4:	f240 8087 	bls.w	4084b6 <__udivmoddi4+0x2c6>
  4083a8:	3902      	subs	r1, #2
  4083aa:	443d      	add	r5, r7
  4083ac:	1aeb      	subs	r3, r5, r3
  4083ae:	fa1f f588 	uxth.w	r5, r8
  4083b2:	fbb3 f0f2 	udiv	r0, r3, r2
  4083b6:	fb02 3310 	mls	r3, r2, r0, r3
  4083ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4083be:	fb00 f30c 	mul.w	r3, r0, ip
  4083c2:	42ab      	cmp	r3, r5
  4083c4:	d907      	bls.n	4083d6 <__udivmoddi4+0x1e6>
  4083c6:	19ed      	adds	r5, r5, r7
  4083c8:	f100 38ff 	add.w	r8, r0, #4294967295
  4083cc:	d26f      	bcs.n	4084ae <__udivmoddi4+0x2be>
  4083ce:	42ab      	cmp	r3, r5
  4083d0:	d96d      	bls.n	4084ae <__udivmoddi4+0x2be>
  4083d2:	3802      	subs	r0, #2
  4083d4:	443d      	add	r5, r7
  4083d6:	1aeb      	subs	r3, r5, r3
  4083d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4083dc:	e78f      	b.n	4082fe <__udivmoddi4+0x10e>
  4083de:	f1c1 0720 	rsb	r7, r1, #32
  4083e2:	fa22 f807 	lsr.w	r8, r2, r7
  4083e6:	408b      	lsls	r3, r1
  4083e8:	fa05 f401 	lsl.w	r4, r5, r1
  4083ec:	ea48 0303 	orr.w	r3, r8, r3
  4083f0:	fa20 fe07 	lsr.w	lr, r0, r7
  4083f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4083f8:	40fd      	lsrs	r5, r7
  4083fa:	ea4e 0e04 	orr.w	lr, lr, r4
  4083fe:	fbb5 f9fc 	udiv	r9, r5, ip
  408402:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408406:	fb0c 5519 	mls	r5, ip, r9, r5
  40840a:	fa1f f883 	uxth.w	r8, r3
  40840e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408412:	fb09 f408 	mul.w	r4, r9, r8
  408416:	42ac      	cmp	r4, r5
  408418:	fa02 f201 	lsl.w	r2, r2, r1
  40841c:	fa00 fa01 	lsl.w	sl, r0, r1
  408420:	d908      	bls.n	408434 <__udivmoddi4+0x244>
  408422:	18ed      	adds	r5, r5, r3
  408424:	f109 30ff 	add.w	r0, r9, #4294967295
  408428:	d243      	bcs.n	4084b2 <__udivmoddi4+0x2c2>
  40842a:	42ac      	cmp	r4, r5
  40842c:	d941      	bls.n	4084b2 <__udivmoddi4+0x2c2>
  40842e:	f1a9 0902 	sub.w	r9, r9, #2
  408432:	441d      	add	r5, r3
  408434:	1b2d      	subs	r5, r5, r4
  408436:	fa1f fe8e 	uxth.w	lr, lr
  40843a:	fbb5 f0fc 	udiv	r0, r5, ip
  40843e:	fb0c 5510 	mls	r5, ip, r0, r5
  408442:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408446:	fb00 f808 	mul.w	r8, r0, r8
  40844a:	45a0      	cmp	r8, r4
  40844c:	d907      	bls.n	40845e <__udivmoddi4+0x26e>
  40844e:	18e4      	adds	r4, r4, r3
  408450:	f100 35ff 	add.w	r5, r0, #4294967295
  408454:	d229      	bcs.n	4084aa <__udivmoddi4+0x2ba>
  408456:	45a0      	cmp	r8, r4
  408458:	d927      	bls.n	4084aa <__udivmoddi4+0x2ba>
  40845a:	3802      	subs	r0, #2
  40845c:	441c      	add	r4, r3
  40845e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408462:	eba4 0408 	sub.w	r4, r4, r8
  408466:	fba0 8902 	umull	r8, r9, r0, r2
  40846a:	454c      	cmp	r4, r9
  40846c:	46c6      	mov	lr, r8
  40846e:	464d      	mov	r5, r9
  408470:	d315      	bcc.n	40849e <__udivmoddi4+0x2ae>
  408472:	d012      	beq.n	40849a <__udivmoddi4+0x2aa>
  408474:	b156      	cbz	r6, 40848c <__udivmoddi4+0x29c>
  408476:	ebba 030e 	subs.w	r3, sl, lr
  40847a:	eb64 0405 	sbc.w	r4, r4, r5
  40847e:	fa04 f707 	lsl.w	r7, r4, r7
  408482:	40cb      	lsrs	r3, r1
  408484:	431f      	orrs	r7, r3
  408486:	40cc      	lsrs	r4, r1
  408488:	6037      	str	r7, [r6, #0]
  40848a:	6074      	str	r4, [r6, #4]
  40848c:	2100      	movs	r1, #0
  40848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408492:	4618      	mov	r0, r3
  408494:	e6f8      	b.n	408288 <__udivmoddi4+0x98>
  408496:	4690      	mov	r8, r2
  408498:	e6e0      	b.n	40825c <__udivmoddi4+0x6c>
  40849a:	45c2      	cmp	sl, r8
  40849c:	d2ea      	bcs.n	408474 <__udivmoddi4+0x284>
  40849e:	ebb8 0e02 	subs.w	lr, r8, r2
  4084a2:	eb69 0503 	sbc.w	r5, r9, r3
  4084a6:	3801      	subs	r0, #1
  4084a8:	e7e4      	b.n	408474 <__udivmoddi4+0x284>
  4084aa:	4628      	mov	r0, r5
  4084ac:	e7d7      	b.n	40845e <__udivmoddi4+0x26e>
  4084ae:	4640      	mov	r0, r8
  4084b0:	e791      	b.n	4083d6 <__udivmoddi4+0x1e6>
  4084b2:	4681      	mov	r9, r0
  4084b4:	e7be      	b.n	408434 <__udivmoddi4+0x244>
  4084b6:	4601      	mov	r1, r0
  4084b8:	e778      	b.n	4083ac <__udivmoddi4+0x1bc>
  4084ba:	3802      	subs	r0, #2
  4084bc:	443c      	add	r4, r7
  4084be:	e745      	b.n	40834c <__udivmoddi4+0x15c>
  4084c0:	4608      	mov	r0, r1
  4084c2:	e708      	b.n	4082d6 <__udivmoddi4+0xe6>
  4084c4:	f1a8 0802 	sub.w	r8, r8, #2
  4084c8:	443d      	add	r5, r7
  4084ca:	e72b      	b.n	408324 <__udivmoddi4+0x134>

004084cc <__aeabi_idiv0>:
  4084cc:	4770      	bx	lr
  4084ce:	bf00      	nop
  4084d0:	706d6554 	.word	0x706d6554
  4084d4:	6550206f 	.word	0x6550206f
  4084d8:	726f6372 	.word	0x726f6372
  4084dc:	6f646972 	.word	0x6f646972
  4084e0:	2064253a 	.word	0x2064253a
  4084e4:	2064253a 	.word	0x2064253a
  4084e8:	0064253a 	.word	0x0064253a
  4084ec:	6f6c6556 	.word	0x6f6c6556
  4084f0:	61646963 	.word	0x61646963
  4084f4:	4d206564 	.word	0x4d206564
  4084f8:	61696465 	.word	0x61696465
  4084fc:	2064253a 	.word	0x2064253a
  408500:	682f6d6b 	.word	0x682f6d6b
  408504:	00000000 	.word	0x00000000
  408508:	74736944 	.word	0x74736944
  40850c:	6550202e 	.word	0x6550202e
  408510:	726f6372 	.word	0x726f6372
  408514:	61646972 	.word	0x61646972
  408518:	2064253a 	.word	0x2064253a
  40851c:	0000006d 	.word	0x0000006d
  408520:	61746f52 	.word	0x61746f52
  408524:	73656f63 	.word	0x73656f63
  408528:	00642520 	.word	0x00642520

0040852c <p_uc_charset10x14>:
	...
  408548:	ccffccff 00000000 00000000 00000000     ................
  408558:	00f000f0 00000000 00f000f0 00000000     ................
  408568:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  408578:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  408588:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  408598:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  4085a8:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4085b8:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  4085d0:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  4085e0:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  4085f0:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  408600:	c0078003 600ce00e 00030003 00030003     .......`........
  408610:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  408620:	7000f800 00000000 00000000 00000000     ...p............
  408630:	00030003 00030003 00030003 00030003     ................
  408640:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  408658:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  408668:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  408678:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  408688:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  408698:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  4086a8:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4086b8:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4086c8:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  4086d8:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  4086e8:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4086f8:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  408708:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  408718:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  408728:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  408738:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  408748:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  408758:	00000000 00030000 c00f8007 7038e01c     ..............8p
  408768:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  408778:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  408788:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  408798:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  4087a8:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  4087b8:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  4087c8:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  4087d8:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  4087e8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4087f8:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  408808:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  408818:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  408828:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  408838:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  408848:	f033f873 fcfffcff 00030003 00030003     s.3.............
  408858:	00030003 fcfffcff 00000000 0cc00cc0     ................
  408868:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  408878:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  408888:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  408898:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  4088a8:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  4088b8:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  4088c8:	000e001c 80030007 e000c001 fcfffcff     ................
  4088d8:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4088e8:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4088f8:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  408908:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  408918:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  408928:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  408938:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  408948:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  408958:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  408968:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  408978:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  408988:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  408998:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  4089a8:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  4089b8:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  4089c8:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  4089d8:	00000000 00300030 000c000c 00030003     ....0.0.........
  4089e8:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  4089f8:	fcff0cc0 0000fcff 00000000 001c000c     ................
  408a08:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  408a18:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  408a28:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  408a38:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  408a48:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  408a58:	0c030c03 0c030c03 9c030c03 f000f801     ................
  408a68:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  408a78:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  408a88:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  408a98:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  408aa8:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  408ab8:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  408ac8:	f007f80f fcfffcff 00030003 00030003     ................
  408ad8:	fc018003 0000fc00 00000000 00000000     ................
  408ae8:	fc1bfc1b 00000000 00000000 30000000     ...............0
  408af8:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  408b08:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  408b18:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  408b28:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  408b38:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  408b48:	00070003 000c000e 000e000c fc03fc07     ................
  408b58:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  408b68:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  408b78:	c00fc00c 00038007 80070003 c00cc00f     ................
  408b88:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  408b98:	00078003 000c000e 000e000c 00030007     ................
  408ba8:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  408bb8:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  408bc8:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  408bd8:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  408be8:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  408bf8:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  408c08:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  408c18:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  408c28:	f001f801 00078003 000c000e 1c0c0c0c     ................
  408c38:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  408c48:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  408c58:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  408c68:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  408c78:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  408c88:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  408c98:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  408ca8:	fcfffcff                                ....

00408cac <_global_impure_ptr>:
  408cac:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  408cbc:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  408ccc:	46454443 00000000 33323130 37363534     CDEF....01234567
  408cdc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  408cec:	0000296c 00000030                       l)..0...

00408cf4 <blanks.7223>:
  408cf4:	20202020 20202020 20202020 20202020                     

00408d04 <zeroes.7224>:
  408d04:	30303030 30303030 30303030 30303030     0000000000000000
  408d14:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408d24:	00000000                                ....

00408d28 <__mprec_bigtens>:
  408d28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408d38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408d48:	7f73bf3c 75154fdd                       <.s..O.u

00408d50 <__mprec_tens>:
  408d50:	00000000 3ff00000 00000000 40240000     .......?......$@
  408d60:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408d70:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408d80:	00000000 412e8480 00000000 416312d0     .......A......cA
  408d90:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408da0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408db0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408dc0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408dd0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408de0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408df0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408e00:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408e10:	79d99db4 44ea7843                       ...yCx.D

00408e18 <p05.6055>:
  408e18:	00000005 00000019 0000007d 00000043     ........}...C...
  408e28:	49534f50 00000058 0000002e              POSIX.......

00408e34 <_ctype_>:
  408e34:	20202000 20202020 28282020 20282828     .         ((((( 
  408e44:	20202020 20202020 20202020 20202020                     
  408e54:	10108820 10101010 10101010 10101010      ...............
  408e64:	04040410 04040404 10040404 10101010     ................
  408e74:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408e84:	01010101 01010101 01010101 10101010     ................
  408e94:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408ea4:	02020202 02020202 02020202 10101010     ................
  408eb4:	00000020 00000000 00000000 00000000      ...............
	...

00408f38 <_init>:
  408f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408f3a:	bf00      	nop
  408f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408f3e:	bc08      	pop	{r3}
  408f40:	469e      	mov	lr, r3
  408f42:	4770      	bx	lr

00408f44 <__init_array_start>:
  408f44:	00405955 	.word	0x00405955

00408f48 <__frame_dummy_init_array_entry>:
  408f48:	0040018d                                ..@.

00408f4c <_fini>:
  408f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408f4e:	bf00      	nop
  408f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408f52:	bc08      	pop	{r3}
  408f54:	469e      	mov	lr, r3
  408f56:	4770      	bx	lr

00408f58 <__fini_array_start>:
  408f58:	00400169 	.word	0x00400169
